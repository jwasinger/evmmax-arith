package evmmax_arith

import (
	"encoding/binary"
	"errors"
	"fmt"
	"math/bits"
)

func SubModNonUnrolled64(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [1]uint64
	x[0] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[0] = binary.BigEndian.Uint64(y_bytes[0:8])

	mod := f.ModulusLimbs
	_ = mod[0]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [1]uint64{0}

	for i := 0; i < 1; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 1; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[0]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[0])
	return nil
}

func SubModNonUnrolled128(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [2]uint64
	x[1] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[1] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[0] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[0] = binary.BigEndian.Uint64(y_bytes[8:16])

	mod := f.ModulusLimbs
	_ = mod[1]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [2]uint64{0, 0}

	for i := 0; i < 2; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 2; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[1]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[1])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[0])
	return nil
}

func SubModNonUnrolled192(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [3]uint64
	x[2] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[2] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[1] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[1] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[0] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[0] = binary.BigEndian.Uint64(y_bytes[16:24])

	mod := f.ModulusLimbs
	_ = mod[2]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [3]uint64{0, 0, 0}

	for i := 0; i < 3; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 3; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[2]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[2])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[1])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[0])
	return nil
}

func SubModNonUnrolled256(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [4]uint64
	x[3] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[3] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[2] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[2] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[1] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[1] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[0] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[0] = binary.BigEndian.Uint64(y_bytes[24:32])

	mod := f.ModulusLimbs
	_ = mod[3]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [4]uint64{0, 0, 0, 0}

	for i := 0; i < 4; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 4; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[3]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[3])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[2])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[1])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[0])
	return nil
}

func SubModNonUnrolled320(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [5]uint64
	x[4] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[4] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[3] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[3] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[2] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[2] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[1] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[1] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[0] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[0] = binary.BigEndian.Uint64(y_bytes[32:40])

	mod := f.ModulusLimbs
	_ = mod[4]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [5]uint64{0, 0, 0, 0, 0}

	for i := 0; i < 5; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 5; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[4]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[4])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[3])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[2])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[1])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[0])
	return nil
}

func SubModNonUnrolled384(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [6]uint64
	x[5] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[5] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[4] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[4] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[3] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[3] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[2] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[2] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[1] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[1] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[0] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[0] = binary.BigEndian.Uint64(y_bytes[40:48])

	mod := f.ModulusLimbs
	_ = mod[5]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [6]uint64{0, 0, 0, 0, 0, 0}

	for i := 0; i < 6; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 6; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[5]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[5])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[4])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[3])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[2])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[1])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[0])
	return nil
}

func SubModNonUnrolled448(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [7]uint64
	x[6] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[6] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[5] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[5] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[4] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[4] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[3] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[3] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[2] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[2] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[1] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[1] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[0] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[0] = binary.BigEndian.Uint64(y_bytes[48:56])

	mod := f.ModulusLimbs
	_ = mod[6]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [7]uint64{0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 7; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 7; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[6]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[6])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[5])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[4])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[3])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[2])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[1])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[0])
	return nil
}

func SubModNonUnrolled512(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [8]uint64
	x[7] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[7] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[6] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[6] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[5] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[5] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[4] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[4] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[3] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[3] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[2] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[2] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[1] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[1] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[0] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[0] = binary.BigEndian.Uint64(y_bytes[56:64])

	mod := f.ModulusLimbs
	_ = mod[7]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [8]uint64{0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 8; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 8; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[7]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[7])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[6])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[5])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[4])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[3])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[2])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[1])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[0])
	return nil
}

func SubModNonUnrolled576(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [9]uint64
	x[8] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[8] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[7] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[7] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[6] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[6] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[5] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[5] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[4] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[4] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[3] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[3] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[2] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[2] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[1] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[1] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[0] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[0] = binary.BigEndian.Uint64(y_bytes[64:72])

	mod := f.ModulusLimbs
	_ = mod[8]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [9]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 9; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 9; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[8]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[8])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[7])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[6])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[5])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[4])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[3])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[2])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[1])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[0])
	return nil
}

func SubModNonUnrolled640(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [10]uint64
	x[9] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[9] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[8] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[8] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[7] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[7] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[6] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[6] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[5] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[5] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[4] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[4] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[3] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[3] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[2] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[2] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[1] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[1] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[0] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[0] = binary.BigEndian.Uint64(y_bytes[72:80])

	mod := f.ModulusLimbs
	_ = mod[9]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [10]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 10; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 10; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[9]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[9])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[8])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[7])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[6])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[5])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[4])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[3])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[2])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[1])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[0])
	return nil
}

func SubModNonUnrolled704(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [11]uint64
	x[10] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[10] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[9] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[9] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[8] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[8] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[7] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[7] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[6] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[6] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[5] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[5] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[4] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[4] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[3] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[3] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[2] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[2] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[1] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[1] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[0] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[0] = binary.BigEndian.Uint64(y_bytes[80:88])

	mod := f.ModulusLimbs
	_ = mod[10]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [11]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 11; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 11; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[10]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[10])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[9])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[8])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[7])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[6])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[5])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[4])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[3])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[2])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[1])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[0])
	return nil
}

func SubModNonUnrolled768(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [12]uint64
	x[11] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[11] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[10] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[10] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[9] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[9] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[8] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[8] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[7] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[7] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[6] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[6] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[5] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[5] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[4] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[4] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[3] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[3] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[2] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[2] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[1] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[1] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[0] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[0] = binary.BigEndian.Uint64(y_bytes[88:96])

	mod := f.ModulusLimbs
	_ = mod[11]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [12]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 12; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 12; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[11]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[11])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[10])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[9])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[8])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[7])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[6])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[5])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[4])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[3])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[2])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[1])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[0])
	return nil
}

func SubModNonUnrolled832(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [13]uint64
	x[12] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[12] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[11] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[11] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[10] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[10] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[9] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[9] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[8] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[8] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[7] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[7] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[6] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[6] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[5] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[5] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[4] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[4] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[3] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[3] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[2] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[2] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[1] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[1] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[0] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[0] = binary.BigEndian.Uint64(y_bytes[96:104])

	mod := f.ModulusLimbs
	_ = mod[12]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [13]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 13; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 13; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[12]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[12])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[11])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[10])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[9])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[8])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[7])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[6])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[5])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[4])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[3])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[2])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[1])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[0])
	return nil
}

func SubModNonUnrolled896(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [14]uint64
	x[13] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[13] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[12] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[12] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[11] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[11] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[10] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[10] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[9] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[9] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[8] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[8] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[7] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[7] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[6] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[6] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[5] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[5] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[4] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[4] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[3] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[3] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[2] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[2] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[1] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[1] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[0] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[0] = binary.BigEndian.Uint64(y_bytes[104:112])

	mod := f.ModulusLimbs
	_ = mod[13]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [14]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 14; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 14; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[13]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[13])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[12])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[11])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[10])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[9])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[8])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[7])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[6])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[5])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[4])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[3])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[2])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[1])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[0])
	return nil
}

func SubModNonUnrolled960(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [15]uint64
	x[14] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[14] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[13] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[13] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[12] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[12] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[11] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[11] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[10] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[10] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[9] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[9] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[8] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[8] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[7] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[7] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[6] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[6] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[5] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[5] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[4] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[4] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[3] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[3] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[2] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[2] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[1] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[1] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[0] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[0] = binary.BigEndian.Uint64(y_bytes[112:120])

	mod := f.ModulusLimbs
	_ = mod[14]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [15]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 15; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 15; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[14]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[14])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[13])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[12])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[11])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[10])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[9])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[8])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[7])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[6])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[5])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[4])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[3])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[2])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[1])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[0])
	return nil
}

func SubModNonUnrolled1024(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [16]uint64
	x[15] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[15] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[14] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[14] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[13] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[13] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[12] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[12] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[11] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[11] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[10] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[10] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[9] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[9] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[8] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[8] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[7] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[7] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[6] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[6] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[5] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[5] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[4] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[4] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[3] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[3] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[2] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[2] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[1] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[1] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[0] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[0] = binary.BigEndian.Uint64(y_bytes[120:128])

	mod := f.ModulusLimbs
	_ = mod[15]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [16]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 16; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 16; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[15]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[15])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[14])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[13])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[12])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[11])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[10])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[9])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[8])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[7])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[6])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[5])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[4])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[3])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[2])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[1])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[0])
	return nil
}

func SubModNonUnrolled1088(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [17]uint64
	x[16] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[16] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[15] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[15] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[14] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[14] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[13] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[13] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[12] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[12] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[11] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[11] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[10] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[10] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[9] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[9] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[8] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[8] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[7] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[7] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[6] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[6] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[5] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[5] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[4] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[4] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[3] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[3] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[2] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[2] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[1] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[1] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[0] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[0] = binary.BigEndian.Uint64(y_bytes[128:136])

	mod := f.ModulusLimbs
	_ = mod[16]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [17]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 17; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 17; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[16]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[16])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[15])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[14])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[13])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[12])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[11])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[10])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[9])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[8])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[7])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[6])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[5])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[4])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[3])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[2])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[1])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[0])
	return nil
}

func SubModNonUnrolled1152(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [18]uint64
	x[17] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[17] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[16] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[16] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[15] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[15] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[14] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[14] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[13] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[13] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[12] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[12] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[11] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[11] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[10] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[10] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[9] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[9] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[8] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[8] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[7] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[7] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[6] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[6] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[5] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[5] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[4] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[4] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[3] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[3] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[2] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[2] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[1] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[1] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[0] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[0] = binary.BigEndian.Uint64(y_bytes[136:144])

	mod := f.ModulusLimbs
	_ = mod[17]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [18]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 18; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 18; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[17]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[17])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[16])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[15])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[14])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[13])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[12])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[11])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[10])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[9])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[8])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[7])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[6])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[5])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[4])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[3])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[2])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[1])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[0])
	return nil
}

func SubModNonUnrolled1216(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [19]uint64
	x[18] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[18] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[17] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[17] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[16] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[16] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[15] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[15] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[14] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[14] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[13] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[13] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[12] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[12] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[11] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[11] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[10] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[10] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[9] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[9] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[8] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[8] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[7] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[7] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[6] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[6] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[5] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[5] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[4] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[4] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[3] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[3] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[2] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[2] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[1] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[1] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[0] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[0] = binary.BigEndian.Uint64(y_bytes[144:152])

	mod := f.ModulusLimbs
	_ = mod[18]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [19]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 19; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 19; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[18]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[18])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[17])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[16])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[15])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[14])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[13])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[12])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[11])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[10])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[9])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[8])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[7])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[6])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[5])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[4])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[3])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[2])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[1])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[0])
	return nil
}

func SubModNonUnrolled1280(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [20]uint64
	x[19] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[19] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[18] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[18] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[17] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[17] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[16] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[16] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[15] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[15] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[14] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[14] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[13] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[13] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[12] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[12] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[11] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[11] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[10] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[10] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[9] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[9] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[8] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[8] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[7] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[7] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[6] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[6] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[5] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[5] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[4] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[4] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[3] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[3] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[2] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[2] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[1] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[1] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[0] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[0] = binary.BigEndian.Uint64(y_bytes[152:160])

	mod := f.ModulusLimbs
	_ = mod[19]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [20]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 20; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 20; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[19]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[19])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[18])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[17])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[16])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[15])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[14])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[13])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[12])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[11])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[10])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[9])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[8])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[7])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[6])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[5])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[4])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[3])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[2])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[1])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[0])
	return nil
}

func SubModNonUnrolled1344(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [21]uint64
	x[20] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[20] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[19] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[19] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[18] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[18] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[17] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[17] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[16] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[16] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[15] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[15] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[14] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[14] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[13] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[13] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[12] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[12] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[11] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[11] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[10] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[10] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[9] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[9] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[8] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[8] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[7] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[7] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[6] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[6] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[5] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[5] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[4] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[4] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[3] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[3] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[2] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[2] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[1] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[1] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[0] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[0] = binary.BigEndian.Uint64(y_bytes[160:168])

	mod := f.ModulusLimbs
	_ = mod[20]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [21]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 21; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 21; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[20]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[20])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[19])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[18])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[17])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[16])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[15])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[14])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[13])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[12])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[11])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[10])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[9])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[8])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[7])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[6])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[5])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[4])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[3])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[2])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[1])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[0])
	return nil
}

func SubModNonUnrolled1408(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [22]uint64
	x[21] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[21] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[20] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[20] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[19] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[19] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[18] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[18] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[17] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[17] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[16] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[16] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[15] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[15] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[14] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[14] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[13] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[13] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[12] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[12] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[11] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[11] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[10] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[10] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[9] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[9] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[8] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[8] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[7] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[7] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[6] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[6] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[5] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[5] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[4] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[4] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[3] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[3] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[2] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[2] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[1] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[1] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[0] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[0] = binary.BigEndian.Uint64(y_bytes[168:176])

	mod := f.ModulusLimbs
	_ = mod[21]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [22]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 22; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 22; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[21]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[21])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[20])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[19])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[18])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[17])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[16])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[15])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[14])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[13])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[12])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[11])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[10])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[9])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[8])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[7])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[6])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[5])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[4])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[3])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[2])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[1])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[0])
	return nil
}

func SubModNonUnrolled1472(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [23]uint64
	x[22] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[22] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[21] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[21] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[20] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[20] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[19] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[19] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[18] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[18] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[17] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[17] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[16] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[16] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[15] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[15] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[14] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[14] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[13] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[13] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[12] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[12] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[11] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[11] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[10] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[10] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[9] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[9] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[8] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[8] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[7] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[7] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[6] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[6] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[5] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[5] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[4] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[4] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[3] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[3] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[2] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[2] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[1] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[1] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[0] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[0] = binary.BigEndian.Uint64(y_bytes[176:184])

	mod := f.ModulusLimbs
	_ = mod[22]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [23]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 23; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 23; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[22]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[22])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[21])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[20])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[19])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[18])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[17])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[16])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[15])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[14])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[13])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[12])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[11])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[10])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[9])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[8])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[7])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[6])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[5])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[4])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[3])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[2])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[1])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[0])
	return nil
}

func SubModNonUnrolled1536(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [24]uint64
	x[23] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[23] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[22] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[22] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[21] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[21] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[20] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[20] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[19] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[19] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[18] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[18] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[17] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[17] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[16] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[16] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[15] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[15] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[14] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[14] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[13] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[13] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[12] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[12] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[11] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[11] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[10] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[10] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[9] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[9] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[8] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[8] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[7] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[7] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[6] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[6] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[5] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[5] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[4] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[4] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[3] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[3] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[2] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[2] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[1] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[1] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[0] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[0] = binary.BigEndian.Uint64(y_bytes[184:192])

	mod := f.ModulusLimbs
	_ = mod[23]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [24]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 24; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 24; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[23]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[23])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[22])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[21])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[20])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[19])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[18])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[17])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[16])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[15])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[14])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[13])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[12])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[11])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[10])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[9])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[8])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[7])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[6])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[5])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[4])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[3])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[2])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[1])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[0])
	return nil
}

func SubModNonUnrolled1600(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [25]uint64
	x[24] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[24] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[23] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[23] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[22] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[22] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[21] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[21] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[20] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[20] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[19] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[19] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[18] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[18] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[17] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[17] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[16] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[16] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[15] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[15] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[14] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[14] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[13] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[13] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[12] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[12] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[11] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[11] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[10] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[10] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[9] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[9] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[8] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[8] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[7] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[7] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[6] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[6] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[5] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[5] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[4] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[4] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[3] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[3] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[2] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[2] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[1] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[1] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[0] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[0] = binary.BigEndian.Uint64(y_bytes[192:200])

	mod := f.ModulusLimbs
	_ = mod[24]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [25]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 25; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 25; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[24]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[24])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[23])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[22])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[21])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[20])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[19])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[18])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[17])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[16])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[15])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[14])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[13])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[12])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[11])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[10])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[9])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[8])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[7])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[6])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[5])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[4])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[3])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[2])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[1])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[0])
	return nil
}

func SubModNonUnrolled1664(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [26]uint64
	x[25] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[25] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[24] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[24] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[23] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[23] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[22] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[22] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[21] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[21] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[20] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[20] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[19] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[19] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[18] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[18] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[17] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[17] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[16] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[16] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[15] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[15] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[14] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[14] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[13] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[13] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[12] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[12] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[11] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[11] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[10] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[10] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[9] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[9] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[8] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[8] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[7] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[7] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[6] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[6] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[5] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[5] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[4] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[4] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[3] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[3] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[2] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[2] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[1] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[1] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[0] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[0] = binary.BigEndian.Uint64(y_bytes[200:208])

	mod := f.ModulusLimbs
	_ = mod[25]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [26]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 26; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 26; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[25]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[25])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[24])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[23])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[22])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[21])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[20])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[19])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[18])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[17])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[16])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[15])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[14])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[13])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[12])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[11])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[10])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[9])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[8])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[7])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[6])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[5])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[4])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[3])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[2])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[1])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[0])
	return nil
}

func SubModNonUnrolled1728(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [27]uint64
	x[26] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[26] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[25] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[25] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[24] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[24] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[23] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[23] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[22] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[22] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[21] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[21] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[20] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[20] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[19] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[19] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[18] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[18] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[17] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[17] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[16] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[16] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[15] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[15] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[14] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[14] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[13] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[13] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[12] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[12] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[11] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[11] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[10] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[10] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[9] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[9] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[8] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[8] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[7] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[7] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[6] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[6] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[5] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[5] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[4] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[4] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[3] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[3] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[2] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[2] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[1] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[1] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[0] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[0] = binary.BigEndian.Uint64(y_bytes[208:216])

	mod := f.ModulusLimbs
	_ = mod[26]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [27]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 27; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 27; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[26]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[26])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[25])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[24])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[23])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[22])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[21])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[20])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[19])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[18])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[17])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[16])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[15])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[14])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[13])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[12])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[11])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[10])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[9])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[8])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[7])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[6])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[5])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[4])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[3])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[2])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[1])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[0])
	return nil
}

func SubModNonUnrolled1792(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [28]uint64
	x[27] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[27] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[26] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[26] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[25] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[25] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[24] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[24] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[23] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[23] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[22] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[22] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[21] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[21] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[20] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[20] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[19] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[19] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[18] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[18] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[17] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[17] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[16] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[16] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[15] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[15] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[14] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[14] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[13] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[13] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[12] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[12] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[11] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[11] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[10] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[10] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[9] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[9] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[8] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[8] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[7] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[7] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[6] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[6] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[5] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[5] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[4] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[4] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[3] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[3] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[2] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[2] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[1] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[1] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[0] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[0] = binary.BigEndian.Uint64(y_bytes[216:224])

	mod := f.ModulusLimbs
	_ = mod[27]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [28]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 28; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 28; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[27]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[27])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[26])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[25])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[24])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[23])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[22])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[21])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[20])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[19])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[18])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[17])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[16])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[15])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[14])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[13])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[12])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[11])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[10])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[9])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[8])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[7])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[6])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[5])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[4])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[3])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[2])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[1])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[0])
	return nil
}

func SubModNonUnrolled1856(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [29]uint64
	x[28] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[28] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[27] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[27] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[26] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[26] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[25] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[25] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[24] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[24] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[23] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[23] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[22] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[22] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[21] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[21] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[20] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[20] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[19] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[19] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[18] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[18] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[17] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[17] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[16] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[16] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[15] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[15] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[14] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[14] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[13] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[13] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[12] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[12] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[11] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[11] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[10] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[10] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[9] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[9] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[8] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[8] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[7] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[7] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[6] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[6] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[5] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[5] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[4] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[4] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[3] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[3] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[2] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[2] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[1] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[1] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[0] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[0] = binary.BigEndian.Uint64(y_bytes[224:232])

	mod := f.ModulusLimbs
	_ = mod[28]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [29]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 29; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 29; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[28]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[28])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[27])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[26])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[25])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[24])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[23])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[22])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[21])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[20])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[19])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[18])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[17])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[16])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[15])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[14])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[13])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[12])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[11])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[10])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[9])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[8])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[7])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[6])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[5])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[4])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[3])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[2])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[1])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[0])
	return nil
}

func SubModNonUnrolled1920(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [30]uint64
	x[29] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[29] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[28] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[28] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[27] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[27] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[26] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[26] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[25] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[25] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[24] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[24] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[23] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[23] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[22] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[22] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[21] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[21] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[20] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[20] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[19] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[19] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[18] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[18] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[17] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[17] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[16] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[16] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[15] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[15] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[14] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[14] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[13] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[13] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[12] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[12] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[11] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[11] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[10] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[10] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[9] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[9] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[8] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[8] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[7] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[7] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[6] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[6] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[5] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[5] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[4] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[4] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[3] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[3] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[2] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[2] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[1] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[1] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[0] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[0] = binary.BigEndian.Uint64(y_bytes[232:240])

	mod := f.ModulusLimbs
	_ = mod[29]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [30]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 30; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 30; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[29]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[29])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[28])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[27])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[26])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[25])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[24])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[23])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[22])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[21])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[20])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[19])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[18])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[17])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[16])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[15])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[14])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[13])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[12])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[11])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[10])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[9])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[8])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[7])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[6])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[5])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[4])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[3])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[2])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[1])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[0])
	return nil
}

func SubModNonUnrolled1984(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [31]uint64
	x[30] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[30] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[29] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[29] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[28] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[28] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[27] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[27] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[26] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[26] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[25] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[25] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[24] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[24] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[23] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[23] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[22] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[22] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[21] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[21] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[20] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[20] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[19] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[19] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[18] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[18] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[17] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[17] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[16] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[16] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[15] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[15] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[14] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[14] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[13] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[13] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[12] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[12] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[11] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[11] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[10] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[10] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[9] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[9] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[8] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[8] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[7] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[7] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[6] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[6] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[5] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[5] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[4] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[4] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[3] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[3] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[2] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[2] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[1] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[1] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[0] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[0] = binary.BigEndian.Uint64(y_bytes[240:248])

	mod := f.ModulusLimbs
	_ = mod[30]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [31]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 31; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 31; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[30]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[30])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[29])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[28])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[27])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[26])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[25])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[24])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[23])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[22])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[21])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[20])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[19])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[18])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[17])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[16])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[15])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[14])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[13])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[12])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[11])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[10])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[9])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[8])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[7])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[6])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[5])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[4])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[3])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[2])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[1])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[0])
	return nil
}

func SubModNonUnrolled2048(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [32]uint64
	x[31] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[31] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[30] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[30] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[29] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[29] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[28] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[28] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[27] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[27] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[26] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[26] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[25] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[25] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[24] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[24] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[23] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[23] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[22] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[22] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[21] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[21] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[20] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[20] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[19] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[19] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[18] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[18] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[17] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[17] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[16] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[16] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[15] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[15] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[14] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[14] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[13] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[13] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[12] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[12] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[11] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[11] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[10] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[10] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[9] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[9] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[8] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[8] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[7] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[7] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[6] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[6] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[5] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[5] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[4] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[4] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[3] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[3] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[2] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[2] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[1] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[1] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[0] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[0] = binary.BigEndian.Uint64(y_bytes[248:256])

	mod := f.ModulusLimbs
	_ = mod[31]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [32]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 32; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 32; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[31]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[31])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[30])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[29])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[28])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[27])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[26])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[25])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[24])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[23])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[22])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[21])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[20])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[19])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[18])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[17])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[16])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[15])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[14])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[13])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[12])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[11])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[10])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[9])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[8])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[7])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[6])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[5])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[4])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[3])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[2])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[1])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[0])
	return nil
}

func SubModNonUnrolled2112(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [33]uint64
	x[32] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[32] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[31] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[31] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[30] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[30] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[29] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[29] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[28] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[28] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[27] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[27] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[26] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[26] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[25] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[25] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[24] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[24] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[23] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[23] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[22] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[22] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[21] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[21] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[20] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[20] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[19] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[19] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[18] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[18] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[17] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[17] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[16] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[16] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[15] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[15] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[14] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[14] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[13] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[13] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[12] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[12] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[11] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[11] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[10] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[10] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[9] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[9] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[8] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[8] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[7] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[7] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[6] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[6] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[5] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[5] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[4] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[4] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[3] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[3] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[2] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[2] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[1] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[1] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[0] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[0] = binary.BigEndian.Uint64(y_bytes[256:264])

	mod := f.ModulusLimbs
	_ = mod[32]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [33]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 33; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 33; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[32]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[32])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[31])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[30])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[29])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[28])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[27])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[26])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[25])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[24])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[23])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[22])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[21])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[20])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[19])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[18])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[17])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[16])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[15])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[14])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[13])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[12])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[11])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[10])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[9])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[8])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[7])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[6])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[5])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[4])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[3])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[2])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[1])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[0])
	return nil
}

func SubModNonUnrolled2176(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [34]uint64
	x[33] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[33] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[32] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[32] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[31] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[31] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[30] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[30] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[29] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[29] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[28] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[28] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[27] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[27] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[26] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[26] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[25] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[25] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[24] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[24] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[23] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[23] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[22] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[22] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[21] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[21] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[20] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[20] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[19] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[19] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[18] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[18] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[17] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[17] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[16] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[16] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[15] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[15] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[14] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[14] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[13] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[13] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[12] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[12] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[11] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[11] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[10] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[10] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[9] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[9] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[8] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[8] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[7] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[7] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[6] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[6] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[5] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[5] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[4] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[4] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[3] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[3] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[2] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[2] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[1] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[1] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[0] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[0] = binary.BigEndian.Uint64(y_bytes[264:272])

	mod := f.ModulusLimbs
	_ = mod[33]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [34]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 34; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 34; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[33]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[33])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[32])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[31])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[30])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[29])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[28])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[27])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[26])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[25])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[24])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[23])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[22])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[21])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[20])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[19])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[18])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[17])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[16])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[15])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[14])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[13])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[12])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[11])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[10])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[9])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[8])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[7])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[6])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[5])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[4])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[3])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[2])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[1])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[0])
	return nil
}

func SubModNonUnrolled2240(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [35]uint64
	x[34] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[34] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[33] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[33] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[32] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[32] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[31] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[31] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[30] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[30] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[29] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[29] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[28] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[28] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[27] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[27] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[26] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[26] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[25] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[25] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[24] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[24] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[23] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[23] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[22] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[22] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[21] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[21] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[20] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[20] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[19] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[19] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[18] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[18] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[17] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[17] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[16] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[16] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[15] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[15] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[14] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[14] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[13] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[13] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[12] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[12] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[11] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[11] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[10] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[10] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[9] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[9] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[8] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[8] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[7] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[7] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[6] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[6] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[5] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[5] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[4] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[4] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[3] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[3] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[2] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[2] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[1] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[1] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[0] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[0] = binary.BigEndian.Uint64(y_bytes[272:280])

	mod := f.ModulusLimbs
	_ = mod[34]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [35]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 35; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 35; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[34]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[34])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[33])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[32])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[31])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[30])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[29])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[28])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[27])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[26])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[25])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[24])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[23])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[22])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[21])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[20])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[19])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[18])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[17])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[16])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[15])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[14])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[13])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[12])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[11])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[10])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[9])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[8])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[7])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[6])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[5])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[4])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[3])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[2])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[1])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[0])
	return nil
}

func SubModNonUnrolled2304(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [36]uint64
	x[35] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[35] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[34] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[34] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[33] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[33] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[32] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[32] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[31] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[31] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[30] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[30] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[29] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[29] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[28] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[28] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[27] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[27] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[26] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[26] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[25] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[25] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[24] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[24] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[23] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[23] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[22] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[22] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[21] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[21] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[20] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[20] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[19] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[19] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[18] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[18] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[17] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[17] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[16] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[16] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[15] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[15] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[14] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[14] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[13] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[13] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[12] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[12] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[11] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[11] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[10] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[10] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[9] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[9] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[8] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[8] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[7] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[7] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[6] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[6] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[5] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[5] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[4] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[4] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[3] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[3] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[2] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[2] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[1] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[1] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[0] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[0] = binary.BigEndian.Uint64(y_bytes[280:288])

	mod := f.ModulusLimbs
	_ = mod[35]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [36]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 36; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 36; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[35]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[35])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[34])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[33])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[32])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[31])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[30])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[29])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[28])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[27])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[26])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[25])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[24])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[23])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[22])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[21])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[20])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[19])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[18])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[17])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[16])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[15])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[14])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[13])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[12])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[11])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[10])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[9])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[8])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[7])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[6])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[5])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[4])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[3])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[2])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[1])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[0])
	return nil
}

func SubModNonUnrolled2368(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [37]uint64
	x[36] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[36] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[35] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[35] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[34] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[34] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[33] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[33] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[32] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[32] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[31] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[31] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[30] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[30] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[29] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[29] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[28] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[28] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[27] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[27] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[26] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[26] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[25] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[25] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[24] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[24] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[23] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[23] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[22] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[22] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[21] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[21] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[20] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[20] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[19] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[19] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[18] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[18] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[17] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[17] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[16] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[16] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[15] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[15] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[14] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[14] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[13] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[13] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[12] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[12] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[11] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[11] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[10] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[10] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[9] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[9] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[8] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[8] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[7] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[7] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[6] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[6] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[5] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[5] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[4] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[4] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[3] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[3] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[2] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[2] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[1] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[1] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[0] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[0] = binary.BigEndian.Uint64(y_bytes[288:296])

	mod := f.ModulusLimbs
	_ = mod[36]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [37]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 37; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 37; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[36]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[36])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[35])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[34])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[33])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[32])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[31])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[30])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[29])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[28])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[27])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[26])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[25])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[24])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[23])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[22])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[21])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[20])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[19])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[18])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[17])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[16])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[15])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[14])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[13])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[12])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[11])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[10])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[9])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[8])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[7])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[6])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[5])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[4])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[3])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[2])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[1])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[0])
	return nil
}

func SubModNonUnrolled2432(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [38]uint64
	x[37] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[37] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[36] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[36] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[35] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[35] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[34] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[34] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[33] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[33] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[32] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[32] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[31] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[31] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[30] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[30] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[29] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[29] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[28] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[28] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[27] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[27] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[26] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[26] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[25] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[25] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[24] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[24] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[23] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[23] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[22] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[22] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[21] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[21] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[20] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[20] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[19] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[19] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[18] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[18] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[17] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[17] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[16] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[16] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[15] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[15] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[14] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[14] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[13] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[13] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[12] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[12] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[11] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[11] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[10] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[10] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[9] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[9] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[8] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[8] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[7] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[7] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[6] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[6] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[5] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[5] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[4] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[4] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[3] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[3] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[2] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[2] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[1] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[1] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[0] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[0] = binary.BigEndian.Uint64(y_bytes[296:304])

	mod := f.ModulusLimbs
	_ = mod[37]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [38]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 38; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 38; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[37]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[37])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[36])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[35])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[34])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[33])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[32])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[31])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[30])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[29])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[28])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[27])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[26])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[25])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[24])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[23])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[22])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[21])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[20])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[19])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[18])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[17])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[16])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[15])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[14])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[13])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[12])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[11])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[10])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[9])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[8])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[7])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[6])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[5])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[4])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[3])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[2])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[1])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[0])
	return nil
}

func SubModNonUnrolled2496(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [39]uint64
	x[38] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[38] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[37] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[37] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[36] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[36] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[35] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[35] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[34] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[34] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[33] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[33] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[32] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[32] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[31] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[31] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[30] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[30] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[29] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[29] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[28] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[28] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[27] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[27] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[26] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[26] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[25] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[25] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[24] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[24] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[23] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[23] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[22] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[22] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[21] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[21] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[20] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[20] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[19] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[19] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[18] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[18] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[17] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[17] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[16] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[16] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[15] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[15] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[14] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[14] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[13] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[13] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[12] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[12] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[11] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[11] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[10] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[10] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[9] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[9] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[8] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[8] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[7] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[7] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[6] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[6] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[5] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[5] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[4] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[4] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[3] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[3] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[2] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[2] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[1] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[1] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[0] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[0] = binary.BigEndian.Uint64(y_bytes[304:312])

	mod := f.ModulusLimbs
	_ = mod[38]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [39]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 39; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 39; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[38]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[38])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[37])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[36])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[35])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[34])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[33])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[32])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[31])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[30])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[29])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[28])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[27])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[26])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[25])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[24])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[23])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[22])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[21])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[20])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[19])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[18])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[17])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[16])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[15])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[14])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[13])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[12])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[11])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[10])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[9])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[8])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[7])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[6])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[5])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[4])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[3])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[2])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[1])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[0])
	return nil
}

func SubModNonUnrolled2560(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [40]uint64
	x[39] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[39] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[38] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[38] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[37] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[37] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[36] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[36] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[35] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[35] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[34] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[34] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[33] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[33] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[32] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[32] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[31] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[31] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[30] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[30] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[29] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[29] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[28] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[28] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[27] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[27] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[26] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[26] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[25] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[25] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[24] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[24] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[23] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[23] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[22] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[22] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[21] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[21] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[20] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[20] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[19] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[19] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[18] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[18] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[17] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[17] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[16] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[16] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[15] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[15] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[14] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[14] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[13] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[13] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[12] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[12] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[11] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[11] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[10] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[10] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[9] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[9] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[8] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[8] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[7] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[7] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[6] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[6] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[5] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[5] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[4] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[4] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[3] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[3] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[2] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[2] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[1] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[1] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[0] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[0] = binary.BigEndian.Uint64(y_bytes[312:320])

	mod := f.ModulusLimbs
	_ = mod[39]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [40]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 40; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 40; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[39]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[39])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[38])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[37])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[36])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[35])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[34])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[33])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[32])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[31])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[30])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[29])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[28])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[27])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[26])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[25])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[24])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[23])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[22])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[21])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[20])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[19])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[18])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[17])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[16])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[15])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[14])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[13])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[12])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[11])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[10])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[9])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[8])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[7])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[6])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[5])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[4])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[3])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[2])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[1])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[0])
	return nil
}

func SubModNonUnrolled2624(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [41]uint64
	x[40] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[40] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[39] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[39] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[38] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[38] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[37] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[37] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[36] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[36] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[35] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[35] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[34] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[34] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[33] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[33] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[32] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[32] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[31] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[31] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[30] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[30] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[29] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[29] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[28] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[28] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[27] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[27] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[26] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[26] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[25] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[25] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[24] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[24] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[23] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[23] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[22] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[22] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[21] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[21] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[20] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[20] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[19] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[19] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[18] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[18] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[17] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[17] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[16] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[16] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[15] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[15] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[14] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[14] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[13] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[13] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[12] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[12] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[11] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[11] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[10] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[10] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[9] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[9] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[8] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[8] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[7] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[7] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[6] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[6] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[5] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[5] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[4] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[4] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[3] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[3] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[2] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[2] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[1] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[1] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[0] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[0] = binary.BigEndian.Uint64(y_bytes[320:328])

	mod := f.ModulusLimbs
	_ = mod[40]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [41]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 41; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 41; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[40]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[40])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[39])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[38])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[37])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[36])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[35])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[34])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[33])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[32])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[31])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[30])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[29])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[28])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[27])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[26])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[25])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[24])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[23])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[22])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[21])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[20])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[19])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[18])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[17])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[16])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[15])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[14])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[13])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[12])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[11])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[10])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[9])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[8])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[7])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[6])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[5])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[4])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[3])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[2])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[1])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[0])
	return nil
}

func SubModNonUnrolled2688(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [42]uint64
	x[41] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[41] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[40] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[40] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[39] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[39] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[38] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[38] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[37] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[37] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[36] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[36] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[35] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[35] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[34] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[34] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[33] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[33] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[32] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[32] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[31] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[31] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[30] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[30] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[29] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[29] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[28] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[28] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[27] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[27] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[26] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[26] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[25] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[25] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[24] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[24] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[23] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[23] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[22] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[22] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[21] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[21] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[20] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[20] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[19] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[19] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[18] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[18] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[17] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[17] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[16] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[16] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[15] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[15] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[14] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[14] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[13] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[13] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[12] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[12] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[11] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[11] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[10] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[10] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[9] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[9] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[8] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[8] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[7] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[7] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[6] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[6] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[5] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[5] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[4] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[4] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[3] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[3] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[2] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[2] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[1] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[1] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[0] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[0] = binary.BigEndian.Uint64(y_bytes[328:336])

	mod := f.ModulusLimbs
	_ = mod[41]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [42]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 42; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 42; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[41]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[41])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[40])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[39])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[38])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[37])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[36])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[35])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[34])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[33])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[32])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[31])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[30])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[29])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[28])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[27])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[26])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[25])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[24])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[23])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[22])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[21])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[20])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[19])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[18])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[17])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[16])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[15])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[14])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[13])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[12])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[11])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[10])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[9])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[8])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[7])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[6])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[5])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[4])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[3])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[2])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[1])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[0])
	return nil
}

func SubModNonUnrolled2752(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [43]uint64
	x[42] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[42] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[41] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[41] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[40] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[40] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[39] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[39] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[38] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[38] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[37] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[37] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[36] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[36] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[35] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[35] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[34] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[34] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[33] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[33] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[32] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[32] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[31] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[31] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[30] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[30] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[29] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[29] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[28] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[28] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[27] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[27] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[26] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[26] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[25] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[25] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[24] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[24] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[23] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[23] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[22] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[22] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[21] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[21] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[20] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[20] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[19] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[19] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[18] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[18] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[17] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[17] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[16] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[16] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[15] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[15] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[14] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[14] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[13] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[13] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[12] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[12] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[11] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[11] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[10] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[10] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[9] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[9] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[8] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[8] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[7] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[7] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[6] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[6] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[5] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[5] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[4] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[4] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[3] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[3] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[2] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[2] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[1] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[1] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[0] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[0] = binary.BigEndian.Uint64(y_bytes[336:344])

	mod := f.ModulusLimbs
	_ = mod[42]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [43]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 43; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 43; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[42]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[42])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[41])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[40])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[39])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[38])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[37])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[36])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[35])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[34])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[33])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[32])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[31])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[30])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[29])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[28])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[27])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[26])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[25])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[24])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[23])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[22])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[21])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[20])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[19])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[18])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[17])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[16])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[15])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[14])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[13])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[12])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[11])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[10])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[9])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[8])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[7])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[6])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[5])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[4])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[3])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[2])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[1])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[0])
	return nil
}

func SubModNonUnrolled2816(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [44]uint64
	x[43] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[43] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[42] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[42] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[41] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[41] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[40] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[40] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[39] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[39] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[38] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[38] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[37] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[37] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[36] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[36] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[35] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[35] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[34] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[34] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[33] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[33] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[32] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[32] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[31] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[31] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[30] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[30] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[29] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[29] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[28] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[28] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[27] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[27] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[26] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[26] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[25] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[25] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[24] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[24] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[23] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[23] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[22] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[22] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[21] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[21] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[20] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[20] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[19] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[19] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[18] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[18] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[17] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[17] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[16] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[16] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[15] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[15] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[14] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[14] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[13] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[13] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[12] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[12] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[11] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[11] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[10] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[10] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[9] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[9] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[8] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[8] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[7] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[7] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[6] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[6] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[5] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[5] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[4] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[4] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[3] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[3] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[2] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[2] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[1] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[1] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[0] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[0] = binary.BigEndian.Uint64(y_bytes[344:352])

	mod := f.ModulusLimbs
	_ = mod[43]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [44]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 44; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 44; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[43]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[43])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[42])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[41])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[40])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[39])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[38])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[37])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[36])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[35])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[34])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[33])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[32])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[31])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[30])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[29])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[28])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[27])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[26])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[25])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[24])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[23])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[22])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[21])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[20])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[19])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[18])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[17])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[16])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[15])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[14])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[13])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[12])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[11])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[10])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[9])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[8])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[7])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[6])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[5])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[4])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[3])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[2])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[1])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[0])
	return nil
}

func SubModNonUnrolled2880(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [45]uint64
	x[44] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[44] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[43] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[43] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[42] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[42] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[41] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[41] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[40] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[40] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[39] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[39] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[38] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[38] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[37] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[37] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[36] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[36] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[35] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[35] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[34] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[34] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[33] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[33] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[32] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[32] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[31] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[31] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[30] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[30] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[29] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[29] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[28] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[28] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[27] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[27] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[26] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[26] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[25] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[25] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[24] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[24] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[23] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[23] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[22] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[22] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[21] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[21] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[20] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[20] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[19] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[19] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[18] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[18] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[17] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[17] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[16] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[16] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[15] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[15] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[14] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[14] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[13] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[13] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[12] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[12] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[11] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[11] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[10] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[10] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[9] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[9] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[8] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[8] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[7] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[7] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[6] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[6] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[5] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[5] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[4] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[4] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[3] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[3] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[2] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[2] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[1] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[1] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[0] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[0] = binary.BigEndian.Uint64(y_bytes[352:360])

	mod := f.ModulusLimbs
	_ = mod[44]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [45]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 45; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 45; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[44]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[44])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[43])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[42])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[41])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[40])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[39])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[38])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[37])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[36])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[35])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[34])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[33])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[32])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[31])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[30])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[29])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[28])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[27])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[26])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[25])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[24])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[23])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[22])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[21])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[20])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[19])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[18])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[17])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[16])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[15])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[14])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[13])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[12])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[11])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[10])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[9])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[8])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[7])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[6])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[5])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[4])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[3])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[2])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[1])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[0])
	return nil
}

func SubModNonUnrolled2944(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [46]uint64
	x[45] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[45] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[44] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[44] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[43] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[43] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[42] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[42] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[41] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[41] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[40] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[40] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[39] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[39] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[38] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[38] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[37] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[37] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[36] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[36] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[35] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[35] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[34] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[34] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[33] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[33] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[32] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[32] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[31] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[31] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[30] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[30] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[29] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[29] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[28] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[28] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[27] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[27] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[26] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[26] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[25] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[25] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[24] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[24] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[23] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[23] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[22] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[22] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[21] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[21] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[20] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[20] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[19] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[19] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[18] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[18] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[17] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[17] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[16] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[16] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[15] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[15] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[14] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[14] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[13] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[13] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[12] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[12] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[11] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[11] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[10] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[10] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[9] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[9] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[8] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[8] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[7] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[7] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[6] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[6] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[5] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[5] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[4] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[4] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[3] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[3] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[2] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[2] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[1] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[1] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[0] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[0] = binary.BigEndian.Uint64(y_bytes[360:368])

	mod := f.ModulusLimbs
	_ = mod[45]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [46]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 46; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 46; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[45]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[45])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[44])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[43])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[42])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[41])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[40])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[39])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[38])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[37])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[36])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[35])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[34])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[33])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[32])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[31])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[30])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[29])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[28])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[27])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[26])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[25])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[24])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[23])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[22])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[21])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[20])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[19])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[18])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[17])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[16])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[15])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[14])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[13])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[12])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[11])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[10])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[9])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[8])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[7])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[6])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[5])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[4])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[3])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[2])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[1])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[0])
	return nil
}

func SubModNonUnrolled3008(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [47]uint64
	x[46] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[46] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[45] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[45] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[44] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[44] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[43] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[43] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[42] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[42] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[41] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[41] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[40] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[40] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[39] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[39] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[38] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[38] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[37] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[37] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[36] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[36] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[35] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[35] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[34] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[34] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[33] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[33] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[32] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[32] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[31] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[31] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[30] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[30] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[29] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[29] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[28] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[28] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[27] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[27] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[26] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[26] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[25] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[25] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[24] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[24] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[23] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[23] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[22] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[22] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[21] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[21] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[20] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[20] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[19] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[19] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[18] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[18] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[17] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[17] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[16] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[16] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[15] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[15] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[14] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[14] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[13] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[13] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[12] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[12] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[11] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[11] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[10] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[10] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[9] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[9] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[8] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[8] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[7] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[7] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[6] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[6] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[5] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[5] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[4] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[4] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[3] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[3] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[2] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[2] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[1] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[1] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[0] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[0] = binary.BigEndian.Uint64(y_bytes[368:376])

	mod := f.ModulusLimbs
	_ = mod[46]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [47]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 47; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 47; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[46]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[46])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[45])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[44])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[43])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[42])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[41])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[40])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[39])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[38])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[37])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[36])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[35])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[34])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[33])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[32])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[31])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[30])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[29])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[28])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[27])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[26])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[25])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[24])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[23])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[22])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[21])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[20])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[19])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[18])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[17])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[16])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[15])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[14])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[13])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[12])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[11])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[10])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[9])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[8])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[7])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[6])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[5])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[4])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[3])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[2])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[1])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[0])
	return nil
}

func SubModNonUnrolled3072(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [48]uint64
	x[47] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[47] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[46] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[46] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[45] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[45] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[44] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[44] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[43] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[43] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[42] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[42] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[41] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[41] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[40] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[40] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[39] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[39] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[38] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[38] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[37] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[37] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[36] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[36] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[35] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[35] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[34] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[34] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[33] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[33] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[32] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[32] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[31] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[31] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[30] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[30] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[29] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[29] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[28] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[28] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[27] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[27] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[26] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[26] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[25] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[25] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[24] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[24] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[23] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[23] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[22] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[22] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[21] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[21] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[20] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[20] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[19] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[19] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[18] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[18] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[17] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[17] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[16] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[16] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[15] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[15] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[14] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[14] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[13] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[13] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[12] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[12] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[11] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[11] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[10] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[10] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[9] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[9] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[8] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[8] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[7] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[7] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[6] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[6] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[5] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[5] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[4] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[4] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[3] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[3] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[2] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[2] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[1] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[1] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[0] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[0] = binary.BigEndian.Uint64(y_bytes[376:384])

	mod := f.ModulusLimbs
	_ = mod[47]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [48]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 48; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 48; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[47]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[47])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[46])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[45])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[44])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[43])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[42])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[41])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[40])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[39])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[38])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[37])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[36])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[35])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[34])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[33])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[32])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[31])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[30])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[29])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[28])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[27])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[26])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[25])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[24])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[23])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[22])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[21])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[20])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[19])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[18])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[17])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[16])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[15])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[14])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[13])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[12])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[11])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[10])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[9])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[8])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[7])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[6])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[5])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[4])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[3])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[2])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[1])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[0])
	return nil
}

func SubModNonUnrolled3136(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [49]uint64
	x[48] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[48] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[47] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[47] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[46] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[46] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[45] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[45] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[44] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[44] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[43] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[43] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[42] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[42] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[41] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[41] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[40] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[40] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[39] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[39] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[38] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[38] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[37] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[37] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[36] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[36] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[35] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[35] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[34] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[34] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[33] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[33] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[32] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[32] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[31] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[31] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[30] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[30] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[29] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[29] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[28] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[28] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[27] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[27] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[26] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[26] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[25] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[25] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[24] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[24] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[23] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[23] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[22] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[22] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[21] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[21] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[20] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[20] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[19] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[19] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[18] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[18] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[17] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[17] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[16] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[16] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[15] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[15] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[14] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[14] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[13] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[13] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[12] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[12] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[11] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[11] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[10] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[10] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[9] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[9] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[8] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[8] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[7] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[7] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[6] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[6] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[5] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[5] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[4] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[4] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[3] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[3] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[2] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[2] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[1] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[1] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[0] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[0] = binary.BigEndian.Uint64(y_bytes[384:392])

	mod := f.ModulusLimbs
	_ = mod[48]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [49]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 49; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 49; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[48]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[48])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[47])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[46])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[45])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[44])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[43])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[42])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[41])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[40])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[39])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[38])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[37])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[36])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[35])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[34])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[33])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[32])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[31])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[30])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[29])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[28])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[27])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[26])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[25])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[24])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[23])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[22])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[21])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[20])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[19])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[18])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[17])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[16])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[15])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[14])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[13])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[12])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[11])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[10])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[9])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[8])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[7])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[6])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[5])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[4])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[3])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[2])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[1])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[0])
	return nil
}

func SubModNonUnrolled3200(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [50]uint64
	x[49] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[49] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[48] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[48] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[47] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[47] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[46] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[46] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[45] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[45] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[44] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[44] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[43] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[43] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[42] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[42] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[41] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[41] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[40] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[40] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[39] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[39] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[38] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[38] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[37] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[37] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[36] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[36] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[35] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[35] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[34] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[34] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[33] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[33] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[32] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[32] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[31] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[31] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[30] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[30] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[29] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[29] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[28] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[28] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[27] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[27] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[26] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[26] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[25] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[25] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[24] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[24] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[23] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[23] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[22] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[22] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[21] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[21] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[20] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[20] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[19] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[19] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[18] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[18] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[17] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[17] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[16] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[16] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[15] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[15] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[14] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[14] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[13] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[13] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[12] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[12] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[11] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[11] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[10] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[10] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[9] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[9] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[8] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[8] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[7] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[7] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[6] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[6] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[5] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[5] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[4] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[4] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[3] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[3] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[2] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[2] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[1] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[1] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[0] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[0] = binary.BigEndian.Uint64(y_bytes[392:400])

	mod := f.ModulusLimbs
	_ = mod[49]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [50]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 50; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 50; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[49]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[49])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[48])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[47])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[46])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[45])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[44])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[43])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[42])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[41])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[40])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[39])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[38])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[37])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[36])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[35])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[34])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[33])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[32])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[31])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[30])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[29])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[28])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[27])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[26])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[25])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[24])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[23])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[22])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[21])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[20])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[19])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[18])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[17])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[16])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[15])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[14])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[13])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[12])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[11])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[10])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[9])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[8])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[7])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[6])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[5])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[4])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[3])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[2])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[1])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[0])
	return nil
}

func SubModNonUnrolled3264(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [51]uint64
	x[50] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[50] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[49] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[49] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[48] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[48] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[47] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[47] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[46] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[46] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[45] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[45] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[44] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[44] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[43] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[43] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[42] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[42] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[41] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[41] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[40] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[40] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[39] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[39] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[38] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[38] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[37] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[37] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[36] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[36] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[35] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[35] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[34] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[34] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[33] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[33] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[32] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[32] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[31] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[31] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[30] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[30] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[29] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[29] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[28] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[28] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[27] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[27] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[26] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[26] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[25] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[25] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[24] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[24] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[23] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[23] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[22] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[22] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[21] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[21] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[20] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[20] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[19] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[19] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[18] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[18] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[17] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[17] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[16] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[16] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[15] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[15] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[14] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[14] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[13] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[13] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[12] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[12] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[11] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[11] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[10] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[10] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[9] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[9] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[8] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[8] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[7] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[7] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[6] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[6] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[5] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[5] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[4] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[4] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[3] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[3] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[2] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[2] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[1] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[1] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[0] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[0] = binary.BigEndian.Uint64(y_bytes[400:408])

	mod := f.ModulusLimbs
	_ = mod[50]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [51]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 51; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 51; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[50]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[50])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[49])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[48])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[47])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[46])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[45])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[44])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[43])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[42])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[41])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[40])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[39])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[38])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[37])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[36])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[35])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[34])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[33])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[32])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[31])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[30])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[29])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[28])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[27])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[26])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[25])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[24])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[23])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[22])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[21])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[20])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[19])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[18])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[17])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[16])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[15])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[14])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[13])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[12])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[11])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[10])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[9])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[8])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[7])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[6])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[5])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[4])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[3])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[2])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[1])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[0])
	return nil
}

func SubModNonUnrolled3328(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [52]uint64
	x[51] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[51] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[50] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[50] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[49] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[49] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[48] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[48] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[47] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[47] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[46] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[46] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[45] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[45] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[44] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[44] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[43] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[43] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[42] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[42] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[41] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[41] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[40] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[40] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[39] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[39] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[38] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[38] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[37] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[37] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[36] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[36] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[35] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[35] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[34] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[34] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[33] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[33] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[32] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[32] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[31] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[31] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[30] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[30] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[29] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[29] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[28] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[28] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[27] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[27] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[26] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[26] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[25] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[25] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[24] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[24] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[23] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[23] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[22] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[22] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[21] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[21] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[20] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[20] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[19] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[19] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[18] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[18] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[17] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[17] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[16] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[16] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[15] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[15] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[14] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[14] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[13] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[13] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[12] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[12] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[11] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[11] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[10] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[10] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[9] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[9] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[8] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[8] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[7] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[7] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[6] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[6] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[5] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[5] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[4] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[4] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[3] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[3] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[2] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[2] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[1] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[1] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[0] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[0] = binary.BigEndian.Uint64(y_bytes[408:416])

	mod := f.ModulusLimbs
	_ = mod[51]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [52]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 52; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 52; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[51]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[51])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[50])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[49])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[48])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[47])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[46])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[45])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[44])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[43])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[42])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[41])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[40])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[39])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[38])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[37])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[36])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[35])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[34])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[33])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[32])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[31])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[30])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[29])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[28])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[27])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[26])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[25])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[24])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[23])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[22])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[21])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[20])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[19])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[18])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[17])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[16])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[15])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[14])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[13])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[12])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[11])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[10])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[9])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[8])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[7])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[6])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[5])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[4])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[3])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[2])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[1])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[0])
	return nil
}

func SubModNonUnrolled3392(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [53]uint64
	x[52] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[52] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[51] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[51] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[50] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[50] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[49] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[49] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[48] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[48] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[47] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[47] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[46] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[46] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[45] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[45] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[44] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[44] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[43] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[43] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[42] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[42] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[41] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[41] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[40] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[40] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[39] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[39] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[38] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[38] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[37] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[37] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[36] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[36] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[35] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[35] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[34] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[34] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[33] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[33] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[32] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[32] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[31] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[31] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[30] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[30] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[29] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[29] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[28] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[28] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[27] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[27] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[26] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[26] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[25] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[25] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[24] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[24] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[23] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[23] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[22] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[22] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[21] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[21] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[20] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[20] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[19] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[19] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[18] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[18] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[17] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[17] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[16] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[16] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[15] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[15] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[14] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[14] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[13] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[13] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[12] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[12] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[11] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[11] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[10] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[10] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[9] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[9] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[8] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[8] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[7] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[7] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[6] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[6] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[5] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[5] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[4] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[4] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[3] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[3] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[2] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[2] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[1] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[1] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[0] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[0] = binary.BigEndian.Uint64(y_bytes[416:424])

	mod := f.ModulusLimbs
	_ = mod[52]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [53]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 53; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 53; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[52]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[52])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[51])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[50])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[49])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[48])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[47])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[46])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[45])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[44])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[43])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[42])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[41])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[40])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[39])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[38])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[37])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[36])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[35])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[34])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[33])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[32])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[31])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[30])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[29])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[28])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[27])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[26])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[25])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[24])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[23])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[22])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[21])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[20])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[19])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[18])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[17])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[16])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[15])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[14])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[13])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[12])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[11])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[10])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[9])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[8])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[7])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[6])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[5])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[4])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[3])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[2])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[1])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[0])
	return nil
}

func SubModNonUnrolled3456(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [54]uint64
	x[53] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[53] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[52] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[52] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[51] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[51] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[50] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[50] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[49] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[49] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[48] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[48] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[47] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[47] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[46] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[46] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[45] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[45] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[44] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[44] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[43] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[43] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[42] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[42] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[41] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[41] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[40] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[40] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[39] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[39] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[38] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[38] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[37] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[37] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[36] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[36] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[35] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[35] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[34] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[34] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[33] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[33] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[32] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[32] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[31] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[31] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[30] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[30] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[29] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[29] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[28] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[28] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[27] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[27] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[26] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[26] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[25] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[25] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[24] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[24] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[23] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[23] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[22] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[22] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[21] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[21] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[20] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[20] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[19] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[19] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[18] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[18] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[17] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[17] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[16] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[16] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[15] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[15] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[14] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[14] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[13] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[13] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[12] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[12] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[11] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[11] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[10] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[10] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[9] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[9] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[8] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[8] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[7] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[7] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[6] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[6] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[5] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[5] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[4] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[4] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[3] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[3] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[2] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[2] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[1] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[1] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[0] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[0] = binary.BigEndian.Uint64(y_bytes[424:432])

	mod := f.ModulusLimbs
	_ = mod[53]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [54]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 54; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 54; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[53]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[53])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[52])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[51])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[50])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[49])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[48])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[47])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[46])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[45])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[44])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[43])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[42])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[41])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[40])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[39])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[38])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[37])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[36])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[35])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[34])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[33])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[32])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[31])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[30])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[29])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[28])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[27])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[26])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[25])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[24])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[23])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[22])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[21])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[20])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[19])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[18])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[17])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[16])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[15])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[14])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[13])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[12])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[11])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[10])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[9])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[8])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[7])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[6])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[5])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[4])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[3])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[2])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[1])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[0])
	return nil
}

func SubModNonUnrolled3520(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [55]uint64
	x[54] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[54] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[53] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[53] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[52] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[52] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[51] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[51] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[50] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[50] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[49] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[49] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[48] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[48] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[47] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[47] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[46] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[46] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[45] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[45] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[44] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[44] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[43] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[43] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[42] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[42] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[41] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[41] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[40] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[40] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[39] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[39] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[38] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[38] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[37] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[37] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[36] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[36] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[35] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[35] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[34] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[34] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[33] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[33] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[32] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[32] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[31] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[31] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[30] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[30] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[29] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[29] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[28] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[28] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[27] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[27] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[26] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[26] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[25] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[25] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[24] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[24] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[23] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[23] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[22] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[22] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[21] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[21] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[20] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[20] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[19] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[19] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[18] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[18] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[17] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[17] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[16] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[16] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[15] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[15] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[14] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[14] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[13] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[13] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[12] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[12] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[11] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[11] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[10] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[10] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[9] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[9] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[8] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[8] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[7] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[7] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[6] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[6] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[5] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[5] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[4] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[4] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[3] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[3] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[2] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[2] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[1] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[1] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[0] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[0] = binary.BigEndian.Uint64(y_bytes[432:440])

	mod := f.ModulusLimbs
	_ = mod[54]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [55]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 55; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 55; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[54]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[54])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[53])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[52])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[51])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[50])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[49])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[48])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[47])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[46])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[45])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[44])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[43])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[42])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[41])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[40])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[39])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[38])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[37])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[36])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[35])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[34])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[33])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[32])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[31])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[30])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[29])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[28])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[27])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[26])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[25])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[24])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[23])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[22])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[21])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[20])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[19])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[18])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[17])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[16])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[15])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[14])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[13])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[12])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[11])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[10])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[9])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[8])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[7])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[6])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[5])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[4])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[3])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[2])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[1])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[0])
	return nil
}

func SubModNonUnrolled3584(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [56]uint64
	x[55] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[55] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[54] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[54] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[53] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[53] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[52] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[52] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[51] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[51] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[50] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[50] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[49] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[49] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[48] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[48] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[47] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[47] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[46] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[46] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[45] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[45] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[44] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[44] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[43] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[43] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[42] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[42] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[41] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[41] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[40] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[40] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[39] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[39] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[38] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[38] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[37] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[37] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[36] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[36] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[35] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[35] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[34] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[34] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[33] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[33] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[32] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[32] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[31] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[31] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[30] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[30] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[29] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[29] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[28] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[28] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[27] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[27] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[26] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[26] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[25] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[25] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[24] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[24] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[23] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[23] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[22] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[22] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[21] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[21] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[20] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[20] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[19] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[19] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[18] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[18] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[17] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[17] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[16] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[16] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[15] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[15] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[14] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[14] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[13] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[13] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[12] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[12] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[11] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[11] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[10] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[10] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[9] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[9] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[8] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[8] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[7] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[7] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[6] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[6] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[5] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[5] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[4] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[4] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[3] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[3] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[2] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[2] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[1] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[1] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[0] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[0] = binary.BigEndian.Uint64(y_bytes[440:448])

	mod := f.ModulusLimbs
	_ = mod[55]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [56]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 56; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 56; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[55]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[55])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[54])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[53])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[52])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[51])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[50])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[49])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[48])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[47])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[46])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[45])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[44])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[43])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[42])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[41])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[40])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[39])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[38])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[37])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[36])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[35])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[34])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[33])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[32])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[31])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[30])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[29])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[28])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[27])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[26])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[25])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[24])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[23])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[22])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[21])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[20])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[19])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[18])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[17])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[16])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[15])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[14])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[13])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[12])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[11])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[10])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[9])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[8])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[7])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[6])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[5])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[4])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[3])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[2])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[1])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[0])
	return nil
}

func SubModNonUnrolled3648(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [57]uint64
	x[56] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[56] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[55] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[55] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[54] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[54] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[53] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[53] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[52] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[52] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[51] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[51] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[50] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[50] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[49] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[49] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[48] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[48] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[47] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[47] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[46] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[46] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[45] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[45] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[44] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[44] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[43] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[43] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[42] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[42] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[41] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[41] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[40] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[40] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[39] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[39] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[38] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[38] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[37] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[37] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[36] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[36] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[35] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[35] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[34] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[34] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[33] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[33] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[32] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[32] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[31] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[31] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[30] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[30] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[29] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[29] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[28] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[28] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[27] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[27] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[26] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[26] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[25] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[25] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[24] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[24] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[23] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[23] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[22] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[22] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[21] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[21] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[20] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[20] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[19] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[19] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[18] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[18] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[17] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[17] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[16] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[16] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[15] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[15] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[14] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[14] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[13] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[13] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[12] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[12] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[11] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[11] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[10] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[10] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[9] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[9] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[8] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[8] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[7] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[7] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[6] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[6] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[5] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[5] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[4] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[4] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[3] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[3] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[2] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[2] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[1] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[1] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[0] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[0] = binary.BigEndian.Uint64(y_bytes[448:456])

	mod := f.ModulusLimbs
	_ = mod[56]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [57]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 57; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 57; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[56]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[56])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[55])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[54])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[53])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[52])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[51])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[50])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[49])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[48])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[47])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[46])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[45])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[44])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[43])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[42])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[41])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[40])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[39])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[38])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[37])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[36])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[35])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[34])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[33])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[32])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[31])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[30])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[29])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[28])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[27])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[26])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[25])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[24])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[23])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[22])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[21])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[20])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[19])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[18])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[17])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[16])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[15])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[14])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[13])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[12])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[11])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[10])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[9])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[8])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[7])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[6])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[5])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[4])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[3])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[2])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[1])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[0])
	return nil
}

func SubModNonUnrolled3712(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [58]uint64
	x[57] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[57] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[56] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[56] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[55] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[55] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[54] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[54] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[53] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[53] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[52] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[52] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[51] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[51] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[50] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[50] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[49] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[49] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[48] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[48] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[47] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[47] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[46] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[46] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[45] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[45] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[44] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[44] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[43] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[43] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[42] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[42] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[41] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[41] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[40] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[40] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[39] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[39] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[38] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[38] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[37] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[37] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[36] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[36] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[35] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[35] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[34] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[34] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[33] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[33] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[32] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[32] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[31] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[31] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[30] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[30] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[29] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[29] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[28] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[28] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[27] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[27] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[26] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[26] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[25] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[25] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[24] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[24] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[23] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[23] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[22] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[22] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[21] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[21] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[20] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[20] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[19] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[19] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[18] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[18] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[17] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[17] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[16] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[16] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[15] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[15] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[14] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[14] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[13] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[13] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[12] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[12] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[11] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[11] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[10] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[10] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[9] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[9] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[8] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[8] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[7] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[7] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[6] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[6] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[5] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[5] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[4] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[4] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[3] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[3] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[2] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[2] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[1] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[1] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[0] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[0] = binary.BigEndian.Uint64(y_bytes[456:464])

	mod := f.ModulusLimbs
	_ = mod[57]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [58]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 58; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 58; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[57]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[57])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[56])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[55])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[54])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[53])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[52])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[51])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[50])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[49])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[48])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[47])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[46])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[45])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[44])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[43])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[42])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[41])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[40])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[39])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[38])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[37])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[36])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[35])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[34])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[33])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[32])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[31])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[30])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[29])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[28])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[27])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[26])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[25])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[24])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[23])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[22])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[21])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[20])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[19])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[18])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[17])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[16])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[15])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[14])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[13])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[12])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[11])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[10])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[9])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[8])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[7])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[6])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[5])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[4])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[3])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[2])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[1])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[0])
	return nil
}

func SubModNonUnrolled3776(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [59]uint64
	x[58] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[58] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[57] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[57] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[56] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[56] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[55] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[55] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[54] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[54] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[53] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[53] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[52] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[52] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[51] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[51] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[50] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[50] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[49] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[49] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[48] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[48] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[47] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[47] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[46] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[46] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[45] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[45] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[44] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[44] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[43] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[43] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[42] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[42] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[41] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[41] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[40] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[40] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[39] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[39] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[38] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[38] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[37] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[37] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[36] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[36] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[35] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[35] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[34] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[34] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[33] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[33] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[32] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[32] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[31] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[31] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[30] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[30] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[29] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[29] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[28] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[28] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[27] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[27] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[26] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[26] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[25] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[25] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[24] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[24] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[23] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[23] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[22] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[22] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[21] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[21] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[20] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[20] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[19] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[19] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[18] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[18] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[17] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[17] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[16] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[16] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[15] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[15] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[14] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[14] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[13] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[13] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[12] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[12] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[11] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[11] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[10] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[10] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[9] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[9] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[8] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[8] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[7] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[7] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[6] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[6] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[5] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[5] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[4] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[4] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[3] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[3] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[2] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[2] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[1] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[1] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[0] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[0] = binary.BigEndian.Uint64(y_bytes[464:472])

	mod := f.ModulusLimbs
	_ = mod[58]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [59]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 59; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 59; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[58]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[58])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[57])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[56])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[55])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[54])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[53])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[52])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[51])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[50])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[49])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[48])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[47])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[46])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[45])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[44])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[43])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[42])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[41])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[40])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[39])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[38])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[37])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[36])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[35])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[34])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[33])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[32])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[31])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[30])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[29])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[28])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[27])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[26])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[25])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[24])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[23])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[22])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[21])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[20])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[19])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[18])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[17])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[16])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[15])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[14])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[13])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[12])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[11])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[10])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[9])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[8])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[7])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[6])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[5])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[4])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[3])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[2])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[1])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[0])
	return nil
}

func SubModNonUnrolled3840(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [60]uint64
	x[59] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[59] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[58] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[58] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[57] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[57] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[56] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[56] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[55] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[55] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[54] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[54] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[53] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[53] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[52] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[52] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[51] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[51] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[50] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[50] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[49] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[49] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[48] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[48] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[47] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[47] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[46] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[46] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[45] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[45] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[44] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[44] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[43] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[43] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[42] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[42] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[41] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[41] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[40] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[40] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[39] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[39] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[38] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[38] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[37] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[37] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[36] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[36] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[35] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[35] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[34] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[34] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[33] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[33] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[32] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[32] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[31] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[31] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[30] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[30] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[29] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[29] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[28] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[28] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[27] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[27] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[26] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[26] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[25] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[25] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[24] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[24] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[23] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[23] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[22] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[22] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[21] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[21] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[20] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[20] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[19] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[19] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[18] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[18] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[17] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[17] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[16] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[16] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[15] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[15] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[14] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[14] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[13] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[13] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[12] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[12] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[11] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[11] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[10] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[10] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[9] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[9] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[8] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[8] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[7] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[7] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[6] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[6] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[5] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[5] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[4] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[4] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[3] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[3] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[2] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[2] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[1] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[1] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[0] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[0] = binary.BigEndian.Uint64(y_bytes[472:480])

	mod := f.ModulusLimbs
	_ = mod[59]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [60]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 60; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 60; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[59]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[59])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[58])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[57])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[56])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[55])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[54])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[53])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[52])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[51])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[50])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[49])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[48])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[47])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[46])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[45])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[44])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[43])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[42])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[41])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[40])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[39])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[38])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[37])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[36])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[35])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[34])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[33])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[32])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[31])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[30])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[29])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[28])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[27])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[26])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[25])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[24])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[23])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[22])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[21])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[20])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[19])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[18])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[17])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[16])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[15])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[14])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[13])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[12])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[11])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[10])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[9])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[8])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[7])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[6])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[5])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[4])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[3])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[2])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[1])
	binary.BigEndian.PutUint64(out_bytes[472:480], src[0])
	return nil
}

func SubModNonUnrolled3904(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [61]uint64
	x[60] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[60] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[59] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[59] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[58] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[58] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[57] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[57] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[56] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[56] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[55] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[55] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[54] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[54] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[53] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[53] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[52] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[52] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[51] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[51] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[50] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[50] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[49] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[49] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[48] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[48] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[47] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[47] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[46] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[46] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[45] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[45] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[44] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[44] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[43] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[43] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[42] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[42] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[41] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[41] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[40] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[40] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[39] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[39] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[38] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[38] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[37] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[37] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[36] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[36] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[35] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[35] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[34] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[34] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[33] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[33] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[32] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[32] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[31] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[31] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[30] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[30] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[29] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[29] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[28] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[28] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[27] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[27] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[26] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[26] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[25] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[25] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[24] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[24] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[23] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[23] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[22] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[22] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[21] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[21] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[20] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[20] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[19] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[19] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[18] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[18] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[17] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[17] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[16] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[16] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[15] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[15] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[14] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[14] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[13] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[13] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[12] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[12] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[11] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[11] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[10] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[10] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[9] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[9] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[8] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[8] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[7] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[7] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[6] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[6] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[5] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[5] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[4] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[4] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[3] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[3] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[2] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[2] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[1] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[1] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[0] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[0] = binary.BigEndian.Uint64(y_bytes[480:488])

	mod := f.ModulusLimbs
	_ = mod[60]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [61]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 61; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 61; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[60]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[60])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[59])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[58])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[57])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[56])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[55])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[54])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[53])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[52])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[51])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[50])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[49])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[48])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[47])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[46])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[45])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[44])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[43])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[42])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[41])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[40])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[39])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[38])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[37])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[36])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[35])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[34])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[33])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[32])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[31])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[30])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[29])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[28])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[27])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[26])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[25])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[24])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[23])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[22])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[21])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[20])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[19])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[18])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[17])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[16])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[15])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[14])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[13])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[12])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[11])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[10])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[9])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[8])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[7])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[6])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[5])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[4])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[3])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[2])
	binary.BigEndian.PutUint64(out_bytes[472:480], src[1])
	binary.BigEndian.PutUint64(out_bytes[480:488], src[0])
	return nil
}

func SubModNonUnrolled3968(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [62]uint64
	x[61] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[61] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[60] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[60] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[59] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[59] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[58] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[58] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[57] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[57] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[56] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[56] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[55] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[55] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[54] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[54] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[53] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[53] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[52] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[52] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[51] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[51] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[50] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[50] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[49] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[49] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[48] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[48] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[47] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[47] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[46] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[46] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[45] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[45] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[44] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[44] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[43] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[43] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[42] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[42] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[41] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[41] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[40] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[40] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[39] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[39] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[38] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[38] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[37] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[37] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[36] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[36] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[35] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[35] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[34] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[34] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[33] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[33] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[32] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[32] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[31] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[31] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[30] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[30] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[29] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[29] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[28] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[28] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[27] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[27] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[26] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[26] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[25] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[25] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[24] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[24] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[23] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[23] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[22] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[22] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[21] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[21] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[20] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[20] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[19] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[19] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[18] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[18] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[17] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[17] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[16] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[16] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[15] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[15] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[14] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[14] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[13] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[13] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[12] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[12] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[11] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[11] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[10] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[10] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[9] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[9] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[8] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[8] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[7] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[7] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[6] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[6] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[5] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[5] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[4] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[4] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[3] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[3] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[2] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[2] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[1] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[1] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[0] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[0] = binary.BigEndian.Uint64(y_bytes[488:496])

	mod := f.ModulusLimbs
	_ = mod[61]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [62]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 62; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 62; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[61]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[61])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[60])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[59])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[58])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[57])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[56])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[55])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[54])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[53])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[52])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[51])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[50])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[49])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[48])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[47])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[46])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[45])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[44])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[43])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[42])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[41])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[40])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[39])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[38])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[37])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[36])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[35])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[34])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[33])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[32])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[31])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[30])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[29])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[28])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[27])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[26])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[25])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[24])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[23])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[22])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[21])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[20])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[19])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[18])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[17])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[16])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[15])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[14])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[13])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[12])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[11])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[10])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[9])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[8])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[7])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[6])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[5])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[4])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[3])
	binary.BigEndian.PutUint64(out_bytes[472:480], src[2])
	binary.BigEndian.PutUint64(out_bytes[480:488], src[1])
	binary.BigEndian.PutUint64(out_bytes[488:496], src[0])
	return nil
}

func SubModNonUnrolled4032(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [63]uint64
	x[62] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[62] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[61] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[61] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[60] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[60] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[59] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[59] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[58] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[58] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[57] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[57] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[56] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[56] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[55] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[55] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[54] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[54] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[53] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[53] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[52] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[52] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[51] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[51] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[50] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[50] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[49] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[49] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[48] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[48] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[47] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[47] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[46] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[46] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[45] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[45] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[44] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[44] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[43] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[43] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[42] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[42] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[41] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[41] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[40] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[40] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[39] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[39] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[38] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[38] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[37] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[37] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[36] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[36] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[35] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[35] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[34] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[34] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[33] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[33] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[32] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[32] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[31] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[31] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[30] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[30] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[29] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[29] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[28] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[28] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[27] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[27] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[26] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[26] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[25] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[25] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[24] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[24] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[23] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[23] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[22] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[22] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[21] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[21] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[20] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[20] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[19] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[19] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[18] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[18] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[17] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[17] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[16] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[16] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[15] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[15] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[14] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[14] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[13] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[13] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[12] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[12] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[11] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[11] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[10] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[10] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[9] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[9] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[8] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[8] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[7] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[7] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[6] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[6] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[5] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[5] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[4] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[4] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[3] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[3] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[2] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[2] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[1] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[1] = binary.BigEndian.Uint64(y_bytes[488:496])
	x[0] = binary.BigEndian.Uint64(x_bytes[496:504])
	y[0] = binary.BigEndian.Uint64(y_bytes[496:504])

	mod := f.ModulusLimbs
	_ = mod[62]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC1 = bits.Sub64(mod[62], x[62], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)
	_, gteC2 = bits.Sub64(mod[62], y[62], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [63]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 63; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 63; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[62]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[62])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[61])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[60])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[59])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[58])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[57])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[56])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[55])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[54])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[53])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[52])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[51])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[50])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[49])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[48])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[47])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[46])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[45])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[44])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[43])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[42])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[41])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[40])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[39])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[38])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[37])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[36])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[35])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[34])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[33])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[32])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[31])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[30])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[29])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[28])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[27])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[26])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[25])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[24])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[23])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[22])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[21])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[20])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[19])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[18])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[17])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[16])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[15])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[14])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[13])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[12])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[11])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[10])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[9])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[8])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[7])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[6])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[5])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[4])
	binary.BigEndian.PutUint64(out_bytes[472:480], src[3])
	binary.BigEndian.PutUint64(out_bytes[480:488], src[2])
	binary.BigEndian.PutUint64(out_bytes[488:496], src[1])
	binary.BigEndian.PutUint64(out_bytes[496:504], src[0])
	return nil
}

func SubModNonUnrolled4096(f *Field, out_bytes, x_bytes, y_bytes []byte) error {
	var x, y, z [64]uint64
	x[63] = binary.BigEndian.Uint64(x_bytes[0:8])
	y[63] = binary.BigEndian.Uint64(y_bytes[0:8])
	x[62] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[62] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[61] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[61] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[60] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[60] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[59] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[59] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[58] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[58] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[57] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[57] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[56] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[56] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[55] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[55] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[54] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[54] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[53] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[53] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[52] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[52] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[51] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[51] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[50] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[50] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[49] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[49] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[48] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[48] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[47] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[47] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[46] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[46] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[45] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[45] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[44] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[44] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[43] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[43] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[42] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[42] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[41] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[41] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[40] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[40] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[39] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[39] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[38] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[38] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[37] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[37] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[36] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[36] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[35] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[35] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[34] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[34] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[33] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[33] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[32] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[32] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[31] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[31] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[30] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[30] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[29] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[29] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[28] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[28] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[27] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[27] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[26] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[26] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[25] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[25] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[24] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[24] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[23] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[23] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[22] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[22] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[21] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[21] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[20] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[20] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[19] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[19] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[18] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[18] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[17] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[17] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[16] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[16] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[15] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[15] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[14] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[14] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[13] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[13] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[12] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[12] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[11] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[11] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[10] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[10] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[9] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[9] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[8] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[8] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[7] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[7] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[6] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[6] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[5] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[5] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[4] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[4] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[3] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[3] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[2] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[2] = binary.BigEndian.Uint64(y_bytes[488:496])
	x[1] = binary.BigEndian.Uint64(x_bytes[496:504])
	y[1] = binary.BigEndian.Uint64(y_bytes[496:504])
	x[0] = binary.BigEndian.Uint64(x_bytes[504:512])
	y[0] = binary.BigEndian.Uint64(y_bytes[504:512])

	mod := f.ModulusLimbs
	_ = mod[63]

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC1 = bits.Sub64(mod[62], x[62], gteC1)
	_, gteC1 = bits.Sub64(mod[63], x[63], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)
	_, gteC2 = bits.Sub64(mod[62], y[62], gteC2)
	_, gteC2 = bits.Sub64(mod[63], y[63], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	var c uint64 = 0
	var c1 uint64 = 0
	tmp := [64]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	for i := 0; i < 64; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < 64; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	var src []uint64
	// final sub was unnecessary
	if c == 0 {
		src = tmp[:]
	} else {
		src = z[:]
	}

	// pre-hint to compiler: TODO check asm to make sure this actually does something.
	_ = src[63]
	binary.BigEndian.PutUint64(out_bytes[0:8], src[63])
	binary.BigEndian.PutUint64(out_bytes[8:16], src[62])
	binary.BigEndian.PutUint64(out_bytes[16:24], src[61])
	binary.BigEndian.PutUint64(out_bytes[24:32], src[60])
	binary.BigEndian.PutUint64(out_bytes[32:40], src[59])
	binary.BigEndian.PutUint64(out_bytes[40:48], src[58])
	binary.BigEndian.PutUint64(out_bytes[48:56], src[57])
	binary.BigEndian.PutUint64(out_bytes[56:64], src[56])
	binary.BigEndian.PutUint64(out_bytes[64:72], src[55])
	binary.BigEndian.PutUint64(out_bytes[72:80], src[54])
	binary.BigEndian.PutUint64(out_bytes[80:88], src[53])
	binary.BigEndian.PutUint64(out_bytes[88:96], src[52])
	binary.BigEndian.PutUint64(out_bytes[96:104], src[51])
	binary.BigEndian.PutUint64(out_bytes[104:112], src[50])
	binary.BigEndian.PutUint64(out_bytes[112:120], src[49])
	binary.BigEndian.PutUint64(out_bytes[120:128], src[48])
	binary.BigEndian.PutUint64(out_bytes[128:136], src[47])
	binary.BigEndian.PutUint64(out_bytes[136:144], src[46])
	binary.BigEndian.PutUint64(out_bytes[144:152], src[45])
	binary.BigEndian.PutUint64(out_bytes[152:160], src[44])
	binary.BigEndian.PutUint64(out_bytes[160:168], src[43])
	binary.BigEndian.PutUint64(out_bytes[168:176], src[42])
	binary.BigEndian.PutUint64(out_bytes[176:184], src[41])
	binary.BigEndian.PutUint64(out_bytes[184:192], src[40])
	binary.BigEndian.PutUint64(out_bytes[192:200], src[39])
	binary.BigEndian.PutUint64(out_bytes[200:208], src[38])
	binary.BigEndian.PutUint64(out_bytes[208:216], src[37])
	binary.BigEndian.PutUint64(out_bytes[216:224], src[36])
	binary.BigEndian.PutUint64(out_bytes[224:232], src[35])
	binary.BigEndian.PutUint64(out_bytes[232:240], src[34])
	binary.BigEndian.PutUint64(out_bytes[240:248], src[33])
	binary.BigEndian.PutUint64(out_bytes[248:256], src[32])
	binary.BigEndian.PutUint64(out_bytes[256:264], src[31])
	binary.BigEndian.PutUint64(out_bytes[264:272], src[30])
	binary.BigEndian.PutUint64(out_bytes[272:280], src[29])
	binary.BigEndian.PutUint64(out_bytes[280:288], src[28])
	binary.BigEndian.PutUint64(out_bytes[288:296], src[27])
	binary.BigEndian.PutUint64(out_bytes[296:304], src[26])
	binary.BigEndian.PutUint64(out_bytes[304:312], src[25])
	binary.BigEndian.PutUint64(out_bytes[312:320], src[24])
	binary.BigEndian.PutUint64(out_bytes[320:328], src[23])
	binary.BigEndian.PutUint64(out_bytes[328:336], src[22])
	binary.BigEndian.PutUint64(out_bytes[336:344], src[21])
	binary.BigEndian.PutUint64(out_bytes[344:352], src[20])
	binary.BigEndian.PutUint64(out_bytes[352:360], src[19])
	binary.BigEndian.PutUint64(out_bytes[360:368], src[18])
	binary.BigEndian.PutUint64(out_bytes[368:376], src[17])
	binary.BigEndian.PutUint64(out_bytes[376:384], src[16])
	binary.BigEndian.PutUint64(out_bytes[384:392], src[15])
	binary.BigEndian.PutUint64(out_bytes[392:400], src[14])
	binary.BigEndian.PutUint64(out_bytes[400:408], src[13])
	binary.BigEndian.PutUint64(out_bytes[408:416], src[12])
	binary.BigEndian.PutUint64(out_bytes[416:424], src[11])
	binary.BigEndian.PutUint64(out_bytes[424:432], src[10])
	binary.BigEndian.PutUint64(out_bytes[432:440], src[9])
	binary.BigEndian.PutUint64(out_bytes[440:448], src[8])
	binary.BigEndian.PutUint64(out_bytes[448:456], src[7])
	binary.BigEndian.PutUint64(out_bytes[456:464], src[6])
	binary.BigEndian.PutUint64(out_bytes[464:472], src[5])
	binary.BigEndian.PutUint64(out_bytes[472:480], src[4])
	binary.BigEndian.PutUint64(out_bytes[480:488], src[3])
	binary.BigEndian.PutUint64(out_bytes[488:496], src[2])
	binary.BigEndian.PutUint64(out_bytes[496:504], src[1])
	binary.BigEndian.PutUint64(out_bytes[504:512], src[0])
	return nil
}
