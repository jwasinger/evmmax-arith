package mont_arith

import (
	"encoding/binary"
	"errors"
	"fmt"
	"math/bits"
	"unsafe"
)

func MulMontNonUnrolled64(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [1]uint64

	// conversion to little-endian limb-order, system limb-endianess

	//z := (*[1]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[1]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [2]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])

	t[1], D = bits.Add64(t[1], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	t[0], C = bits.Add64(t[1], C, 0)
	t[1], _ = bits.Add64(0, D, C)

	for j := 1; j < 1; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		t[1], D = bits.Add64(t[1], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		t[0], C = bits.Add64(t[1], C, 0)
		t[1], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)

	if D != 0 && t[1] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled128(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [2]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[1] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[1] = binary.BigEndian.Uint64(y_bytes[8:16])

	//z := (*[2]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[2]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [3]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)

	t[2], D = bits.Add64(t[2], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	t[1], C = bits.Add64(t[2], C, 0)
	t[2], _ = bits.Add64(0, D, C)

	for j := 1; j < 2; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		t[2], D = bits.Add64(t[2], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		t[1], C = bits.Add64(t[2], C, 0)
		t[2], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)

	if D != 0 && t[2] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[2])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled192(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [3]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[2] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[2] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[1] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[1] = binary.BigEndian.Uint64(y_bytes[16:24])

	//z := (*[3]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[3]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [4]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)

	t[3], D = bits.Add64(t[3], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	t[2], C = bits.Add64(t[3], C, 0)
	t[3], _ = bits.Add64(0, D, C)

	for j := 1; j < 3; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		t[3], D = bits.Add64(t[3], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		t[2], C = bits.Add64(t[3], C, 0)
		t[3], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)

	if D != 0 && t[3] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[3])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[2])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled256(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [4]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[3] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[3] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[2] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[2] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[1] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[1] = binary.BigEndian.Uint64(y_bytes[24:32])

	//z := (*[4]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[4]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [5]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)

	t[4], D = bits.Add64(t[4], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	t[3], C = bits.Add64(t[4], C, 0)
	t[4], _ = bits.Add64(0, D, C)

	for j := 1; j < 4; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		t[4], D = bits.Add64(t[4], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		t[3], C = bits.Add64(t[4], C, 0)
		t[4], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)

	if D != 0 && t[4] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[4])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[3])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[2])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled320(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [5]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[4] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[4] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[3] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[3] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[2] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[2] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[1] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[1] = binary.BigEndian.Uint64(y_bytes[32:40])

	//z := (*[5]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[5]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [6]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)

	t[5], D = bits.Add64(t[5], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	t[4], C = bits.Add64(t[5], C, 0)
	t[5], _ = bits.Add64(0, D, C)

	for j := 1; j < 5; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		t[5], D = bits.Add64(t[5], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		t[4], C = bits.Add64(t[5], C, 0)
		t[5], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)

	if D != 0 && t[5] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[5])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[4])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[3])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[2])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled384(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [6]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[5] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[5] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[4] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[4] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[3] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[3] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[2] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[2] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[1] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[1] = binary.BigEndian.Uint64(y_bytes[40:48])

	//z := (*[6]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[6]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [7]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)

	t[6], D = bits.Add64(t[6], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	t[5], C = bits.Add64(t[6], C, 0)
	t[6], _ = bits.Add64(0, D, C)

	for j := 1; j < 6; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		t[6], D = bits.Add64(t[6], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		t[5], C = bits.Add64(t[6], C, 0)
		t[6], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)

	if D != 0 && t[6] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[6])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[5])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[4])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[3])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[2])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled448(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [7]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[6] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[6] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[5] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[5] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[4] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[4] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[3] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[3] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[2] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[2] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[1] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[1] = binary.BigEndian.Uint64(y_bytes[48:56])

	//z := (*[7]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[7]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [8]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)

	t[7], D = bits.Add64(t[7], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	t[6], C = bits.Add64(t[7], C, 0)
	t[7], _ = bits.Add64(0, D, C)

	for j := 1; j < 7; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		t[7], D = bits.Add64(t[7], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		t[6], C = bits.Add64(t[7], C, 0)
		t[7], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)

	if D != 0 && t[7] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[7])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[6])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[5])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[4])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[3])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[2])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled512(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [8]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[7] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[7] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[6] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[6] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[5] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[5] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[4] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[4] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[3] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[3] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[2] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[2] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[1] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[1] = binary.BigEndian.Uint64(y_bytes[56:64])

	//z := (*[8]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[8]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [9]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)

	t[8], D = bits.Add64(t[8], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	t[7], C = bits.Add64(t[8], C, 0)
	t[8], _ = bits.Add64(0, D, C)

	for j := 1; j < 8; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		t[8], D = bits.Add64(t[8], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		t[7], C = bits.Add64(t[8], C, 0)
		t[8], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)

	if D != 0 && t[8] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[8])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[7])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[6])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[5])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[4])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[3])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[2])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled576(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [9]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[8] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[8] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[7] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[7] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[6] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[6] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[5] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[5] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[4] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[4] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[3] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[3] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[2] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[2] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[1] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[1] = binary.BigEndian.Uint64(y_bytes[64:72])

	//z := (*[9]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[9]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [10]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)

	t[9], D = bits.Add64(t[9], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	t[8], C = bits.Add64(t[9], C, 0)
	t[9], _ = bits.Add64(0, D, C)

	for j := 1; j < 9; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		t[9], D = bits.Add64(t[9], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		t[8], C = bits.Add64(t[9], C, 0)
		t[9], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)

	if D != 0 && t[9] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[9])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[8])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[7])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[6])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[5])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[4])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[3])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[2])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled640(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [10]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[9] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[9] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[8] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[8] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[7] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[7] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[6] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[6] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[5] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[5] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[4] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[4] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[3] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[3] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[2] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[2] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[1] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[1] = binary.BigEndian.Uint64(y_bytes[72:80])

	//z := (*[10]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[10]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [11]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)

	t[10], D = bits.Add64(t[10], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	t[9], C = bits.Add64(t[10], C, 0)
	t[10], _ = bits.Add64(0, D, C)

	for j := 1; j < 10; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		t[10], D = bits.Add64(t[10], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		t[9], C = bits.Add64(t[10], C, 0)
		t[10], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)

	if D != 0 && t[10] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[10])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[9])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[8])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[7])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[6])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[5])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[4])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[3])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[2])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled704(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [11]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[10] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[10] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[9] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[9] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[8] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[8] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[7] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[7] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[6] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[6] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[5] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[5] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[4] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[4] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[3] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[3] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[2] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[2] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[1] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[1] = binary.BigEndian.Uint64(y_bytes[80:88])

	//z := (*[11]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[11]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [12]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)

	t[11], D = bits.Add64(t[11], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	t[10], C = bits.Add64(t[11], C, 0)
	t[11], _ = bits.Add64(0, D, C)

	for j := 1; j < 11; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		t[11], D = bits.Add64(t[11], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		t[10], C = bits.Add64(t[11], C, 0)
		t[11], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)

	if D != 0 && t[11] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[11])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[10])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[9])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[8])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[7])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[6])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[5])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[4])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[3])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[2])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled768(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [12]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[11] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[11] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[10] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[10] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[9] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[9] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[8] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[8] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[7] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[7] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[6] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[6] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[5] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[5] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[4] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[4] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[3] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[3] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[2] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[2] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[1] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[1] = binary.BigEndian.Uint64(y_bytes[88:96])

	//z := (*[12]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[12]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [13]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)

	t[12], D = bits.Add64(t[12], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	t[11], C = bits.Add64(t[12], C, 0)
	t[12], _ = bits.Add64(0, D, C)

	for j := 1; j < 12; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		t[12], D = bits.Add64(t[12], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		t[11], C = bits.Add64(t[12], C, 0)
		t[12], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)

	if D != 0 && t[12] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[12])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[11])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[10])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[9])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[8])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[7])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[6])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[5])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[4])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[3])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[2])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled832(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [13]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[12] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[12] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[11] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[11] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[10] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[10] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[9] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[9] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[8] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[8] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[7] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[7] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[6] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[6] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[5] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[5] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[4] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[4] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[3] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[3] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[2] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[2] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[1] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[1] = binary.BigEndian.Uint64(y_bytes[96:104])

	//z := (*[13]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[13]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [14]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)

	t[13], D = bits.Add64(t[13], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	t[12], C = bits.Add64(t[13], C, 0)
	t[13], _ = bits.Add64(0, D, C)

	for j := 1; j < 13; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		t[13], D = bits.Add64(t[13], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		t[12], C = bits.Add64(t[13], C, 0)
		t[13], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)

	if D != 0 && t[13] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[13])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[12])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[11])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[10])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[9])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[8])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[7])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[6])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[5])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[4])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[3])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[2])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled896(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [14]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[13] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[13] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[12] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[12] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[11] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[11] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[10] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[10] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[9] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[9] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[8] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[8] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[7] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[7] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[6] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[6] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[5] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[5] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[4] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[4] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[3] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[3] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[2] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[2] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[1] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[1] = binary.BigEndian.Uint64(y_bytes[104:112])

	//z := (*[14]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[14]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [15]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)

	t[14], D = bits.Add64(t[14], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	t[13], C = bits.Add64(t[14], C, 0)
	t[14], _ = bits.Add64(0, D, C)

	for j := 1; j < 14; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		t[14], D = bits.Add64(t[14], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		t[13], C = bits.Add64(t[14], C, 0)
		t[14], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)

	if D != 0 && t[14] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[14])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[13])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[12])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[11])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[10])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[9])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[8])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[7])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[6])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[5])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[4])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[3])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[2])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled960(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [15]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[14] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[14] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[13] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[13] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[12] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[12] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[11] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[11] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[10] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[10] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[9] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[9] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[8] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[8] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[7] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[7] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[6] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[6] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[5] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[5] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[4] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[4] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[3] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[3] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[2] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[2] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[1] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[1] = binary.BigEndian.Uint64(y_bytes[112:120])

	//z := (*[15]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[15]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [16]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)

	t[15], D = bits.Add64(t[15], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	t[14], C = bits.Add64(t[15], C, 0)
	t[15], _ = bits.Add64(0, D, C)

	for j := 1; j < 15; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		t[15], D = bits.Add64(t[15], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		t[14], C = bits.Add64(t[15], C, 0)
		t[15], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)

	if D != 0 && t[15] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[15])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[14])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[13])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[12])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[11])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[10])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[9])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[8])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[7])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[6])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[5])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[4])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[3])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[2])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1024(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [16]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[15] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[15] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[14] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[14] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[13] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[13] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[12] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[12] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[11] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[11] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[10] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[10] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[9] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[9] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[8] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[8] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[7] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[7] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[6] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[6] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[5] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[5] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[4] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[4] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[3] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[3] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[2] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[2] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[1] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[1] = binary.BigEndian.Uint64(y_bytes[120:128])

	//z := (*[16]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[16]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [17]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)

	t[16], D = bits.Add64(t[16], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	t[15], C = bits.Add64(t[16], C, 0)
	t[16], _ = bits.Add64(0, D, C)

	for j := 1; j < 16; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		t[16], D = bits.Add64(t[16], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		t[15], C = bits.Add64(t[16], C, 0)
		t[16], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)

	if D != 0 && t[16] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[16])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[15])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[14])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[13])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[12])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[11])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[10])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[9])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[8])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[7])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[6])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[5])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[4])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[3])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[2])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1088(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [17]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[16] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[16] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[15] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[15] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[14] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[14] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[13] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[13] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[12] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[12] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[11] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[11] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[10] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[10] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[9] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[9] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[8] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[8] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[7] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[7] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[6] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[6] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[5] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[5] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[4] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[4] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[3] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[3] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[2] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[2] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[1] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[1] = binary.BigEndian.Uint64(y_bytes[128:136])

	//z := (*[17]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[17]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [18]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)

	t[17], D = bits.Add64(t[17], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	t[16], C = bits.Add64(t[17], C, 0)
	t[17], _ = bits.Add64(0, D, C)

	for j := 1; j < 17; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		t[17], D = bits.Add64(t[17], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		t[16], C = bits.Add64(t[17], C, 0)
		t[17], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)

	if D != 0 && t[17] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[17])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[16])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[15])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[14])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[13])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[12])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[11])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[10])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[9])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[8])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[7])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[6])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[5])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[4])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[3])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[2])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1152(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [18]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[17] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[17] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[16] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[16] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[15] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[15] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[14] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[14] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[13] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[13] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[12] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[12] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[11] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[11] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[10] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[10] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[9] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[9] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[8] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[8] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[7] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[7] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[6] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[6] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[5] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[5] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[4] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[4] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[3] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[3] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[2] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[2] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[1] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[1] = binary.BigEndian.Uint64(y_bytes[136:144])

	//z := (*[18]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[18]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [19]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)

	t[18], D = bits.Add64(t[18], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	t[17], C = bits.Add64(t[18], C, 0)
	t[18], _ = bits.Add64(0, D, C)

	for j := 1; j < 18; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		t[18], D = bits.Add64(t[18], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		t[17], C = bits.Add64(t[18], C, 0)
		t[18], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)

	if D != 0 && t[18] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[18])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[17])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[16])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[15])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[14])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[13])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[12])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[11])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[10])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[9])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[8])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[7])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[6])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[5])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[4])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[3])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[2])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1216(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [19]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[18] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[18] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[17] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[17] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[16] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[16] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[15] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[15] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[14] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[14] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[13] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[13] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[12] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[12] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[11] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[11] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[10] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[10] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[9] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[9] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[8] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[8] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[7] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[7] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[6] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[6] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[5] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[5] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[4] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[4] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[3] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[3] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[2] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[2] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[1] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[1] = binary.BigEndian.Uint64(y_bytes[144:152])

	//z := (*[19]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[19]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [20]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)

	t[19], D = bits.Add64(t[19], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	t[18], C = bits.Add64(t[19], C, 0)
	t[19], _ = bits.Add64(0, D, C)

	for j := 1; j < 19; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		t[19], D = bits.Add64(t[19], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		t[18], C = bits.Add64(t[19], C, 0)
		t[19], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)

	if D != 0 && t[19] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[19])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[18])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[17])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[16])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[15])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[14])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[13])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[12])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[11])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[10])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[9])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[8])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[7])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[6])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[5])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[4])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[3])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[2])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1280(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [20]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[19] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[19] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[18] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[18] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[17] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[17] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[16] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[16] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[15] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[15] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[14] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[14] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[13] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[13] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[12] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[12] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[11] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[11] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[10] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[10] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[9] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[9] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[8] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[8] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[7] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[7] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[6] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[6] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[5] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[5] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[4] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[4] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[3] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[3] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[2] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[2] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[1] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[1] = binary.BigEndian.Uint64(y_bytes[152:160])

	//z := (*[20]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[20]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [21]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)

	t[20], D = bits.Add64(t[20], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	t[19], C = bits.Add64(t[20], C, 0)
	t[20], _ = bits.Add64(0, D, C)

	for j := 1; j < 20; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		t[20], D = bits.Add64(t[20], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		t[19], C = bits.Add64(t[20], C, 0)
		t[20], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)

	if D != 0 && t[20] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[20])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[19])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[18])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[17])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[16])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[15])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[14])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[13])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[12])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[11])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[10])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[9])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[8])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[7])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[6])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[5])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[4])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[3])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[2])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1344(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [21]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[20] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[20] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[19] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[19] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[18] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[18] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[17] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[17] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[16] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[16] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[15] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[15] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[14] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[14] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[13] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[13] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[12] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[12] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[11] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[11] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[10] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[10] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[9] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[9] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[8] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[8] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[7] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[7] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[6] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[6] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[5] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[5] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[4] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[4] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[3] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[3] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[2] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[2] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[1] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[1] = binary.BigEndian.Uint64(y_bytes[160:168])

	//z := (*[21]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[21]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [22]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)

	t[21], D = bits.Add64(t[21], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	t[20], C = bits.Add64(t[21], C, 0)
	t[21], _ = bits.Add64(0, D, C)

	for j := 1; j < 21; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		t[21], D = bits.Add64(t[21], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		t[20], C = bits.Add64(t[21], C, 0)
		t[21], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)

	if D != 0 && t[21] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[21])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[20])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[19])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[18])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[17])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[16])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[15])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[14])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[13])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[12])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[11])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[10])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[9])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[8])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[7])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[6])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[5])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[4])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[3])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[2])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1408(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [22]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[21] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[21] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[20] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[20] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[19] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[19] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[18] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[18] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[17] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[17] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[16] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[16] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[15] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[15] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[14] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[14] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[13] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[13] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[12] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[12] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[11] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[11] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[10] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[10] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[9] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[9] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[8] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[8] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[7] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[7] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[6] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[6] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[5] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[5] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[4] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[4] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[3] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[3] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[2] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[2] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[1] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[1] = binary.BigEndian.Uint64(y_bytes[168:176])

	//z := (*[22]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[22]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [23]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)

	t[22], D = bits.Add64(t[22], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	t[21], C = bits.Add64(t[22], C, 0)
	t[22], _ = bits.Add64(0, D, C)

	for j := 1; j < 22; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		t[22], D = bits.Add64(t[22], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		t[21], C = bits.Add64(t[22], C, 0)
		t[22], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)

	if D != 0 && t[22] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[22])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[21])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[20])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[19])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[18])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[17])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[16])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[15])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[14])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[13])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[12])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[11])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[10])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[9])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[8])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[7])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[6])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[5])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[4])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[3])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[2])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1472(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [23]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[22] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[22] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[21] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[21] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[20] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[20] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[19] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[19] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[18] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[18] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[17] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[17] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[16] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[16] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[15] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[15] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[14] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[14] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[13] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[13] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[12] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[12] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[11] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[11] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[10] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[10] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[9] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[9] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[8] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[8] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[7] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[7] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[6] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[6] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[5] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[5] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[4] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[4] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[3] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[3] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[2] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[2] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[1] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[1] = binary.BigEndian.Uint64(y_bytes[176:184])

	//z := (*[23]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[23]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [24]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)

	t[23], D = bits.Add64(t[23], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	t[22], C = bits.Add64(t[23], C, 0)
	t[23], _ = bits.Add64(0, D, C)

	for j := 1; j < 23; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		t[23], D = bits.Add64(t[23], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		t[22], C = bits.Add64(t[23], C, 0)
		t[23], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)

	if D != 0 && t[23] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[23])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[22])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[21])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[20])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[19])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[18])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[17])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[16])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[15])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[14])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[13])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[12])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[11])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[10])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[9])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[8])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[7])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[6])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[5])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[4])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[3])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[2])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1536(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [24]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[23] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[23] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[22] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[22] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[21] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[21] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[20] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[20] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[19] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[19] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[18] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[18] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[17] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[17] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[16] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[16] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[15] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[15] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[14] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[14] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[13] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[13] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[12] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[12] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[11] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[11] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[10] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[10] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[9] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[9] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[8] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[8] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[7] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[7] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[6] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[6] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[5] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[5] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[4] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[4] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[3] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[3] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[2] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[2] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[1] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[1] = binary.BigEndian.Uint64(y_bytes[184:192])

	//z := (*[24]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[24]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [25]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)

	t[24], D = bits.Add64(t[24], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	t[23], C = bits.Add64(t[24], C, 0)
	t[24], _ = bits.Add64(0, D, C)

	for j := 1; j < 24; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		t[24], D = bits.Add64(t[24], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		t[23], C = bits.Add64(t[24], C, 0)
		t[24], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)

	if D != 0 && t[24] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[24])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[23])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[22])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[21])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[20])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[19])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[18])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[17])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[16])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[15])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[14])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[13])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[12])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[11])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[10])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[9])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[8])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[7])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[6])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[5])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[4])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[3])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[2])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1600(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [25]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[24] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[24] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[23] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[23] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[22] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[22] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[21] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[21] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[20] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[20] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[19] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[19] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[18] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[18] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[17] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[17] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[16] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[16] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[15] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[15] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[14] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[14] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[13] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[13] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[12] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[12] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[11] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[11] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[10] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[10] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[9] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[9] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[8] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[8] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[7] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[7] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[6] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[6] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[5] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[5] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[4] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[4] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[3] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[3] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[2] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[2] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[1] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[1] = binary.BigEndian.Uint64(y_bytes[192:200])

	//z := (*[25]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[25]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [26]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)

	t[25], D = bits.Add64(t[25], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	t[24], C = bits.Add64(t[25], C, 0)
	t[25], _ = bits.Add64(0, D, C)

	for j := 1; j < 25; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		t[25], D = bits.Add64(t[25], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		t[24], C = bits.Add64(t[25], C, 0)
		t[25], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)

	if D != 0 && t[25] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[25])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[24])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[23])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[22])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[21])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[20])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[19])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[18])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[17])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[16])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[15])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[14])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[13])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[12])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[11])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[10])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[9])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[8])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[7])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[6])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[5])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[4])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[3])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[2])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1664(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [26]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[25] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[25] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[24] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[24] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[23] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[23] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[22] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[22] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[21] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[21] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[20] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[20] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[19] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[19] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[18] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[18] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[17] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[17] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[16] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[16] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[15] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[15] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[14] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[14] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[13] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[13] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[12] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[12] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[11] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[11] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[10] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[10] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[9] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[9] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[8] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[8] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[7] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[7] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[6] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[6] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[5] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[5] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[4] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[4] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[3] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[3] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[2] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[2] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[1] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[1] = binary.BigEndian.Uint64(y_bytes[200:208])

	//z := (*[26]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[26]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [27]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)

	t[26], D = bits.Add64(t[26], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	t[25], C = bits.Add64(t[26], C, 0)
	t[26], _ = bits.Add64(0, D, C)

	for j := 1; j < 26; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		t[26], D = bits.Add64(t[26], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		t[25], C = bits.Add64(t[26], C, 0)
		t[26], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)

	if D != 0 && t[26] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[26])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[25])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[24])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[23])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[22])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[21])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[20])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[19])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[18])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[17])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[16])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[15])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[14])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[13])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[12])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[11])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[10])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[9])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[8])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[7])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[6])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[5])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[4])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[3])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[2])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1728(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [27]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[26] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[26] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[25] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[25] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[24] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[24] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[23] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[23] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[22] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[22] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[21] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[21] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[20] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[20] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[19] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[19] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[18] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[18] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[17] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[17] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[16] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[16] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[15] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[15] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[14] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[14] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[13] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[13] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[12] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[12] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[11] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[11] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[10] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[10] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[9] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[9] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[8] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[8] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[7] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[7] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[6] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[6] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[5] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[5] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[4] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[4] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[3] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[3] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[2] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[2] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[1] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[1] = binary.BigEndian.Uint64(y_bytes[208:216])

	//z := (*[27]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[27]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [28]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)

	t[27], D = bits.Add64(t[27], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	t[26], C = bits.Add64(t[27], C, 0)
	t[27], _ = bits.Add64(0, D, C)

	for j := 1; j < 27; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		t[27], D = bits.Add64(t[27], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		t[26], C = bits.Add64(t[27], C, 0)
		t[27], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)

	if D != 0 && t[27] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[27])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[26])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[25])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[24])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[23])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[22])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[21])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[20])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[19])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[18])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[17])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[16])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[15])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[14])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[13])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[12])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[11])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[10])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[9])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[8])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[7])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[6])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[5])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[4])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[3])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[2])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1792(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [28]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[27] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[27] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[26] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[26] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[25] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[25] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[24] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[24] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[23] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[23] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[22] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[22] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[21] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[21] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[20] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[20] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[19] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[19] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[18] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[18] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[17] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[17] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[16] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[16] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[15] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[15] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[14] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[14] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[13] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[13] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[12] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[12] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[11] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[11] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[10] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[10] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[9] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[9] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[8] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[8] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[7] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[7] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[6] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[6] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[5] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[5] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[4] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[4] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[3] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[3] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[2] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[2] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[1] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[1] = binary.BigEndian.Uint64(y_bytes[216:224])

	//z := (*[28]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[28]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [29]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)

	t[28], D = bits.Add64(t[28], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	t[27], C = bits.Add64(t[28], C, 0)
	t[28], _ = bits.Add64(0, D, C)

	for j := 1; j < 28; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		t[28], D = bits.Add64(t[28], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		t[27], C = bits.Add64(t[28], C, 0)
		t[28], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)

	if D != 0 && t[28] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[28])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[27])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[26])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[25])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[24])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[23])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[22])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[21])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[20])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[19])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[18])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[17])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[16])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[15])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[14])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[13])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[12])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[11])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[10])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[9])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[8])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[7])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[6])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[5])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[4])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[3])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[2])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1856(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [29]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[28] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[28] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[27] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[27] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[26] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[26] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[25] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[25] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[24] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[24] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[23] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[23] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[22] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[22] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[21] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[21] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[20] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[20] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[19] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[19] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[18] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[18] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[17] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[17] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[16] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[16] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[15] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[15] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[14] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[14] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[13] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[13] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[12] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[12] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[11] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[11] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[10] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[10] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[9] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[9] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[8] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[8] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[7] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[7] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[6] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[6] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[5] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[5] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[4] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[4] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[3] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[3] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[2] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[2] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[1] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[1] = binary.BigEndian.Uint64(y_bytes[224:232])

	//z := (*[29]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[29]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [30]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)

	t[29], D = bits.Add64(t[29], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	t[28], C = bits.Add64(t[29], C, 0)
	t[29], _ = bits.Add64(0, D, C)

	for j := 1; j < 29; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		t[29], D = bits.Add64(t[29], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		t[28], C = bits.Add64(t[29], C, 0)
		t[29], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)

	if D != 0 && t[29] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[29])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[28])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[27])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[26])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[25])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[24])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[23])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[22])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[21])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[20])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[19])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[18])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[17])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[16])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[15])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[14])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[13])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[12])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[11])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[10])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[9])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[8])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[7])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[6])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[5])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[4])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[3])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[2])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1920(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [30]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[29] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[29] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[28] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[28] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[27] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[27] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[26] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[26] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[25] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[25] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[24] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[24] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[23] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[23] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[22] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[22] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[21] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[21] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[20] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[20] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[19] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[19] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[18] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[18] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[17] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[17] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[16] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[16] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[15] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[15] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[14] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[14] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[13] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[13] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[12] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[12] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[11] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[11] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[10] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[10] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[9] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[9] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[8] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[8] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[7] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[7] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[6] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[6] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[5] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[5] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[4] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[4] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[3] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[3] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[2] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[2] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[1] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[1] = binary.BigEndian.Uint64(y_bytes[232:240])

	//z := (*[30]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[30]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [31]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)

	t[30], D = bits.Add64(t[30], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	t[29], C = bits.Add64(t[30], C, 0)
	t[30], _ = bits.Add64(0, D, C)

	for j := 1; j < 30; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		t[30], D = bits.Add64(t[30], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		t[29], C = bits.Add64(t[30], C, 0)
		t[30], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)

	if D != 0 && t[30] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[30])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[29])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[28])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[27])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[26])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[25])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[24])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[23])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[22])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[21])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[20])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[19])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[18])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[17])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[16])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[15])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[14])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[13])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[12])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[11])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[10])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[9])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[8])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[7])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[6])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[5])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[4])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[3])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[2])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled1984(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [31]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[30] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[30] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[29] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[29] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[28] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[28] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[27] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[27] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[26] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[26] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[25] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[25] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[24] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[24] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[23] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[23] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[22] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[22] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[21] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[21] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[20] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[20] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[19] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[19] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[18] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[18] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[17] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[17] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[16] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[16] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[15] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[15] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[14] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[14] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[13] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[13] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[12] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[12] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[11] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[11] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[10] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[10] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[9] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[9] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[8] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[8] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[7] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[7] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[6] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[6] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[5] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[5] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[4] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[4] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[3] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[3] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[2] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[2] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[1] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[1] = binary.BigEndian.Uint64(y_bytes[240:248])

	//z := (*[31]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[31]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [32]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)

	t[31], D = bits.Add64(t[31], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	t[30], C = bits.Add64(t[31], C, 0)
	t[31], _ = bits.Add64(0, D, C)

	for j := 1; j < 31; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		t[31], D = bits.Add64(t[31], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		t[30], C = bits.Add64(t[31], C, 0)
		t[31], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)

	if D != 0 && t[31] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[31])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[30])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[29])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[28])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[27])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[26])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[25])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[24])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[23])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[22])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[21])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[20])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[19])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[18])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[17])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[16])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[15])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[14])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[13])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[12])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[11])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[10])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[9])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[8])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[7])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[6])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[5])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[4])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[3])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[2])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2048(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [32]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[31] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[31] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[30] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[30] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[29] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[29] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[28] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[28] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[27] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[27] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[26] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[26] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[25] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[25] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[24] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[24] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[23] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[23] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[22] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[22] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[21] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[21] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[20] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[20] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[19] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[19] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[18] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[18] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[17] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[17] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[16] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[16] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[15] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[15] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[14] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[14] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[13] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[13] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[12] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[12] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[11] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[11] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[10] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[10] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[9] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[9] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[8] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[8] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[7] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[7] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[6] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[6] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[5] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[5] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[4] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[4] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[3] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[3] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[2] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[2] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[1] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[1] = binary.BigEndian.Uint64(y_bytes[248:256])

	//z := (*[32]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[32]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [33]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)

	t[32], D = bits.Add64(t[32], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	t[31], C = bits.Add64(t[32], C, 0)
	t[32], _ = bits.Add64(0, D, C)

	for j := 1; j < 32; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		t[32], D = bits.Add64(t[32], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		t[31], C = bits.Add64(t[32], C, 0)
		t[32], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)

	if D != 0 && t[32] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[32])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[31])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[30])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[29])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[28])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[27])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[26])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[25])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[24])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[23])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[22])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[21])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[20])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[19])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[18])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[17])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[16])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[15])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[14])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[13])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[12])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[11])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[10])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[9])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[8])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[7])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[6])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[5])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[4])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[3])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[2])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2112(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [33]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[32] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[32] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[31] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[31] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[30] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[30] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[29] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[29] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[28] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[28] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[27] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[27] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[26] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[26] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[25] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[25] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[24] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[24] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[23] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[23] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[22] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[22] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[21] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[21] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[20] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[20] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[19] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[19] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[18] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[18] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[17] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[17] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[16] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[16] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[15] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[15] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[14] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[14] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[13] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[13] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[12] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[12] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[11] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[11] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[10] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[10] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[9] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[9] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[8] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[8] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[7] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[7] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[6] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[6] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[5] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[5] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[4] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[4] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[3] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[3] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[2] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[2] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[1] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[1] = binary.BigEndian.Uint64(y_bytes[256:264])

	//z := (*[33]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[33]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [34]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)

	t[33], D = bits.Add64(t[33], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	t[32], C = bits.Add64(t[33], C, 0)
	t[33], _ = bits.Add64(0, D, C)

	for j := 1; j < 33; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		t[33], D = bits.Add64(t[33], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		t[32], C = bits.Add64(t[33], C, 0)
		t[33], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)

	if D != 0 && t[33] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[33])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[32])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[31])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[30])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[29])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[28])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[27])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[26])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[25])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[24])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[23])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[22])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[21])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[20])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[19])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[18])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[17])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[16])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[15])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[14])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[13])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[12])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[11])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[10])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[9])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[8])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[7])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[6])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[5])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[4])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[3])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[2])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2176(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [34]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[33] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[33] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[32] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[32] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[31] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[31] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[30] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[30] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[29] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[29] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[28] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[28] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[27] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[27] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[26] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[26] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[25] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[25] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[24] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[24] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[23] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[23] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[22] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[22] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[21] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[21] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[20] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[20] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[19] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[19] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[18] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[18] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[17] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[17] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[16] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[16] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[15] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[15] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[14] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[14] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[13] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[13] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[12] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[12] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[11] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[11] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[10] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[10] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[9] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[9] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[8] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[8] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[7] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[7] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[6] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[6] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[5] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[5] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[4] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[4] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[3] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[3] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[2] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[2] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[1] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[1] = binary.BigEndian.Uint64(y_bytes[264:272])

	//z := (*[34]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[34]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [35]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)

	t[34], D = bits.Add64(t[34], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	t[33], C = bits.Add64(t[34], C, 0)
	t[34], _ = bits.Add64(0, D, C)

	for j := 1; j < 34; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		t[34], D = bits.Add64(t[34], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		t[33], C = bits.Add64(t[34], C, 0)
		t[34], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)

	if D != 0 && t[34] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[34])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[33])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[32])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[31])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[30])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[29])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[28])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[27])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[26])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[25])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[24])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[23])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[22])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[21])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[20])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[19])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[18])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[17])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[16])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[15])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[14])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[13])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[12])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[11])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[10])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[9])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[8])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[7])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[6])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[5])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[4])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[3])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[2])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2240(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [35]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[34] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[34] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[33] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[33] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[32] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[32] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[31] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[31] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[30] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[30] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[29] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[29] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[28] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[28] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[27] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[27] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[26] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[26] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[25] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[25] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[24] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[24] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[23] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[23] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[22] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[22] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[21] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[21] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[20] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[20] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[19] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[19] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[18] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[18] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[17] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[17] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[16] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[16] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[15] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[15] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[14] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[14] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[13] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[13] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[12] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[12] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[11] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[11] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[10] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[10] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[9] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[9] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[8] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[8] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[7] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[7] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[6] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[6] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[5] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[5] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[4] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[4] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[3] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[3] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[2] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[2] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[1] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[1] = binary.BigEndian.Uint64(y_bytes[272:280])

	//z := (*[35]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[35]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [36]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)

	t[35], D = bits.Add64(t[35], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	t[34], C = bits.Add64(t[35], C, 0)
	t[35], _ = bits.Add64(0, D, C)

	for j := 1; j < 35; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		t[35], D = bits.Add64(t[35], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		t[34], C = bits.Add64(t[35], C, 0)
		t[35], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)

	if D != 0 && t[35] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[35])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[34])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[33])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[32])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[31])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[30])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[29])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[28])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[27])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[26])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[25])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[24])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[23])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[22])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[21])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[20])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[19])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[18])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[17])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[16])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[15])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[14])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[13])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[12])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[11])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[10])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[9])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[8])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[7])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[6])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[5])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[4])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[3])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[2])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2304(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [36]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[35] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[35] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[34] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[34] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[33] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[33] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[32] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[32] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[31] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[31] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[30] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[30] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[29] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[29] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[28] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[28] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[27] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[27] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[26] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[26] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[25] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[25] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[24] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[24] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[23] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[23] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[22] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[22] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[21] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[21] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[20] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[20] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[19] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[19] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[18] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[18] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[17] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[17] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[16] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[16] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[15] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[15] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[14] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[14] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[13] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[13] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[12] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[12] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[11] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[11] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[10] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[10] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[9] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[9] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[8] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[8] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[7] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[7] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[6] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[6] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[5] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[5] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[4] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[4] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[3] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[3] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[2] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[2] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[1] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[1] = binary.BigEndian.Uint64(y_bytes[280:288])

	//z := (*[36]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[36]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [37]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)

	t[36], D = bits.Add64(t[36], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	t[35], C = bits.Add64(t[36], C, 0)
	t[36], _ = bits.Add64(0, D, C)

	for j := 1; j < 36; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		t[36], D = bits.Add64(t[36], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		t[35], C = bits.Add64(t[36], C, 0)
		t[36], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)

	if D != 0 && t[36] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[36])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[35])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[34])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[33])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[32])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[31])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[30])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[29])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[28])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[27])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[26])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[25])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[24])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[23])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[22])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[21])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[20])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[19])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[18])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[17])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[16])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[15])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[14])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[13])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[12])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[11])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[10])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[9])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[8])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[7])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[6])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[5])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[4])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[3])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[2])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2368(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [37]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[36] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[36] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[35] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[35] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[34] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[34] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[33] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[33] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[32] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[32] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[31] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[31] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[30] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[30] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[29] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[29] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[28] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[28] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[27] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[27] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[26] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[26] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[25] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[25] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[24] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[24] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[23] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[23] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[22] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[22] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[21] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[21] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[20] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[20] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[19] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[19] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[18] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[18] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[17] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[17] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[16] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[16] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[15] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[15] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[14] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[14] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[13] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[13] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[12] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[12] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[11] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[11] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[10] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[10] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[9] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[9] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[8] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[8] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[7] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[7] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[6] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[6] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[5] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[5] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[4] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[4] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[3] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[3] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[2] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[2] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[1] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[1] = binary.BigEndian.Uint64(y_bytes[288:296])

	//z := (*[37]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[37]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [38]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)

	t[37], D = bits.Add64(t[37], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	t[36], C = bits.Add64(t[37], C, 0)
	t[37], _ = bits.Add64(0, D, C)

	for j := 1; j < 37; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		t[37], D = bits.Add64(t[37], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		t[36], C = bits.Add64(t[37], C, 0)
		t[37], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)

	if D != 0 && t[37] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[37])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[36])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[35])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[34])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[33])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[32])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[31])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[30])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[29])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[28])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[27])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[26])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[25])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[24])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[23])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[22])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[21])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[20])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[19])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[18])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[17])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[16])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[15])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[14])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[13])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[12])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[11])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[10])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[9])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[8])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[7])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[6])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[5])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[4])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[3])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[2])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2432(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [38]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[37] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[37] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[36] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[36] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[35] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[35] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[34] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[34] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[33] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[33] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[32] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[32] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[31] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[31] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[30] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[30] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[29] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[29] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[28] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[28] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[27] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[27] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[26] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[26] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[25] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[25] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[24] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[24] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[23] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[23] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[22] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[22] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[21] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[21] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[20] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[20] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[19] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[19] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[18] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[18] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[17] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[17] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[16] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[16] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[15] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[15] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[14] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[14] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[13] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[13] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[12] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[12] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[11] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[11] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[10] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[10] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[9] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[9] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[8] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[8] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[7] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[7] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[6] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[6] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[5] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[5] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[4] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[4] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[3] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[3] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[2] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[2] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[1] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[1] = binary.BigEndian.Uint64(y_bytes[296:304])

	//z := (*[38]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[38]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [39]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)

	t[38], D = bits.Add64(t[38], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	t[37], C = bits.Add64(t[38], C, 0)
	t[38], _ = bits.Add64(0, D, C)

	for j := 1; j < 38; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		t[38], D = bits.Add64(t[38], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		t[37], C = bits.Add64(t[38], C, 0)
		t[38], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)

	if D != 0 && t[38] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[38])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[37])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[36])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[35])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[34])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[33])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[32])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[31])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[30])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[29])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[28])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[27])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[26])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[25])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[24])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[23])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[22])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[21])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[20])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[19])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[18])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[17])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[16])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[15])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[14])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[13])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[12])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[11])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[10])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[9])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[8])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[7])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[6])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[5])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[4])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[3])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[2])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2496(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [39]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[38] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[38] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[37] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[37] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[36] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[36] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[35] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[35] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[34] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[34] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[33] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[33] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[32] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[32] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[31] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[31] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[30] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[30] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[29] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[29] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[28] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[28] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[27] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[27] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[26] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[26] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[25] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[25] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[24] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[24] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[23] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[23] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[22] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[22] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[21] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[21] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[20] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[20] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[19] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[19] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[18] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[18] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[17] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[17] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[16] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[16] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[15] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[15] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[14] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[14] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[13] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[13] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[12] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[12] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[11] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[11] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[10] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[10] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[9] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[9] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[8] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[8] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[7] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[7] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[6] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[6] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[5] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[5] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[4] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[4] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[3] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[3] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[2] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[2] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[1] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[1] = binary.BigEndian.Uint64(y_bytes[304:312])

	//z := (*[39]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[39]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [40]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)

	t[39], D = bits.Add64(t[39], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	t[38], C = bits.Add64(t[39], C, 0)
	t[39], _ = bits.Add64(0, D, C)

	for j := 1; j < 39; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		t[39], D = bits.Add64(t[39], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		t[38], C = bits.Add64(t[39], C, 0)
		t[39], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)

	if D != 0 && t[39] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[39])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[38])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[37])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[36])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[35])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[34])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[33])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[32])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[31])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[30])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[29])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[28])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[27])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[26])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[25])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[24])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[23])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[22])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[21])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[20])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[19])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[18])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[17])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[16])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[15])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[14])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[13])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[12])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[11])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[10])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[9])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[8])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[7])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[6])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[5])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[4])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[3])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[2])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2560(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [40]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[39] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[39] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[38] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[38] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[37] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[37] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[36] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[36] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[35] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[35] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[34] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[34] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[33] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[33] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[32] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[32] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[31] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[31] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[30] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[30] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[29] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[29] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[28] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[28] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[27] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[27] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[26] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[26] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[25] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[25] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[24] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[24] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[23] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[23] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[22] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[22] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[21] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[21] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[20] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[20] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[19] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[19] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[18] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[18] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[17] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[17] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[16] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[16] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[15] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[15] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[14] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[14] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[13] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[13] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[12] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[12] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[11] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[11] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[10] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[10] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[9] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[9] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[8] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[8] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[7] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[7] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[6] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[6] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[5] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[5] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[4] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[4] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[3] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[3] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[2] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[2] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[1] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[1] = binary.BigEndian.Uint64(y_bytes[312:320])

	//z := (*[40]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[40]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [41]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)

	t[40], D = bits.Add64(t[40], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	t[39], C = bits.Add64(t[40], C, 0)
	t[40], _ = bits.Add64(0, D, C)

	for j := 1; j < 40; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		t[40], D = bits.Add64(t[40], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		t[39], C = bits.Add64(t[40], C, 0)
		t[40], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)

	if D != 0 && t[40] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[40])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[39])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[38])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[37])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[36])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[35])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[34])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[33])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[32])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[31])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[30])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[29])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[28])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[27])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[26])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[25])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[24])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[23])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[22])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[21])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[20])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[19])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[18])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[17])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[16])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[15])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[14])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[13])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[12])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[11])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[10])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[9])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[8])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[7])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[6])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[5])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[4])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[3])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[2])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2624(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [41]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[40] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[40] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[39] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[39] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[38] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[38] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[37] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[37] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[36] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[36] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[35] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[35] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[34] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[34] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[33] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[33] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[32] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[32] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[31] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[31] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[30] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[30] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[29] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[29] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[28] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[28] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[27] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[27] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[26] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[26] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[25] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[25] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[24] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[24] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[23] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[23] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[22] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[22] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[21] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[21] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[20] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[20] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[19] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[19] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[18] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[18] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[17] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[17] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[16] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[16] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[15] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[15] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[14] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[14] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[13] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[13] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[12] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[12] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[11] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[11] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[10] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[10] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[9] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[9] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[8] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[8] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[7] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[7] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[6] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[6] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[5] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[5] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[4] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[4] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[3] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[3] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[2] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[2] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[1] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[1] = binary.BigEndian.Uint64(y_bytes[320:328])

	//z := (*[41]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[41]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [42]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)

	t[41], D = bits.Add64(t[41], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	t[40], C = bits.Add64(t[41], C, 0)
	t[41], _ = bits.Add64(0, D, C)

	for j := 1; j < 41; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		t[41], D = bits.Add64(t[41], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		t[40], C = bits.Add64(t[41], C, 0)
		t[41], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)

	if D != 0 && t[41] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[41])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[40])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[39])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[38])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[37])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[36])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[35])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[34])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[33])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[32])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[31])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[30])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[29])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[28])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[27])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[26])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[25])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[24])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[23])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[22])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[21])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[20])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[19])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[18])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[17])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[16])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[15])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[14])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[13])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[12])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[11])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[10])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[9])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[8])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[7])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[6])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[5])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[4])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[3])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[2])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2688(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [42]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[41] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[41] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[40] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[40] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[39] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[39] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[38] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[38] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[37] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[37] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[36] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[36] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[35] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[35] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[34] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[34] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[33] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[33] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[32] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[32] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[31] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[31] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[30] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[30] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[29] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[29] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[28] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[28] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[27] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[27] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[26] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[26] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[25] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[25] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[24] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[24] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[23] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[23] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[22] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[22] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[21] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[21] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[20] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[20] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[19] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[19] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[18] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[18] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[17] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[17] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[16] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[16] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[15] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[15] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[14] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[14] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[13] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[13] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[12] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[12] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[11] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[11] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[10] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[10] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[9] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[9] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[8] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[8] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[7] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[7] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[6] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[6] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[5] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[5] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[4] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[4] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[3] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[3] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[2] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[2] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[1] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[1] = binary.BigEndian.Uint64(y_bytes[328:336])

	//z := (*[42]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[42]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [43]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)

	t[42], D = bits.Add64(t[42], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	t[41], C = bits.Add64(t[42], C, 0)
	t[42], _ = bits.Add64(0, D, C)

	for j := 1; j < 42; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		t[42], D = bits.Add64(t[42], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		t[41], C = bits.Add64(t[42], C, 0)
		t[42], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)

	if D != 0 && t[42] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[42])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[41])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[40])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[39])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[38])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[37])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[36])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[35])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[34])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[33])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[32])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[31])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[30])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[29])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[28])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[27])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[26])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[25])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[24])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[23])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[22])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[21])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[20])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[19])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[18])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[17])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[16])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[15])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[14])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[13])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[12])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[11])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[10])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[9])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[8])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[7])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[6])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[5])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[4])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[3])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[2])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2752(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [43]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[42] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[42] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[41] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[41] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[40] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[40] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[39] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[39] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[38] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[38] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[37] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[37] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[36] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[36] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[35] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[35] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[34] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[34] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[33] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[33] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[32] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[32] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[31] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[31] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[30] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[30] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[29] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[29] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[28] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[28] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[27] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[27] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[26] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[26] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[25] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[25] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[24] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[24] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[23] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[23] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[22] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[22] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[21] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[21] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[20] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[20] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[19] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[19] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[18] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[18] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[17] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[17] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[16] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[16] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[15] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[15] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[14] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[14] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[13] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[13] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[12] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[12] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[11] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[11] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[10] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[10] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[9] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[9] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[8] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[8] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[7] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[7] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[6] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[6] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[5] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[5] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[4] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[4] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[3] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[3] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[2] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[2] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[1] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[1] = binary.BigEndian.Uint64(y_bytes[336:344])

	//z := (*[43]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[43]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [44]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)

	t[43], D = bits.Add64(t[43], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	t[42], C = bits.Add64(t[43], C, 0)
	t[43], _ = bits.Add64(0, D, C)

	for j := 1; j < 43; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		t[43], D = bits.Add64(t[43], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		t[42], C = bits.Add64(t[43], C, 0)
		t[43], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)

	if D != 0 && t[43] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[43])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[42])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[41])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[40])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[39])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[38])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[37])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[36])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[35])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[34])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[33])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[32])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[31])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[30])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[29])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[28])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[27])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[26])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[25])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[24])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[23])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[22])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[21])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[20])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[19])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[18])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[17])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[16])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[15])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[14])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[13])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[12])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[11])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[10])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[9])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[8])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[7])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[6])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[5])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[4])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[3])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[2])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2816(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [44]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[43] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[43] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[42] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[42] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[41] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[41] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[40] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[40] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[39] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[39] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[38] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[38] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[37] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[37] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[36] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[36] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[35] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[35] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[34] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[34] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[33] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[33] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[32] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[32] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[31] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[31] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[30] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[30] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[29] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[29] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[28] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[28] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[27] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[27] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[26] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[26] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[25] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[25] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[24] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[24] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[23] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[23] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[22] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[22] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[21] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[21] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[20] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[20] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[19] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[19] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[18] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[18] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[17] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[17] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[16] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[16] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[15] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[15] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[14] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[14] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[13] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[13] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[12] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[12] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[11] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[11] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[10] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[10] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[9] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[9] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[8] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[8] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[7] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[7] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[6] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[6] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[5] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[5] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[4] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[4] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[3] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[3] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[2] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[2] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[1] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[1] = binary.BigEndian.Uint64(y_bytes[344:352])

	//z := (*[44]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[44]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [45]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)

	t[44], D = bits.Add64(t[44], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	t[43], C = bits.Add64(t[44], C, 0)
	t[44], _ = bits.Add64(0, D, C)

	for j := 1; j < 44; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		t[44], D = bits.Add64(t[44], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		t[43], C = bits.Add64(t[44], C, 0)
		t[44], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)

	if D != 0 && t[44] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[44])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[43])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[42])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[41])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[40])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[39])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[38])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[37])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[36])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[35])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[34])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[33])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[32])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[31])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[30])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[29])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[28])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[27])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[26])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[25])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[24])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[23])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[22])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[21])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[20])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[19])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[18])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[17])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[16])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[15])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[14])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[13])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[12])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[11])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[10])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[9])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[8])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[7])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[6])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[5])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[4])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[3])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[2])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2880(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [45]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[44] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[44] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[43] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[43] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[42] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[42] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[41] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[41] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[40] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[40] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[39] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[39] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[38] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[38] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[37] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[37] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[36] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[36] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[35] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[35] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[34] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[34] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[33] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[33] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[32] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[32] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[31] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[31] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[30] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[30] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[29] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[29] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[28] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[28] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[27] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[27] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[26] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[26] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[25] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[25] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[24] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[24] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[23] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[23] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[22] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[22] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[21] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[21] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[20] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[20] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[19] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[19] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[18] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[18] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[17] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[17] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[16] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[16] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[15] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[15] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[14] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[14] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[13] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[13] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[12] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[12] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[11] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[11] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[10] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[10] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[9] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[9] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[8] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[8] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[7] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[7] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[6] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[6] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[5] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[5] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[4] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[4] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[3] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[3] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[2] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[2] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[1] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[1] = binary.BigEndian.Uint64(y_bytes[352:360])

	//z := (*[45]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[45]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [46]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)

	t[45], D = bits.Add64(t[45], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	t[44], C = bits.Add64(t[45], C, 0)
	t[45], _ = bits.Add64(0, D, C)

	for j := 1; j < 45; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		t[45], D = bits.Add64(t[45], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		t[44], C = bits.Add64(t[45], C, 0)
		t[45], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)

	if D != 0 && t[45] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[45])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[44])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[43])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[42])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[41])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[40])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[39])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[38])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[37])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[36])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[35])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[34])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[33])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[32])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[31])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[30])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[29])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[28])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[27])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[26])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[25])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[24])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[23])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[22])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[21])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[20])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[19])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[18])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[17])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[16])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[15])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[14])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[13])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[12])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[11])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[10])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[9])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[8])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[7])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[6])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[5])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[4])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[3])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[2])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled2944(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [46]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[45] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[45] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[44] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[44] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[43] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[43] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[42] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[42] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[41] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[41] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[40] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[40] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[39] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[39] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[38] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[38] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[37] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[37] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[36] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[36] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[35] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[35] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[34] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[34] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[33] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[33] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[32] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[32] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[31] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[31] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[30] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[30] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[29] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[29] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[28] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[28] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[27] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[27] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[26] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[26] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[25] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[25] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[24] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[24] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[23] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[23] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[22] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[22] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[21] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[21] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[20] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[20] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[19] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[19] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[18] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[18] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[17] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[17] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[16] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[16] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[15] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[15] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[14] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[14] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[13] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[13] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[12] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[12] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[11] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[11] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[10] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[10] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[9] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[9] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[8] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[8] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[7] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[7] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[6] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[6] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[5] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[5] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[4] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[4] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[3] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[3] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[2] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[2] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[1] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[1] = binary.BigEndian.Uint64(y_bytes[360:368])

	//z := (*[46]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[46]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [47]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)

	t[46], D = bits.Add64(t[46], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	t[45], C = bits.Add64(t[46], C, 0)
	t[46], _ = bits.Add64(0, D, C)

	for j := 1; j < 46; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		t[46], D = bits.Add64(t[46], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		t[45], C = bits.Add64(t[46], C, 0)
		t[46], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)

	if D != 0 && t[46] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[46])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[45])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[44])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[43])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[42])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[41])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[40])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[39])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[38])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[37])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[36])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[35])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[34])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[33])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[32])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[31])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[30])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[29])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[28])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[27])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[26])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[25])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[24])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[23])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[22])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[21])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[20])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[19])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[18])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[17])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[16])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[15])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[14])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[13])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[12])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[11])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[10])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[9])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[8])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[7])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[6])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[5])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[4])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[3])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[2])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3008(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [47]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[46] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[46] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[45] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[45] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[44] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[44] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[43] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[43] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[42] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[42] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[41] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[41] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[40] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[40] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[39] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[39] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[38] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[38] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[37] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[37] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[36] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[36] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[35] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[35] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[34] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[34] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[33] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[33] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[32] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[32] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[31] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[31] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[30] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[30] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[29] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[29] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[28] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[28] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[27] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[27] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[26] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[26] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[25] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[25] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[24] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[24] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[23] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[23] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[22] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[22] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[21] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[21] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[20] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[20] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[19] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[19] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[18] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[18] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[17] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[17] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[16] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[16] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[15] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[15] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[14] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[14] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[13] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[13] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[12] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[12] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[11] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[11] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[10] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[10] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[9] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[9] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[8] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[8] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[7] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[7] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[6] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[6] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[5] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[5] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[4] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[4] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[3] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[3] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[2] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[2] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[1] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[1] = binary.BigEndian.Uint64(y_bytes[368:376])

	//z := (*[47]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[47]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [48]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)

	t[47], D = bits.Add64(t[47], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	t[46], C = bits.Add64(t[47], C, 0)
	t[47], _ = bits.Add64(0, D, C)

	for j := 1; j < 47; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		t[47], D = bits.Add64(t[47], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		t[46], C = bits.Add64(t[47], C, 0)
		t[47], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)

	if D != 0 && t[47] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[47])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[46])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[45])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[44])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[43])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[42])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[41])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[40])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[39])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[38])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[37])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[36])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[35])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[34])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[33])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[32])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[31])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[30])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[29])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[28])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[27])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[26])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[25])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[24])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[23])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[22])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[21])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[20])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[19])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[18])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[17])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[16])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[15])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[14])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[13])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[12])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[11])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[10])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[9])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[8])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[7])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[6])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[5])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[4])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[3])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[2])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3072(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [48]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[47] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[47] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[46] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[46] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[45] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[45] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[44] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[44] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[43] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[43] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[42] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[42] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[41] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[41] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[40] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[40] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[39] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[39] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[38] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[38] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[37] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[37] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[36] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[36] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[35] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[35] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[34] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[34] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[33] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[33] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[32] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[32] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[31] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[31] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[30] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[30] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[29] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[29] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[28] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[28] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[27] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[27] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[26] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[26] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[25] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[25] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[24] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[24] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[23] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[23] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[22] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[22] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[21] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[21] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[20] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[20] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[19] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[19] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[18] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[18] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[17] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[17] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[16] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[16] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[15] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[15] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[14] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[14] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[13] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[13] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[12] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[12] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[11] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[11] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[10] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[10] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[9] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[9] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[8] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[8] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[7] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[7] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[6] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[6] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[5] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[5] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[4] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[4] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[3] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[3] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[2] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[2] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[1] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[1] = binary.BigEndian.Uint64(y_bytes[376:384])

	//z := (*[48]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[48]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [49]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)

	t[48], D = bits.Add64(t[48], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	t[47], C = bits.Add64(t[48], C, 0)
	t[48], _ = bits.Add64(0, D, C)

	for j := 1; j < 48; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		t[48], D = bits.Add64(t[48], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		t[47], C = bits.Add64(t[48], C, 0)
		t[48], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)

	if D != 0 && t[48] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[48])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[47])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[46])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[45])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[44])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[43])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[42])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[41])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[40])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[39])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[38])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[37])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[36])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[35])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[34])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[33])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[32])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[31])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[30])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[29])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[28])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[27])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[26])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[25])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[24])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[23])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[22])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[21])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[20])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[19])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[18])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[17])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[16])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[15])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[14])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[13])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[12])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[11])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[10])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[9])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[8])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[7])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[6])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[5])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[4])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[3])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[2])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3136(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [49]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[48] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[48] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[47] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[47] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[46] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[46] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[45] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[45] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[44] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[44] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[43] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[43] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[42] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[42] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[41] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[41] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[40] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[40] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[39] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[39] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[38] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[38] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[37] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[37] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[36] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[36] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[35] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[35] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[34] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[34] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[33] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[33] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[32] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[32] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[31] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[31] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[30] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[30] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[29] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[29] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[28] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[28] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[27] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[27] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[26] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[26] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[25] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[25] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[24] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[24] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[23] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[23] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[22] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[22] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[21] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[21] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[20] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[20] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[19] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[19] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[18] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[18] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[17] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[17] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[16] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[16] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[15] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[15] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[14] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[14] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[13] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[13] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[12] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[12] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[11] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[11] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[10] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[10] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[9] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[9] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[8] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[8] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[7] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[7] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[6] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[6] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[5] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[5] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[4] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[4] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[3] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[3] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[2] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[2] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[1] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[1] = binary.BigEndian.Uint64(y_bytes[384:392])

	//z := (*[49]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[49]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [50]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)

	t[49], D = bits.Add64(t[49], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	t[48], C = bits.Add64(t[49], C, 0)
	t[49], _ = bits.Add64(0, D, C)

	for j := 1; j < 49; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		t[49], D = bits.Add64(t[49], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		t[48], C = bits.Add64(t[49], C, 0)
		t[49], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)

	if D != 0 && t[49] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[49])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[48])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[47])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[46])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[45])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[44])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[43])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[42])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[41])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[40])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[39])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[38])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[37])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[36])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[35])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[34])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[33])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[32])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[31])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[30])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[29])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[28])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[27])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[26])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[25])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[24])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[23])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[22])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[21])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[20])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[19])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[18])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[17])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[16])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[15])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[14])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[13])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[12])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[11])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[10])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[9])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[8])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[7])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[6])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[5])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[4])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[3])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[2])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3200(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [50]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[49] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[49] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[48] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[48] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[47] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[47] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[46] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[46] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[45] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[45] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[44] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[44] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[43] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[43] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[42] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[42] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[41] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[41] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[40] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[40] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[39] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[39] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[38] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[38] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[37] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[37] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[36] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[36] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[35] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[35] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[34] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[34] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[33] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[33] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[32] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[32] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[31] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[31] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[30] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[30] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[29] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[29] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[28] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[28] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[27] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[27] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[26] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[26] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[25] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[25] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[24] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[24] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[23] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[23] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[22] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[22] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[21] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[21] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[20] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[20] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[19] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[19] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[18] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[18] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[17] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[17] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[16] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[16] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[15] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[15] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[14] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[14] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[13] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[13] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[12] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[12] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[11] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[11] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[10] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[10] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[9] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[9] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[8] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[8] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[7] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[7] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[6] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[6] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[5] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[5] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[4] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[4] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[3] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[3] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[2] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[2] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[1] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[1] = binary.BigEndian.Uint64(y_bytes[392:400])

	//z := (*[50]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[50]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [51]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)

	t[50], D = bits.Add64(t[50], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	t[49], C = bits.Add64(t[50], C, 0)
	t[50], _ = bits.Add64(0, D, C)

	for j := 1; j < 50; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		t[50], D = bits.Add64(t[50], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		t[49], C = bits.Add64(t[50], C, 0)
		t[50], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)

	if D != 0 && t[50] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[50])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[49])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[48])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[47])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[46])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[45])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[44])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[43])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[42])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[41])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[40])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[39])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[38])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[37])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[36])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[35])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[34])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[33])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[32])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[31])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[30])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[29])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[28])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[27])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[26])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[25])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[24])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[23])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[22])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[21])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[20])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[19])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[18])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[17])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[16])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[15])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[14])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[13])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[12])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[11])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[10])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[9])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[8])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[7])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[6])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[5])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[4])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[3])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[2])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3264(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [51]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[50] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[50] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[49] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[49] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[48] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[48] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[47] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[47] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[46] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[46] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[45] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[45] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[44] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[44] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[43] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[43] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[42] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[42] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[41] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[41] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[40] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[40] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[39] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[39] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[38] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[38] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[37] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[37] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[36] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[36] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[35] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[35] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[34] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[34] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[33] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[33] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[32] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[32] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[31] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[31] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[30] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[30] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[29] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[29] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[28] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[28] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[27] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[27] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[26] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[26] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[25] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[25] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[24] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[24] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[23] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[23] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[22] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[22] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[21] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[21] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[20] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[20] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[19] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[19] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[18] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[18] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[17] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[17] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[16] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[16] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[15] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[15] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[14] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[14] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[13] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[13] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[12] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[12] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[11] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[11] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[10] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[10] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[9] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[9] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[8] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[8] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[7] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[7] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[6] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[6] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[5] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[5] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[4] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[4] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[3] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[3] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[2] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[2] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[1] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[1] = binary.BigEndian.Uint64(y_bytes[400:408])

	//z := (*[51]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[51]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [52]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)

	t[51], D = bits.Add64(t[51], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	t[50], C = bits.Add64(t[51], C, 0)
	t[51], _ = bits.Add64(0, D, C)

	for j := 1; j < 51; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		t[51], D = bits.Add64(t[51], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		t[50], C = bits.Add64(t[51], C, 0)
		t[51], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)

	if D != 0 && t[51] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[51])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[50])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[49])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[48])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[47])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[46])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[45])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[44])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[43])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[42])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[41])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[40])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[39])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[38])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[37])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[36])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[35])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[34])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[33])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[32])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[31])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[30])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[29])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[28])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[27])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[26])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[25])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[24])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[23])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[22])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[21])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[20])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[19])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[18])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[17])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[16])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[15])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[14])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[13])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[12])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[11])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[10])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[9])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[8])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[7])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[6])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[5])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[4])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[3])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[2])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3328(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [52]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[51] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[51] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[50] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[50] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[49] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[49] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[48] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[48] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[47] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[47] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[46] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[46] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[45] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[45] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[44] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[44] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[43] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[43] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[42] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[42] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[41] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[41] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[40] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[40] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[39] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[39] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[38] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[38] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[37] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[37] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[36] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[36] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[35] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[35] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[34] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[34] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[33] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[33] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[32] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[32] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[31] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[31] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[30] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[30] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[29] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[29] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[28] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[28] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[27] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[27] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[26] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[26] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[25] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[25] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[24] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[24] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[23] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[23] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[22] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[22] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[21] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[21] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[20] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[20] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[19] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[19] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[18] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[18] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[17] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[17] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[16] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[16] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[15] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[15] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[14] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[14] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[13] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[13] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[12] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[12] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[11] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[11] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[10] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[10] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[9] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[9] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[8] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[8] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[7] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[7] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[6] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[6] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[5] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[5] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[4] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[4] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[3] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[3] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[2] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[2] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[1] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[1] = binary.BigEndian.Uint64(y_bytes[408:416])

	//z := (*[52]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[52]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [53]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)

	t[52], D = bits.Add64(t[52], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	t[51], C = bits.Add64(t[52], C, 0)
	t[52], _ = bits.Add64(0, D, C)

	for j := 1; j < 52; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		t[52], D = bits.Add64(t[52], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		t[51], C = bits.Add64(t[52], C, 0)
		t[52], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)

	if D != 0 && t[52] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[52])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[51])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[50])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[49])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[48])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[47])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[46])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[45])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[44])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[43])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[42])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[41])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[40])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[39])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[38])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[37])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[36])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[35])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[34])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[33])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[32])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[31])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[30])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[29])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[28])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[27])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[26])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[25])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[24])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[23])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[22])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[21])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[20])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[19])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[18])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[17])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[16])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[15])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[14])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[13])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[12])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[11])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[10])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[9])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[8])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[7])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[6])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[5])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[4])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[3])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[2])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3392(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [53]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[52] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[52] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[51] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[51] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[50] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[50] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[49] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[49] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[48] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[48] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[47] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[47] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[46] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[46] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[45] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[45] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[44] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[44] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[43] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[43] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[42] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[42] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[41] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[41] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[40] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[40] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[39] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[39] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[38] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[38] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[37] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[37] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[36] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[36] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[35] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[35] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[34] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[34] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[33] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[33] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[32] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[32] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[31] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[31] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[30] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[30] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[29] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[29] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[28] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[28] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[27] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[27] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[26] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[26] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[25] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[25] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[24] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[24] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[23] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[23] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[22] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[22] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[21] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[21] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[20] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[20] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[19] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[19] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[18] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[18] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[17] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[17] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[16] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[16] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[15] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[15] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[14] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[14] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[13] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[13] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[12] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[12] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[11] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[11] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[10] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[10] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[9] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[9] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[8] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[8] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[7] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[7] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[6] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[6] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[5] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[5] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[4] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[4] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[3] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[3] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[2] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[2] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[1] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[1] = binary.BigEndian.Uint64(y_bytes[416:424])

	//z := (*[53]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[53]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [54]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)

	t[53], D = bits.Add64(t[53], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	t[52], C = bits.Add64(t[53], C, 0)
	t[53], _ = bits.Add64(0, D, C)

	for j := 1; j < 53; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		t[53], D = bits.Add64(t[53], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		t[52], C = bits.Add64(t[53], C, 0)
		t[53], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)

	if D != 0 && t[53] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[53])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[52])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[51])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[50])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[49])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[48])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[47])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[46])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[45])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[44])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[43])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[42])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[41])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[40])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[39])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[38])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[37])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[36])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[35])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[34])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[33])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[32])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[31])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[30])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[29])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[28])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[27])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[26])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[25])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[24])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[23])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[22])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[21])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[20])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[19])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[18])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[17])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[16])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[15])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[14])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[13])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[12])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[11])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[10])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[9])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[8])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[7])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[6])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[5])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[4])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[3])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[2])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3456(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [54]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[53] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[53] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[52] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[52] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[51] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[51] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[50] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[50] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[49] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[49] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[48] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[48] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[47] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[47] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[46] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[46] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[45] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[45] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[44] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[44] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[43] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[43] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[42] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[42] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[41] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[41] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[40] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[40] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[39] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[39] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[38] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[38] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[37] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[37] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[36] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[36] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[35] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[35] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[34] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[34] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[33] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[33] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[32] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[32] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[31] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[31] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[30] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[30] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[29] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[29] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[28] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[28] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[27] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[27] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[26] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[26] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[25] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[25] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[24] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[24] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[23] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[23] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[22] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[22] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[21] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[21] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[20] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[20] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[19] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[19] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[18] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[18] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[17] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[17] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[16] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[16] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[15] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[15] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[14] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[14] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[13] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[13] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[12] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[12] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[11] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[11] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[10] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[10] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[9] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[9] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[8] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[8] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[7] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[7] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[6] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[6] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[5] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[5] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[4] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[4] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[3] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[3] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[2] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[2] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[1] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[1] = binary.BigEndian.Uint64(y_bytes[424:432])

	//z := (*[54]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[54]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [55]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)

	t[54], D = bits.Add64(t[54], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	t[53], C = bits.Add64(t[54], C, 0)
	t[54], _ = bits.Add64(0, D, C)

	for j := 1; j < 54; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		t[54], D = bits.Add64(t[54], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		t[53], C = bits.Add64(t[54], C, 0)
		t[54], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)

	if D != 0 && t[54] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[54])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[53])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[52])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[51])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[50])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[49])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[48])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[47])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[46])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[45])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[44])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[43])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[42])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[41])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[40])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[39])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[38])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[37])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[36])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[35])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[34])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[33])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[32])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[31])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[30])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[29])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[28])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[27])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[26])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[25])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[24])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[23])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[22])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[21])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[20])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[19])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[18])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[17])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[16])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[15])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[14])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[13])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[12])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[11])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[10])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[9])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[8])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[7])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[6])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[5])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[4])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[3])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[2])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3520(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [55]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[54] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[54] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[53] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[53] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[52] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[52] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[51] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[51] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[50] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[50] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[49] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[49] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[48] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[48] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[47] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[47] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[46] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[46] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[45] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[45] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[44] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[44] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[43] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[43] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[42] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[42] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[41] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[41] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[40] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[40] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[39] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[39] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[38] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[38] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[37] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[37] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[36] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[36] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[35] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[35] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[34] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[34] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[33] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[33] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[32] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[32] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[31] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[31] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[30] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[30] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[29] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[29] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[28] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[28] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[27] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[27] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[26] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[26] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[25] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[25] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[24] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[24] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[23] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[23] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[22] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[22] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[21] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[21] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[20] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[20] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[19] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[19] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[18] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[18] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[17] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[17] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[16] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[16] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[15] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[15] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[14] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[14] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[13] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[13] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[12] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[12] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[11] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[11] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[10] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[10] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[9] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[9] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[8] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[8] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[7] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[7] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[6] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[6] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[5] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[5] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[4] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[4] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[3] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[3] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[2] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[2] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[1] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[1] = binary.BigEndian.Uint64(y_bytes[432:440])

	//z := (*[55]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[55]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [56]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)

	t[55], D = bits.Add64(t[55], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	t[54], C = bits.Add64(t[55], C, 0)
	t[55], _ = bits.Add64(0, D, C)

	for j := 1; j < 55; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		t[55], D = bits.Add64(t[55], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		t[54], C = bits.Add64(t[55], C, 0)
		t[55], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)

	if D != 0 && t[55] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[55])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[54])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[53])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[52])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[51])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[50])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[49])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[48])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[47])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[46])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[45])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[44])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[43])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[42])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[41])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[40])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[39])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[38])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[37])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[36])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[35])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[34])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[33])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[32])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[31])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[30])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[29])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[28])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[27])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[26])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[25])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[24])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[23])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[22])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[21])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[20])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[19])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[18])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[17])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[16])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[15])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[14])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[13])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[12])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[11])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[10])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[9])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[8])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[7])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[6])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[5])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[4])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[3])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[2])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3584(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [56]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[55] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[55] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[54] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[54] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[53] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[53] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[52] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[52] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[51] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[51] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[50] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[50] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[49] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[49] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[48] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[48] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[47] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[47] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[46] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[46] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[45] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[45] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[44] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[44] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[43] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[43] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[42] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[42] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[41] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[41] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[40] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[40] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[39] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[39] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[38] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[38] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[37] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[37] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[36] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[36] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[35] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[35] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[34] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[34] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[33] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[33] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[32] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[32] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[31] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[31] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[30] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[30] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[29] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[29] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[28] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[28] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[27] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[27] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[26] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[26] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[25] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[25] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[24] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[24] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[23] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[23] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[22] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[22] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[21] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[21] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[20] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[20] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[19] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[19] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[18] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[18] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[17] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[17] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[16] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[16] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[15] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[15] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[14] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[14] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[13] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[13] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[12] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[12] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[11] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[11] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[10] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[10] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[9] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[9] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[8] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[8] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[7] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[7] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[6] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[6] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[5] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[5] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[4] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[4] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[3] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[3] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[2] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[2] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[1] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[1] = binary.BigEndian.Uint64(y_bytes[440:448])

	//z := (*[56]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[56]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [57]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)

	t[56], D = bits.Add64(t[56], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	t[55], C = bits.Add64(t[56], C, 0)
	t[56], _ = bits.Add64(0, D, C)

	for j := 1; j < 56; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		t[56], D = bits.Add64(t[56], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		t[55], C = bits.Add64(t[56], C, 0)
		t[56], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)

	if D != 0 && t[56] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[56])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[55])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[54])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[53])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[52])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[51])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[50])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[49])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[48])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[47])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[46])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[45])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[44])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[43])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[42])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[41])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[40])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[39])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[38])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[37])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[36])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[35])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[34])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[33])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[32])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[31])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[30])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[29])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[28])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[27])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[26])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[25])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[24])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[23])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[22])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[21])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[20])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[19])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[18])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[17])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[16])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[15])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[14])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[13])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[12])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[11])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[10])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[9])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[8])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[7])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[6])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[5])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[4])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[3])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[2])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3648(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [57]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[56] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[56] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[55] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[55] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[54] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[54] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[53] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[53] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[52] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[52] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[51] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[51] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[50] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[50] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[49] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[49] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[48] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[48] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[47] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[47] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[46] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[46] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[45] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[45] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[44] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[44] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[43] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[43] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[42] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[42] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[41] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[41] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[40] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[40] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[39] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[39] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[38] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[38] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[37] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[37] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[36] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[36] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[35] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[35] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[34] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[34] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[33] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[33] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[32] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[32] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[31] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[31] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[30] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[30] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[29] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[29] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[28] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[28] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[27] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[27] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[26] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[26] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[25] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[25] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[24] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[24] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[23] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[23] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[22] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[22] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[21] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[21] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[20] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[20] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[19] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[19] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[18] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[18] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[17] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[17] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[16] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[16] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[15] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[15] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[14] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[14] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[13] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[13] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[12] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[12] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[11] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[11] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[10] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[10] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[9] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[9] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[8] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[8] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[7] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[7] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[6] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[6] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[5] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[5] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[4] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[4] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[3] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[3] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[2] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[2] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[1] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[1] = binary.BigEndian.Uint64(y_bytes[448:456])

	//z := (*[57]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[57]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [58]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)

	t[57], D = bits.Add64(t[57], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	t[56], C = bits.Add64(t[57], C, 0)
	t[57], _ = bits.Add64(0, D, C)

	for j := 1; j < 57; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		t[57], D = bits.Add64(t[57], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		t[56], C = bits.Add64(t[57], C, 0)
		t[57], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)

	if D != 0 && t[57] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[57])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[56])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[55])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[54])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[53])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[52])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[51])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[50])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[49])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[48])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[47])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[46])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[45])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[44])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[43])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[42])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[41])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[40])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[39])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[38])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[37])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[36])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[35])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[34])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[33])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[32])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[31])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[30])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[29])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[28])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[27])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[26])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[25])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[24])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[23])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[22])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[21])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[20])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[19])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[18])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[17])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[16])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[15])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[14])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[13])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[12])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[11])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[10])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[9])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[8])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[7])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[6])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[5])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[4])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[3])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[2])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3712(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [58]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[57] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[57] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[56] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[56] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[55] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[55] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[54] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[54] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[53] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[53] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[52] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[52] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[51] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[51] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[50] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[50] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[49] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[49] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[48] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[48] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[47] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[47] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[46] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[46] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[45] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[45] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[44] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[44] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[43] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[43] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[42] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[42] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[41] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[41] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[40] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[40] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[39] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[39] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[38] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[38] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[37] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[37] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[36] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[36] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[35] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[35] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[34] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[34] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[33] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[33] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[32] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[32] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[31] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[31] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[30] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[30] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[29] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[29] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[28] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[28] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[27] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[27] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[26] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[26] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[25] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[25] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[24] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[24] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[23] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[23] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[22] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[22] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[21] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[21] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[20] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[20] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[19] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[19] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[18] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[18] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[17] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[17] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[16] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[16] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[15] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[15] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[14] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[14] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[13] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[13] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[12] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[12] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[11] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[11] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[10] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[10] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[9] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[9] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[8] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[8] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[7] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[7] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[6] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[6] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[5] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[5] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[4] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[4] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[3] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[3] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[2] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[2] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[1] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[1] = binary.BigEndian.Uint64(y_bytes[456:464])

	//z := (*[58]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[58]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [59]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)

	t[58], D = bits.Add64(t[58], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	t[57], C = bits.Add64(t[58], C, 0)
	t[58], _ = bits.Add64(0, D, C)

	for j := 1; j < 58; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		t[58], D = bits.Add64(t[58], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		t[57], C = bits.Add64(t[58], C, 0)
		t[58], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)

	if D != 0 && t[58] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[58])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[57])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[56])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[55])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[54])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[53])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[52])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[51])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[50])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[49])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[48])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[47])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[46])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[45])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[44])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[43])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[42])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[41])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[40])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[39])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[38])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[37])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[36])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[35])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[34])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[33])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[32])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[31])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[30])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[29])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[28])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[27])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[26])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[25])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[24])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[23])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[22])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[21])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[20])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[19])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[18])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[17])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[16])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[15])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[14])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[13])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[12])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[11])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[10])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[9])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[8])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[7])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[6])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[5])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[4])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[3])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[2])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3776(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [59]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[58] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[58] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[57] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[57] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[56] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[56] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[55] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[55] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[54] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[54] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[53] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[53] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[52] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[52] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[51] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[51] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[50] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[50] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[49] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[49] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[48] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[48] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[47] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[47] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[46] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[46] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[45] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[45] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[44] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[44] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[43] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[43] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[42] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[42] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[41] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[41] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[40] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[40] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[39] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[39] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[38] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[38] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[37] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[37] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[36] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[36] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[35] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[35] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[34] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[34] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[33] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[33] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[32] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[32] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[31] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[31] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[30] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[30] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[29] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[29] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[28] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[28] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[27] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[27] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[26] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[26] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[25] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[25] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[24] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[24] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[23] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[23] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[22] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[22] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[21] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[21] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[20] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[20] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[19] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[19] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[18] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[18] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[17] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[17] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[16] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[16] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[15] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[15] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[14] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[14] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[13] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[13] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[12] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[12] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[11] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[11] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[10] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[10] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[9] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[9] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[8] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[8] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[7] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[7] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[6] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[6] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[5] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[5] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[4] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[4] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[3] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[3] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[2] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[2] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[1] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[1] = binary.BigEndian.Uint64(y_bytes[464:472])

	//z := (*[59]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[59]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [60]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)

	t[59], D = bits.Add64(t[59], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	t[58], C = bits.Add64(t[59], C, 0)
	t[59], _ = bits.Add64(0, D, C)

	for j := 1; j < 59; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		t[59], D = bits.Add64(t[59], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		t[58], C = bits.Add64(t[59], C, 0)
		t[59], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)

	if D != 0 && t[59] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[59])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[58])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[57])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[56])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[55])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[54])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[53])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[52])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[51])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[50])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[49])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[48])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[47])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[46])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[45])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[44])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[43])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[42])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[41])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[40])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[39])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[38])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[37])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[36])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[35])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[34])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[33])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[32])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[31])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[30])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[29])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[28])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[27])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[26])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[25])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[24])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[23])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[22])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[21])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[20])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[19])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[18])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[17])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[16])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[15])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[14])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[13])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[12])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[11])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[10])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[9])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[8])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[7])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[6])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[5])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[4])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[3])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[2])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3840(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [60]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[59] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[59] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[58] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[58] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[57] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[57] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[56] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[56] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[55] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[55] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[54] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[54] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[53] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[53] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[52] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[52] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[51] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[51] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[50] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[50] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[49] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[49] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[48] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[48] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[47] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[47] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[46] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[46] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[45] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[45] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[44] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[44] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[43] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[43] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[42] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[42] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[41] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[41] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[40] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[40] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[39] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[39] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[38] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[38] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[37] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[37] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[36] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[36] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[35] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[35] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[34] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[34] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[33] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[33] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[32] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[32] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[31] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[31] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[30] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[30] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[29] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[29] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[28] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[28] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[27] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[27] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[26] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[26] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[25] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[25] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[24] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[24] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[23] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[23] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[22] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[22] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[21] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[21] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[20] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[20] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[19] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[19] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[18] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[18] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[17] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[17] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[16] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[16] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[15] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[15] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[14] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[14] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[13] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[13] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[12] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[12] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[11] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[11] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[10] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[10] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[9] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[9] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[8] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[8] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[7] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[7] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[6] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[6] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[5] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[5] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[4] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[4] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[3] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[3] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[2] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[2] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[1] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[1] = binary.BigEndian.Uint64(y_bytes[472:480])

	//z := (*[60]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[60]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [61]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)
	C, t[59] = madd1(x[0], y[59], C)

	t[60], D = bits.Add64(t[60], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	C, t[58] = madd2(m, mod[59], t[59], C)
	t[59], C = bits.Add64(t[60], C, 0)
	t[60], _ = bits.Add64(0, D, C)

	for j := 1; j < 60; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		C, t[59] = madd2(x[j], y[59], t[59], C)
		t[60], D = bits.Add64(t[60], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		C, t[58] = madd2(m, mod[59], t[59], C)
		t[59], C = bits.Add64(t[60], C, 0)
		t[60], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)
	tmp_val, D = bits.Sub64(t[59], mod[59], D)
	binary.BigEndian.PutUint64(z_bytes[472:480], tmp_val)

	if D != 0 && t[60] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[60])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[59])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[58])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[57])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[56])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[55])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[54])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[53])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[52])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[51])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[50])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[49])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[48])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[47])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[46])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[45])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[44])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[43])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[42])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[41])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[40])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[39])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[38])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[37])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[36])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[35])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[34])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[33])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[32])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[31])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[30])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[29])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[28])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[27])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[26])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[25])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[24])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[23])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[22])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[21])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[20])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[19])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[18])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[17])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[16])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[15])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[14])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[13])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[12])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[11])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[10])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[9])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[8])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[7])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[6])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[5])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[4])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[3])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[2])
		binary.BigEndian.PutUint64(z_bytes[472:480], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3904(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [61]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[60] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[60] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[59] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[59] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[58] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[58] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[57] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[57] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[56] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[56] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[55] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[55] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[54] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[54] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[53] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[53] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[52] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[52] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[51] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[51] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[50] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[50] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[49] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[49] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[48] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[48] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[47] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[47] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[46] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[46] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[45] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[45] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[44] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[44] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[43] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[43] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[42] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[42] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[41] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[41] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[40] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[40] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[39] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[39] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[38] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[38] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[37] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[37] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[36] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[36] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[35] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[35] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[34] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[34] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[33] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[33] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[32] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[32] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[31] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[31] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[30] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[30] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[29] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[29] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[28] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[28] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[27] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[27] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[26] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[26] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[25] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[25] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[24] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[24] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[23] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[23] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[22] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[22] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[21] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[21] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[20] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[20] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[19] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[19] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[18] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[18] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[17] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[17] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[16] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[16] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[15] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[15] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[14] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[14] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[13] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[13] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[12] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[12] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[11] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[11] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[10] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[10] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[9] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[9] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[8] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[8] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[7] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[7] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[6] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[6] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[5] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[5] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[4] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[4] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[3] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[3] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[2] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[2] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[1] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[1] = binary.BigEndian.Uint64(y_bytes[480:488])

	//z := (*[61]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[61]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [62]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)
	C, t[59] = madd1(x[0], y[59], C)
	C, t[60] = madd1(x[0], y[60], C)

	t[61], D = bits.Add64(t[61], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	C, t[58] = madd2(m, mod[59], t[59], C)
	C, t[59] = madd2(m, mod[60], t[60], C)
	t[60], C = bits.Add64(t[61], C, 0)
	t[61], _ = bits.Add64(0, D, C)

	for j := 1; j < 61; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		C, t[59] = madd2(x[j], y[59], t[59], C)
		C, t[60] = madd2(x[j], y[60], t[60], C)
		t[61], D = bits.Add64(t[61], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		C, t[58] = madd2(m, mod[59], t[59], C)
		C, t[59] = madd2(m, mod[60], t[60], C)
		t[60], C = bits.Add64(t[61], C, 0)
		t[61], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)
	tmp_val, D = bits.Sub64(t[59], mod[59], D)
	binary.BigEndian.PutUint64(z_bytes[472:480], tmp_val)
	tmp_val, D = bits.Sub64(t[60], mod[60], D)
	binary.BigEndian.PutUint64(z_bytes[480:488], tmp_val)

	if D != 0 && t[61] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[61])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[60])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[59])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[58])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[57])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[56])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[55])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[54])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[53])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[52])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[51])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[50])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[49])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[48])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[47])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[46])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[45])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[44])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[43])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[42])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[41])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[40])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[39])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[38])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[37])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[36])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[35])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[34])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[33])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[32])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[31])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[30])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[29])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[28])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[27])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[26])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[25])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[24])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[23])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[22])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[21])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[20])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[19])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[18])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[17])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[16])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[15])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[14])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[13])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[12])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[11])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[10])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[9])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[8])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[7])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[6])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[5])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[4])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[3])
		binary.BigEndian.PutUint64(z_bytes[472:480], t[2])
		binary.BigEndian.PutUint64(z_bytes[480:488], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled3968(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [62]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[61] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[61] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[60] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[60] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[59] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[59] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[58] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[58] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[57] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[57] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[56] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[56] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[55] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[55] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[54] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[54] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[53] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[53] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[52] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[52] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[51] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[51] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[50] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[50] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[49] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[49] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[48] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[48] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[47] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[47] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[46] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[46] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[45] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[45] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[44] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[44] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[43] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[43] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[42] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[42] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[41] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[41] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[40] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[40] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[39] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[39] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[38] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[38] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[37] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[37] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[36] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[36] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[35] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[35] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[34] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[34] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[33] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[33] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[32] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[32] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[31] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[31] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[30] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[30] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[29] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[29] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[28] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[28] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[27] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[27] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[26] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[26] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[25] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[25] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[24] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[24] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[23] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[23] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[22] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[22] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[21] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[21] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[20] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[20] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[19] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[19] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[18] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[18] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[17] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[17] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[16] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[16] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[15] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[15] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[14] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[14] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[13] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[13] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[12] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[12] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[11] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[11] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[10] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[10] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[9] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[9] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[8] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[8] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[7] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[7] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[6] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[6] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[5] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[5] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[4] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[4] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[3] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[3] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[2] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[2] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[1] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[1] = binary.BigEndian.Uint64(y_bytes[488:496])

	//z := (*[62]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[62]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [63]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)
	C, t[59] = madd1(x[0], y[59], C)
	C, t[60] = madd1(x[0], y[60], C)
	C, t[61] = madd1(x[0], y[61], C)

	t[62], D = bits.Add64(t[62], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	C, t[58] = madd2(m, mod[59], t[59], C)
	C, t[59] = madd2(m, mod[60], t[60], C)
	C, t[60] = madd2(m, mod[61], t[61], C)
	t[61], C = bits.Add64(t[62], C, 0)
	t[62], _ = bits.Add64(0, D, C)

	for j := 1; j < 62; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		C, t[59] = madd2(x[j], y[59], t[59], C)
		C, t[60] = madd2(x[j], y[60], t[60], C)
		C, t[61] = madd2(x[j], y[61], t[61], C)
		t[62], D = bits.Add64(t[62], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		C, t[58] = madd2(m, mod[59], t[59], C)
		C, t[59] = madd2(m, mod[60], t[60], C)
		C, t[60] = madd2(m, mod[61], t[61], C)
		t[61], C = bits.Add64(t[62], C, 0)
		t[62], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)
	tmp_val, D = bits.Sub64(t[59], mod[59], D)
	binary.BigEndian.PutUint64(z_bytes[472:480], tmp_val)
	tmp_val, D = bits.Sub64(t[60], mod[60], D)
	binary.BigEndian.PutUint64(z_bytes[480:488], tmp_val)
	tmp_val, D = bits.Sub64(t[61], mod[61], D)
	binary.BigEndian.PutUint64(z_bytes[488:496], tmp_val)

	if D != 0 && t[62] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[62])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[61])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[60])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[59])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[58])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[57])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[56])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[55])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[54])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[53])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[52])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[51])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[50])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[49])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[48])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[47])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[46])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[45])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[44])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[43])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[42])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[41])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[40])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[39])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[38])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[37])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[36])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[35])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[34])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[33])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[32])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[31])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[30])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[29])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[28])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[27])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[26])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[25])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[24])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[23])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[22])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[21])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[20])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[19])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[18])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[17])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[16])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[15])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[14])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[13])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[12])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[11])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[10])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[9])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[8])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[7])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[6])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[5])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[4])
		binary.BigEndian.PutUint64(z_bytes[472:480], t[3])
		binary.BigEndian.PutUint64(z_bytes[480:488], t[2])
		binary.BigEndian.PutUint64(z_bytes[488:496], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled4032(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [63]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[62] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[62] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[61] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[61] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[60] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[60] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[59] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[59] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[58] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[58] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[57] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[57] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[56] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[56] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[55] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[55] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[54] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[54] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[53] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[53] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[52] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[52] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[51] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[51] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[50] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[50] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[49] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[49] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[48] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[48] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[47] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[47] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[46] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[46] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[45] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[45] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[44] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[44] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[43] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[43] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[42] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[42] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[41] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[41] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[40] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[40] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[39] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[39] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[38] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[38] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[37] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[37] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[36] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[36] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[35] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[35] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[34] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[34] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[33] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[33] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[32] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[32] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[31] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[31] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[30] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[30] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[29] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[29] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[28] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[28] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[27] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[27] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[26] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[26] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[25] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[25] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[24] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[24] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[23] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[23] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[22] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[22] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[21] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[21] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[20] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[20] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[19] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[19] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[18] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[18] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[17] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[17] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[16] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[16] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[15] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[15] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[14] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[14] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[13] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[13] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[12] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[12] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[11] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[11] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[10] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[10] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[9] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[9] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[8] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[8] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[7] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[7] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[6] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[6] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[5] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[5] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[4] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[4] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[3] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[3] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[2] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[2] = binary.BigEndian.Uint64(y_bytes[488:496])
	x[1] = binary.BigEndian.Uint64(x_bytes[496:504])
	y[1] = binary.BigEndian.Uint64(y_bytes[496:504])

	//z := (*[63]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[63]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [64]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC1 = bits.Sub64(mod[62], x[62], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)
	_, gteC2 = bits.Sub64(mod[62], y[62], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)
	C, t[59] = madd1(x[0], y[59], C)
	C, t[60] = madd1(x[0], y[60], C)
	C, t[61] = madd1(x[0], y[61], C)
	C, t[62] = madd1(x[0], y[62], C)

	t[63], D = bits.Add64(t[63], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	C, t[58] = madd2(m, mod[59], t[59], C)
	C, t[59] = madd2(m, mod[60], t[60], C)
	C, t[60] = madd2(m, mod[61], t[61], C)
	C, t[61] = madd2(m, mod[62], t[62], C)
	t[62], C = bits.Add64(t[63], C, 0)
	t[63], _ = bits.Add64(0, D, C)

	for j := 1; j < 63; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		C, t[59] = madd2(x[j], y[59], t[59], C)
		C, t[60] = madd2(x[j], y[60], t[60], C)
		C, t[61] = madd2(x[j], y[61], t[61], C)
		C, t[62] = madd2(x[j], y[62], t[62], C)
		t[63], D = bits.Add64(t[63], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		C, t[58] = madd2(m, mod[59], t[59], C)
		C, t[59] = madd2(m, mod[60], t[60], C)
		C, t[60] = madd2(m, mod[61], t[61], C)
		C, t[61] = madd2(m, mod[62], t[62], C)
		t[62], C = bits.Add64(t[63], C, 0)
		t[63], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)
	tmp_val, D = bits.Sub64(t[59], mod[59], D)
	binary.BigEndian.PutUint64(z_bytes[472:480], tmp_val)
	tmp_val, D = bits.Sub64(t[60], mod[60], D)
	binary.BigEndian.PutUint64(z_bytes[480:488], tmp_val)
	tmp_val, D = bits.Sub64(t[61], mod[61], D)
	binary.BigEndian.PutUint64(z_bytes[488:496], tmp_val)
	tmp_val, D = bits.Sub64(t[62], mod[62], D)
	binary.BigEndian.PutUint64(z_bytes[496:504], tmp_val)

	if D != 0 && t[63] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[63])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[62])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[61])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[60])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[59])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[58])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[57])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[56])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[55])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[54])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[53])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[52])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[51])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[50])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[49])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[48])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[47])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[46])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[45])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[44])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[43])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[42])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[41])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[40])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[39])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[38])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[37])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[36])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[35])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[34])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[33])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[32])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[31])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[30])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[29])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[28])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[27])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[26])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[25])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[24])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[23])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[22])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[21])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[20])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[19])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[18])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[17])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[16])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[15])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[14])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[13])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[12])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[11])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[10])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[9])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[8])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[7])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[6])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[5])
		binary.BigEndian.PutUint64(z_bytes[472:480], t[4])
		binary.BigEndian.PutUint64(z_bytes[480:488], t[3])
		binary.BigEndian.PutUint64(z_bytes[488:496], t[2])
		binary.BigEndian.PutUint64(z_bytes[496:504], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}

func MulMontNonUnrolled4096(ctx *Field, z_bytes, x_bytes, y_bytes []byte) error {
	var x, y [64]uint64

	// conversion to little-endian limb-order, system limb-endianess
	x[63] = binary.BigEndian.Uint64(x_bytes[8:16])
	y[63] = binary.BigEndian.Uint64(y_bytes[8:16])
	x[62] = binary.BigEndian.Uint64(x_bytes[16:24])
	y[62] = binary.BigEndian.Uint64(y_bytes[16:24])
	x[61] = binary.BigEndian.Uint64(x_bytes[24:32])
	y[61] = binary.BigEndian.Uint64(y_bytes[24:32])
	x[60] = binary.BigEndian.Uint64(x_bytes[32:40])
	y[60] = binary.BigEndian.Uint64(y_bytes[32:40])
	x[59] = binary.BigEndian.Uint64(x_bytes[40:48])
	y[59] = binary.BigEndian.Uint64(y_bytes[40:48])
	x[58] = binary.BigEndian.Uint64(x_bytes[48:56])
	y[58] = binary.BigEndian.Uint64(y_bytes[48:56])
	x[57] = binary.BigEndian.Uint64(x_bytes[56:64])
	y[57] = binary.BigEndian.Uint64(y_bytes[56:64])
	x[56] = binary.BigEndian.Uint64(x_bytes[64:72])
	y[56] = binary.BigEndian.Uint64(y_bytes[64:72])
	x[55] = binary.BigEndian.Uint64(x_bytes[72:80])
	y[55] = binary.BigEndian.Uint64(y_bytes[72:80])
	x[54] = binary.BigEndian.Uint64(x_bytes[80:88])
	y[54] = binary.BigEndian.Uint64(y_bytes[80:88])
	x[53] = binary.BigEndian.Uint64(x_bytes[88:96])
	y[53] = binary.BigEndian.Uint64(y_bytes[88:96])
	x[52] = binary.BigEndian.Uint64(x_bytes[96:104])
	y[52] = binary.BigEndian.Uint64(y_bytes[96:104])
	x[51] = binary.BigEndian.Uint64(x_bytes[104:112])
	y[51] = binary.BigEndian.Uint64(y_bytes[104:112])
	x[50] = binary.BigEndian.Uint64(x_bytes[112:120])
	y[50] = binary.BigEndian.Uint64(y_bytes[112:120])
	x[49] = binary.BigEndian.Uint64(x_bytes[120:128])
	y[49] = binary.BigEndian.Uint64(y_bytes[120:128])
	x[48] = binary.BigEndian.Uint64(x_bytes[128:136])
	y[48] = binary.BigEndian.Uint64(y_bytes[128:136])
	x[47] = binary.BigEndian.Uint64(x_bytes[136:144])
	y[47] = binary.BigEndian.Uint64(y_bytes[136:144])
	x[46] = binary.BigEndian.Uint64(x_bytes[144:152])
	y[46] = binary.BigEndian.Uint64(y_bytes[144:152])
	x[45] = binary.BigEndian.Uint64(x_bytes[152:160])
	y[45] = binary.BigEndian.Uint64(y_bytes[152:160])
	x[44] = binary.BigEndian.Uint64(x_bytes[160:168])
	y[44] = binary.BigEndian.Uint64(y_bytes[160:168])
	x[43] = binary.BigEndian.Uint64(x_bytes[168:176])
	y[43] = binary.BigEndian.Uint64(y_bytes[168:176])
	x[42] = binary.BigEndian.Uint64(x_bytes[176:184])
	y[42] = binary.BigEndian.Uint64(y_bytes[176:184])
	x[41] = binary.BigEndian.Uint64(x_bytes[184:192])
	y[41] = binary.BigEndian.Uint64(y_bytes[184:192])
	x[40] = binary.BigEndian.Uint64(x_bytes[192:200])
	y[40] = binary.BigEndian.Uint64(y_bytes[192:200])
	x[39] = binary.BigEndian.Uint64(x_bytes[200:208])
	y[39] = binary.BigEndian.Uint64(y_bytes[200:208])
	x[38] = binary.BigEndian.Uint64(x_bytes[208:216])
	y[38] = binary.BigEndian.Uint64(y_bytes[208:216])
	x[37] = binary.BigEndian.Uint64(x_bytes[216:224])
	y[37] = binary.BigEndian.Uint64(y_bytes[216:224])
	x[36] = binary.BigEndian.Uint64(x_bytes[224:232])
	y[36] = binary.BigEndian.Uint64(y_bytes[224:232])
	x[35] = binary.BigEndian.Uint64(x_bytes[232:240])
	y[35] = binary.BigEndian.Uint64(y_bytes[232:240])
	x[34] = binary.BigEndian.Uint64(x_bytes[240:248])
	y[34] = binary.BigEndian.Uint64(y_bytes[240:248])
	x[33] = binary.BigEndian.Uint64(x_bytes[248:256])
	y[33] = binary.BigEndian.Uint64(y_bytes[248:256])
	x[32] = binary.BigEndian.Uint64(x_bytes[256:264])
	y[32] = binary.BigEndian.Uint64(y_bytes[256:264])
	x[31] = binary.BigEndian.Uint64(x_bytes[264:272])
	y[31] = binary.BigEndian.Uint64(y_bytes[264:272])
	x[30] = binary.BigEndian.Uint64(x_bytes[272:280])
	y[30] = binary.BigEndian.Uint64(y_bytes[272:280])
	x[29] = binary.BigEndian.Uint64(x_bytes[280:288])
	y[29] = binary.BigEndian.Uint64(y_bytes[280:288])
	x[28] = binary.BigEndian.Uint64(x_bytes[288:296])
	y[28] = binary.BigEndian.Uint64(y_bytes[288:296])
	x[27] = binary.BigEndian.Uint64(x_bytes[296:304])
	y[27] = binary.BigEndian.Uint64(y_bytes[296:304])
	x[26] = binary.BigEndian.Uint64(x_bytes[304:312])
	y[26] = binary.BigEndian.Uint64(y_bytes[304:312])
	x[25] = binary.BigEndian.Uint64(x_bytes[312:320])
	y[25] = binary.BigEndian.Uint64(y_bytes[312:320])
	x[24] = binary.BigEndian.Uint64(x_bytes[320:328])
	y[24] = binary.BigEndian.Uint64(y_bytes[320:328])
	x[23] = binary.BigEndian.Uint64(x_bytes[328:336])
	y[23] = binary.BigEndian.Uint64(y_bytes[328:336])
	x[22] = binary.BigEndian.Uint64(x_bytes[336:344])
	y[22] = binary.BigEndian.Uint64(y_bytes[336:344])
	x[21] = binary.BigEndian.Uint64(x_bytes[344:352])
	y[21] = binary.BigEndian.Uint64(y_bytes[344:352])
	x[20] = binary.BigEndian.Uint64(x_bytes[352:360])
	y[20] = binary.BigEndian.Uint64(y_bytes[352:360])
	x[19] = binary.BigEndian.Uint64(x_bytes[360:368])
	y[19] = binary.BigEndian.Uint64(y_bytes[360:368])
	x[18] = binary.BigEndian.Uint64(x_bytes[368:376])
	y[18] = binary.BigEndian.Uint64(y_bytes[368:376])
	x[17] = binary.BigEndian.Uint64(x_bytes[376:384])
	y[17] = binary.BigEndian.Uint64(y_bytes[376:384])
	x[16] = binary.BigEndian.Uint64(x_bytes[384:392])
	y[16] = binary.BigEndian.Uint64(y_bytes[384:392])
	x[15] = binary.BigEndian.Uint64(x_bytes[392:400])
	y[15] = binary.BigEndian.Uint64(y_bytes[392:400])
	x[14] = binary.BigEndian.Uint64(x_bytes[400:408])
	y[14] = binary.BigEndian.Uint64(y_bytes[400:408])
	x[13] = binary.BigEndian.Uint64(x_bytes[408:416])
	y[13] = binary.BigEndian.Uint64(y_bytes[408:416])
	x[12] = binary.BigEndian.Uint64(x_bytes[416:424])
	y[12] = binary.BigEndian.Uint64(y_bytes[416:424])
	x[11] = binary.BigEndian.Uint64(x_bytes[424:432])
	y[11] = binary.BigEndian.Uint64(y_bytes[424:432])
	x[10] = binary.BigEndian.Uint64(x_bytes[432:440])
	y[10] = binary.BigEndian.Uint64(y_bytes[432:440])
	x[9] = binary.BigEndian.Uint64(x_bytes[440:448])
	y[9] = binary.BigEndian.Uint64(y_bytes[440:448])
	x[8] = binary.BigEndian.Uint64(x_bytes[448:456])
	y[8] = binary.BigEndian.Uint64(y_bytes[448:456])
	x[7] = binary.BigEndian.Uint64(x_bytes[456:464])
	y[7] = binary.BigEndian.Uint64(y_bytes[456:464])
	x[6] = binary.BigEndian.Uint64(x_bytes[464:472])
	y[6] = binary.BigEndian.Uint64(y_bytes[464:472])
	x[5] = binary.BigEndian.Uint64(x_bytes[472:480])
	y[5] = binary.BigEndian.Uint64(y_bytes[472:480])
	x[4] = binary.BigEndian.Uint64(x_bytes[480:488])
	y[4] = binary.BigEndian.Uint64(y_bytes[480:488])
	x[3] = binary.BigEndian.Uint64(x_bytes[488:496])
	y[3] = binary.BigEndian.Uint64(y_bytes[488:496])
	x[2] = binary.BigEndian.Uint64(x_bytes[496:504])
	y[2] = binary.BigEndian.Uint64(y_bytes[496:504])
	x[1] = binary.BigEndian.Uint64(x_bytes[504:512])
	y[1] = binary.BigEndian.Uint64(y_bytes[504:512])

	//z := (*[64]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[64]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]
	var t [65]uint64
	var D uint64
	var m, C uint64

	var gteC1, gteC2 uint64
	_, gteC1 = bits.Sub64(mod[0], x[0], gteC1)
	_, gteC1 = bits.Sub64(mod[1], x[1], gteC1)
	_, gteC1 = bits.Sub64(mod[2], x[2], gteC1)
	_, gteC1 = bits.Sub64(mod[3], x[3], gteC1)
	_, gteC1 = bits.Sub64(mod[4], x[4], gteC1)
	_, gteC1 = bits.Sub64(mod[5], x[5], gteC1)
	_, gteC1 = bits.Sub64(mod[6], x[6], gteC1)
	_, gteC1 = bits.Sub64(mod[7], x[7], gteC1)
	_, gteC1 = bits.Sub64(mod[8], x[8], gteC1)
	_, gteC1 = bits.Sub64(mod[9], x[9], gteC1)
	_, gteC1 = bits.Sub64(mod[10], x[10], gteC1)
	_, gteC1 = bits.Sub64(mod[11], x[11], gteC1)
	_, gteC1 = bits.Sub64(mod[12], x[12], gteC1)
	_, gteC1 = bits.Sub64(mod[13], x[13], gteC1)
	_, gteC1 = bits.Sub64(mod[14], x[14], gteC1)
	_, gteC1 = bits.Sub64(mod[15], x[15], gteC1)
	_, gteC1 = bits.Sub64(mod[16], x[16], gteC1)
	_, gteC1 = bits.Sub64(mod[17], x[17], gteC1)
	_, gteC1 = bits.Sub64(mod[18], x[18], gteC1)
	_, gteC1 = bits.Sub64(mod[19], x[19], gteC1)
	_, gteC1 = bits.Sub64(mod[20], x[20], gteC1)
	_, gteC1 = bits.Sub64(mod[21], x[21], gteC1)
	_, gteC1 = bits.Sub64(mod[22], x[22], gteC1)
	_, gteC1 = bits.Sub64(mod[23], x[23], gteC1)
	_, gteC1 = bits.Sub64(mod[24], x[24], gteC1)
	_, gteC1 = bits.Sub64(mod[25], x[25], gteC1)
	_, gteC1 = bits.Sub64(mod[26], x[26], gteC1)
	_, gteC1 = bits.Sub64(mod[27], x[27], gteC1)
	_, gteC1 = bits.Sub64(mod[28], x[28], gteC1)
	_, gteC1 = bits.Sub64(mod[29], x[29], gteC1)
	_, gteC1 = bits.Sub64(mod[30], x[30], gteC1)
	_, gteC1 = bits.Sub64(mod[31], x[31], gteC1)
	_, gteC1 = bits.Sub64(mod[32], x[32], gteC1)
	_, gteC1 = bits.Sub64(mod[33], x[33], gteC1)
	_, gteC1 = bits.Sub64(mod[34], x[34], gteC1)
	_, gteC1 = bits.Sub64(mod[35], x[35], gteC1)
	_, gteC1 = bits.Sub64(mod[36], x[36], gteC1)
	_, gteC1 = bits.Sub64(mod[37], x[37], gteC1)
	_, gteC1 = bits.Sub64(mod[38], x[38], gteC1)
	_, gteC1 = bits.Sub64(mod[39], x[39], gteC1)
	_, gteC1 = bits.Sub64(mod[40], x[40], gteC1)
	_, gteC1 = bits.Sub64(mod[41], x[41], gteC1)
	_, gteC1 = bits.Sub64(mod[42], x[42], gteC1)
	_, gteC1 = bits.Sub64(mod[43], x[43], gteC1)
	_, gteC1 = bits.Sub64(mod[44], x[44], gteC1)
	_, gteC1 = bits.Sub64(mod[45], x[45], gteC1)
	_, gteC1 = bits.Sub64(mod[46], x[46], gteC1)
	_, gteC1 = bits.Sub64(mod[47], x[47], gteC1)
	_, gteC1 = bits.Sub64(mod[48], x[48], gteC1)
	_, gteC1 = bits.Sub64(mod[49], x[49], gteC1)
	_, gteC1 = bits.Sub64(mod[50], x[50], gteC1)
	_, gteC1 = bits.Sub64(mod[51], x[51], gteC1)
	_, gteC1 = bits.Sub64(mod[52], x[52], gteC1)
	_, gteC1 = bits.Sub64(mod[53], x[53], gteC1)
	_, gteC1 = bits.Sub64(mod[54], x[54], gteC1)
	_, gteC1 = bits.Sub64(mod[55], x[55], gteC1)
	_, gteC1 = bits.Sub64(mod[56], x[56], gteC1)
	_, gteC1 = bits.Sub64(mod[57], x[57], gteC1)
	_, gteC1 = bits.Sub64(mod[58], x[58], gteC1)
	_, gteC1 = bits.Sub64(mod[59], x[59], gteC1)
	_, gteC1 = bits.Sub64(mod[60], x[60], gteC1)
	_, gteC1 = bits.Sub64(mod[61], x[61], gteC1)
	_, gteC1 = bits.Sub64(mod[62], x[62], gteC1)
	_, gteC1 = bits.Sub64(mod[63], x[63], gteC1)
	_, gteC2 = bits.Sub64(mod[0], y[0], gteC2)
	_, gteC2 = bits.Sub64(mod[1], y[1], gteC2)
	_, gteC2 = bits.Sub64(mod[2], y[2], gteC2)
	_, gteC2 = bits.Sub64(mod[3], y[3], gteC2)
	_, gteC2 = bits.Sub64(mod[4], y[4], gteC2)
	_, gteC2 = bits.Sub64(mod[5], y[5], gteC2)
	_, gteC2 = bits.Sub64(mod[6], y[6], gteC2)
	_, gteC2 = bits.Sub64(mod[7], y[7], gteC2)
	_, gteC2 = bits.Sub64(mod[8], y[8], gteC2)
	_, gteC2 = bits.Sub64(mod[9], y[9], gteC2)
	_, gteC2 = bits.Sub64(mod[10], y[10], gteC2)
	_, gteC2 = bits.Sub64(mod[11], y[11], gteC2)
	_, gteC2 = bits.Sub64(mod[12], y[12], gteC2)
	_, gteC2 = bits.Sub64(mod[13], y[13], gteC2)
	_, gteC2 = bits.Sub64(mod[14], y[14], gteC2)
	_, gteC2 = bits.Sub64(mod[15], y[15], gteC2)
	_, gteC2 = bits.Sub64(mod[16], y[16], gteC2)
	_, gteC2 = bits.Sub64(mod[17], y[17], gteC2)
	_, gteC2 = bits.Sub64(mod[18], y[18], gteC2)
	_, gteC2 = bits.Sub64(mod[19], y[19], gteC2)
	_, gteC2 = bits.Sub64(mod[20], y[20], gteC2)
	_, gteC2 = bits.Sub64(mod[21], y[21], gteC2)
	_, gteC2 = bits.Sub64(mod[22], y[22], gteC2)
	_, gteC2 = bits.Sub64(mod[23], y[23], gteC2)
	_, gteC2 = bits.Sub64(mod[24], y[24], gteC2)
	_, gteC2 = bits.Sub64(mod[25], y[25], gteC2)
	_, gteC2 = bits.Sub64(mod[26], y[26], gteC2)
	_, gteC2 = bits.Sub64(mod[27], y[27], gteC2)
	_, gteC2 = bits.Sub64(mod[28], y[28], gteC2)
	_, gteC2 = bits.Sub64(mod[29], y[29], gteC2)
	_, gteC2 = bits.Sub64(mod[30], y[30], gteC2)
	_, gteC2 = bits.Sub64(mod[31], y[31], gteC2)
	_, gteC2 = bits.Sub64(mod[32], y[32], gteC2)
	_, gteC2 = bits.Sub64(mod[33], y[33], gteC2)
	_, gteC2 = bits.Sub64(mod[34], y[34], gteC2)
	_, gteC2 = bits.Sub64(mod[35], y[35], gteC2)
	_, gteC2 = bits.Sub64(mod[36], y[36], gteC2)
	_, gteC2 = bits.Sub64(mod[37], y[37], gteC2)
	_, gteC2 = bits.Sub64(mod[38], y[38], gteC2)
	_, gteC2 = bits.Sub64(mod[39], y[39], gteC2)
	_, gteC2 = bits.Sub64(mod[40], y[40], gteC2)
	_, gteC2 = bits.Sub64(mod[41], y[41], gteC2)
	_, gteC2 = bits.Sub64(mod[42], y[42], gteC2)
	_, gteC2 = bits.Sub64(mod[43], y[43], gteC2)
	_, gteC2 = bits.Sub64(mod[44], y[44], gteC2)
	_, gteC2 = bits.Sub64(mod[45], y[45], gteC2)
	_, gteC2 = bits.Sub64(mod[46], y[46], gteC2)
	_, gteC2 = bits.Sub64(mod[47], y[47], gteC2)
	_, gteC2 = bits.Sub64(mod[48], y[48], gteC2)
	_, gteC2 = bits.Sub64(mod[49], y[49], gteC2)
	_, gteC2 = bits.Sub64(mod[50], y[50], gteC2)
	_, gteC2 = bits.Sub64(mod[51], y[51], gteC2)
	_, gteC2 = bits.Sub64(mod[52], y[52], gteC2)
	_, gteC2 = bits.Sub64(mod[53], y[53], gteC2)
	_, gteC2 = bits.Sub64(mod[54], y[54], gteC2)
	_, gteC2 = bits.Sub64(mod[55], y[55], gteC2)
	_, gteC2 = bits.Sub64(mod[56], y[56], gteC2)
	_, gteC2 = bits.Sub64(mod[57], y[57], gteC2)
	_, gteC2 = bits.Sub64(mod[58], y[58], gteC2)
	_, gteC2 = bits.Sub64(mod[59], y[59], gteC2)
	_, gteC2 = bits.Sub64(mod[60], y[60], gteC2)
	_, gteC2 = bits.Sub64(mod[61], y[61], gteC2)
	_, gteC2 = bits.Sub64(mod[62], y[62], gteC2)
	_, gteC2 = bits.Sub64(mod[63], y[63], gteC2)

	/*
	   fmt.Println()
	   fmt.Println()
	   fmt.Println("foo")
	   fmt.Println(x)
	   fmt.Println(y)
	   fmt.Println(mod)
	*/

	if gteC1 != 0 || gteC2 != 0 {
		return errors.New(fmt.Sprintf("input gte modulus"))
	}

	C, t[0] = bits.Mul64(x[0], y[0])
	C, t[1] = madd1(x[0], y[1], C)
	C, t[2] = madd1(x[0], y[2], C)
	C, t[3] = madd1(x[0], y[3], C)
	C, t[4] = madd1(x[0], y[4], C)
	C, t[5] = madd1(x[0], y[5], C)
	C, t[6] = madd1(x[0], y[6], C)
	C, t[7] = madd1(x[0], y[7], C)
	C, t[8] = madd1(x[0], y[8], C)
	C, t[9] = madd1(x[0], y[9], C)
	C, t[10] = madd1(x[0], y[10], C)
	C, t[11] = madd1(x[0], y[11], C)
	C, t[12] = madd1(x[0], y[12], C)
	C, t[13] = madd1(x[0], y[13], C)
	C, t[14] = madd1(x[0], y[14], C)
	C, t[15] = madd1(x[0], y[15], C)
	C, t[16] = madd1(x[0], y[16], C)
	C, t[17] = madd1(x[0], y[17], C)
	C, t[18] = madd1(x[0], y[18], C)
	C, t[19] = madd1(x[0], y[19], C)
	C, t[20] = madd1(x[0], y[20], C)
	C, t[21] = madd1(x[0], y[21], C)
	C, t[22] = madd1(x[0], y[22], C)
	C, t[23] = madd1(x[0], y[23], C)
	C, t[24] = madd1(x[0], y[24], C)
	C, t[25] = madd1(x[0], y[25], C)
	C, t[26] = madd1(x[0], y[26], C)
	C, t[27] = madd1(x[0], y[27], C)
	C, t[28] = madd1(x[0], y[28], C)
	C, t[29] = madd1(x[0], y[29], C)
	C, t[30] = madd1(x[0], y[30], C)
	C, t[31] = madd1(x[0], y[31], C)
	C, t[32] = madd1(x[0], y[32], C)
	C, t[33] = madd1(x[0], y[33], C)
	C, t[34] = madd1(x[0], y[34], C)
	C, t[35] = madd1(x[0], y[35], C)
	C, t[36] = madd1(x[0], y[36], C)
	C, t[37] = madd1(x[0], y[37], C)
	C, t[38] = madd1(x[0], y[38], C)
	C, t[39] = madd1(x[0], y[39], C)
	C, t[40] = madd1(x[0], y[40], C)
	C, t[41] = madd1(x[0], y[41], C)
	C, t[42] = madd1(x[0], y[42], C)
	C, t[43] = madd1(x[0], y[43], C)
	C, t[44] = madd1(x[0], y[44], C)
	C, t[45] = madd1(x[0], y[45], C)
	C, t[46] = madd1(x[0], y[46], C)
	C, t[47] = madd1(x[0], y[47], C)
	C, t[48] = madd1(x[0], y[48], C)
	C, t[49] = madd1(x[0], y[49], C)
	C, t[50] = madd1(x[0], y[50], C)
	C, t[51] = madd1(x[0], y[51], C)
	C, t[52] = madd1(x[0], y[52], C)
	C, t[53] = madd1(x[0], y[53], C)
	C, t[54] = madd1(x[0], y[54], C)
	C, t[55] = madd1(x[0], y[55], C)
	C, t[56] = madd1(x[0], y[56], C)
	C, t[57] = madd1(x[0], y[57], C)
	C, t[58] = madd1(x[0], y[58], C)
	C, t[59] = madd1(x[0], y[59], C)
	C, t[60] = madd1(x[0], y[60], C)
	C, t[61] = madd1(x[0], y[61], C)
	C, t[62] = madd1(x[0], y[62], C)
	C, t[63] = madd1(x[0], y[63], C)

	t[64], D = bits.Add64(t[64], C, 0)
	// m = t[0]n'[0] mod W
	m = t[0] * ctx.MontParamInterleaved

	// -----------------------------------
	// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
	C = madd0(m, mod[0], t[0])
	C, t[0] = madd2(m, mod[1], t[1], C)
	C, t[1] = madd2(m, mod[2], t[2], C)
	C, t[2] = madd2(m, mod[3], t[3], C)
	C, t[3] = madd2(m, mod[4], t[4], C)
	C, t[4] = madd2(m, mod[5], t[5], C)
	C, t[5] = madd2(m, mod[6], t[6], C)
	C, t[6] = madd2(m, mod[7], t[7], C)
	C, t[7] = madd2(m, mod[8], t[8], C)
	C, t[8] = madd2(m, mod[9], t[9], C)
	C, t[9] = madd2(m, mod[10], t[10], C)
	C, t[10] = madd2(m, mod[11], t[11], C)
	C, t[11] = madd2(m, mod[12], t[12], C)
	C, t[12] = madd2(m, mod[13], t[13], C)
	C, t[13] = madd2(m, mod[14], t[14], C)
	C, t[14] = madd2(m, mod[15], t[15], C)
	C, t[15] = madd2(m, mod[16], t[16], C)
	C, t[16] = madd2(m, mod[17], t[17], C)
	C, t[17] = madd2(m, mod[18], t[18], C)
	C, t[18] = madd2(m, mod[19], t[19], C)
	C, t[19] = madd2(m, mod[20], t[20], C)
	C, t[20] = madd2(m, mod[21], t[21], C)
	C, t[21] = madd2(m, mod[22], t[22], C)
	C, t[22] = madd2(m, mod[23], t[23], C)
	C, t[23] = madd2(m, mod[24], t[24], C)
	C, t[24] = madd2(m, mod[25], t[25], C)
	C, t[25] = madd2(m, mod[26], t[26], C)
	C, t[26] = madd2(m, mod[27], t[27], C)
	C, t[27] = madd2(m, mod[28], t[28], C)
	C, t[28] = madd2(m, mod[29], t[29], C)
	C, t[29] = madd2(m, mod[30], t[30], C)
	C, t[30] = madd2(m, mod[31], t[31], C)
	C, t[31] = madd2(m, mod[32], t[32], C)
	C, t[32] = madd2(m, mod[33], t[33], C)
	C, t[33] = madd2(m, mod[34], t[34], C)
	C, t[34] = madd2(m, mod[35], t[35], C)
	C, t[35] = madd2(m, mod[36], t[36], C)
	C, t[36] = madd2(m, mod[37], t[37], C)
	C, t[37] = madd2(m, mod[38], t[38], C)
	C, t[38] = madd2(m, mod[39], t[39], C)
	C, t[39] = madd2(m, mod[40], t[40], C)
	C, t[40] = madd2(m, mod[41], t[41], C)
	C, t[41] = madd2(m, mod[42], t[42], C)
	C, t[42] = madd2(m, mod[43], t[43], C)
	C, t[43] = madd2(m, mod[44], t[44], C)
	C, t[44] = madd2(m, mod[45], t[45], C)
	C, t[45] = madd2(m, mod[46], t[46], C)
	C, t[46] = madd2(m, mod[47], t[47], C)
	C, t[47] = madd2(m, mod[48], t[48], C)
	C, t[48] = madd2(m, mod[49], t[49], C)
	C, t[49] = madd2(m, mod[50], t[50], C)
	C, t[50] = madd2(m, mod[51], t[51], C)
	C, t[51] = madd2(m, mod[52], t[52], C)
	C, t[52] = madd2(m, mod[53], t[53], C)
	C, t[53] = madd2(m, mod[54], t[54], C)
	C, t[54] = madd2(m, mod[55], t[55], C)
	C, t[55] = madd2(m, mod[56], t[56], C)
	C, t[56] = madd2(m, mod[57], t[57], C)
	C, t[57] = madd2(m, mod[58], t[58], C)
	C, t[58] = madd2(m, mod[59], t[59], C)
	C, t[59] = madd2(m, mod[60], t[60], C)
	C, t[60] = madd2(m, mod[61], t[61], C)
	C, t[61] = madd2(m, mod[62], t[62], C)
	C, t[62] = madd2(m, mod[63], t[63], C)
	t[63], C = bits.Add64(t[64], C, 0)
	t[64], _ = bits.Add64(0, D, C)

	for j := 1; j < 64; j++ {
		//  first inner loop (second iteration)
		C, t[0] = madd1(x[j], y[0], t[0])
		C, t[1] = madd2(x[j], y[1], t[1], C)
		C, t[2] = madd2(x[j], y[2], t[2], C)
		C, t[3] = madd2(x[j], y[3], t[3], C)
		C, t[4] = madd2(x[j], y[4], t[4], C)
		C, t[5] = madd2(x[j], y[5], t[5], C)
		C, t[6] = madd2(x[j], y[6], t[6], C)
		C, t[7] = madd2(x[j], y[7], t[7], C)
		C, t[8] = madd2(x[j], y[8], t[8], C)
		C, t[9] = madd2(x[j], y[9], t[9], C)
		C, t[10] = madd2(x[j], y[10], t[10], C)
		C, t[11] = madd2(x[j], y[11], t[11], C)
		C, t[12] = madd2(x[j], y[12], t[12], C)
		C, t[13] = madd2(x[j], y[13], t[13], C)
		C, t[14] = madd2(x[j], y[14], t[14], C)
		C, t[15] = madd2(x[j], y[15], t[15], C)
		C, t[16] = madd2(x[j], y[16], t[16], C)
		C, t[17] = madd2(x[j], y[17], t[17], C)
		C, t[18] = madd2(x[j], y[18], t[18], C)
		C, t[19] = madd2(x[j], y[19], t[19], C)
		C, t[20] = madd2(x[j], y[20], t[20], C)
		C, t[21] = madd2(x[j], y[21], t[21], C)
		C, t[22] = madd2(x[j], y[22], t[22], C)
		C, t[23] = madd2(x[j], y[23], t[23], C)
		C, t[24] = madd2(x[j], y[24], t[24], C)
		C, t[25] = madd2(x[j], y[25], t[25], C)
		C, t[26] = madd2(x[j], y[26], t[26], C)
		C, t[27] = madd2(x[j], y[27], t[27], C)
		C, t[28] = madd2(x[j], y[28], t[28], C)
		C, t[29] = madd2(x[j], y[29], t[29], C)
		C, t[30] = madd2(x[j], y[30], t[30], C)
		C, t[31] = madd2(x[j], y[31], t[31], C)
		C, t[32] = madd2(x[j], y[32], t[32], C)
		C, t[33] = madd2(x[j], y[33], t[33], C)
		C, t[34] = madd2(x[j], y[34], t[34], C)
		C, t[35] = madd2(x[j], y[35], t[35], C)
		C, t[36] = madd2(x[j], y[36], t[36], C)
		C, t[37] = madd2(x[j], y[37], t[37], C)
		C, t[38] = madd2(x[j], y[38], t[38], C)
		C, t[39] = madd2(x[j], y[39], t[39], C)
		C, t[40] = madd2(x[j], y[40], t[40], C)
		C, t[41] = madd2(x[j], y[41], t[41], C)
		C, t[42] = madd2(x[j], y[42], t[42], C)
		C, t[43] = madd2(x[j], y[43], t[43], C)
		C, t[44] = madd2(x[j], y[44], t[44], C)
		C, t[45] = madd2(x[j], y[45], t[45], C)
		C, t[46] = madd2(x[j], y[46], t[46], C)
		C, t[47] = madd2(x[j], y[47], t[47], C)
		C, t[48] = madd2(x[j], y[48], t[48], C)
		C, t[49] = madd2(x[j], y[49], t[49], C)
		C, t[50] = madd2(x[j], y[50], t[50], C)
		C, t[51] = madd2(x[j], y[51], t[51], C)
		C, t[52] = madd2(x[j], y[52], t[52], C)
		C, t[53] = madd2(x[j], y[53], t[53], C)
		C, t[54] = madd2(x[j], y[54], t[54], C)
		C, t[55] = madd2(x[j], y[55], t[55], C)
		C, t[56] = madd2(x[j], y[56], t[56], C)
		C, t[57] = madd2(x[j], y[57], t[57], C)
		C, t[58] = madd2(x[j], y[58], t[58], C)
		C, t[59] = madd2(x[j], y[59], t[59], C)
		C, t[60] = madd2(x[j], y[60], t[60], C)
		C, t[61] = madd2(x[j], y[61], t[61], C)
		C, t[62] = madd2(x[j], y[62], t[62], C)
		C, t[63] = madd2(x[j], y[63], t[63], C)
		t[64], D = bits.Add64(t[64], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * ctx.MontParamInterleaved

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		C, t[0] = madd2(m, mod[1], t[1], C)
		C, t[1] = madd2(m, mod[2], t[2], C)
		C, t[2] = madd2(m, mod[3], t[3], C)
		C, t[3] = madd2(m, mod[4], t[4], C)
		C, t[4] = madd2(m, mod[5], t[5], C)
		C, t[5] = madd2(m, mod[6], t[6], C)
		C, t[6] = madd2(m, mod[7], t[7], C)
		C, t[7] = madd2(m, mod[8], t[8], C)
		C, t[8] = madd2(m, mod[9], t[9], C)
		C, t[9] = madd2(m, mod[10], t[10], C)
		C, t[10] = madd2(m, mod[11], t[11], C)
		C, t[11] = madd2(m, mod[12], t[12], C)
		C, t[12] = madd2(m, mod[13], t[13], C)
		C, t[13] = madd2(m, mod[14], t[14], C)
		C, t[14] = madd2(m, mod[15], t[15], C)
		C, t[15] = madd2(m, mod[16], t[16], C)
		C, t[16] = madd2(m, mod[17], t[17], C)
		C, t[17] = madd2(m, mod[18], t[18], C)
		C, t[18] = madd2(m, mod[19], t[19], C)
		C, t[19] = madd2(m, mod[20], t[20], C)
		C, t[20] = madd2(m, mod[21], t[21], C)
		C, t[21] = madd2(m, mod[22], t[22], C)
		C, t[22] = madd2(m, mod[23], t[23], C)
		C, t[23] = madd2(m, mod[24], t[24], C)
		C, t[24] = madd2(m, mod[25], t[25], C)
		C, t[25] = madd2(m, mod[26], t[26], C)
		C, t[26] = madd2(m, mod[27], t[27], C)
		C, t[27] = madd2(m, mod[28], t[28], C)
		C, t[28] = madd2(m, mod[29], t[29], C)
		C, t[29] = madd2(m, mod[30], t[30], C)
		C, t[30] = madd2(m, mod[31], t[31], C)
		C, t[31] = madd2(m, mod[32], t[32], C)
		C, t[32] = madd2(m, mod[33], t[33], C)
		C, t[33] = madd2(m, mod[34], t[34], C)
		C, t[34] = madd2(m, mod[35], t[35], C)
		C, t[35] = madd2(m, mod[36], t[36], C)
		C, t[36] = madd2(m, mod[37], t[37], C)
		C, t[37] = madd2(m, mod[38], t[38], C)
		C, t[38] = madd2(m, mod[39], t[39], C)
		C, t[39] = madd2(m, mod[40], t[40], C)
		C, t[40] = madd2(m, mod[41], t[41], C)
		C, t[41] = madd2(m, mod[42], t[42], C)
		C, t[42] = madd2(m, mod[43], t[43], C)
		C, t[43] = madd2(m, mod[44], t[44], C)
		C, t[44] = madd2(m, mod[45], t[45], C)
		C, t[45] = madd2(m, mod[46], t[46], C)
		C, t[46] = madd2(m, mod[47], t[47], C)
		C, t[47] = madd2(m, mod[48], t[48], C)
		C, t[48] = madd2(m, mod[49], t[49], C)
		C, t[49] = madd2(m, mod[50], t[50], C)
		C, t[50] = madd2(m, mod[51], t[51], C)
		C, t[51] = madd2(m, mod[52], t[52], C)
		C, t[52] = madd2(m, mod[53], t[53], C)
		C, t[53] = madd2(m, mod[54], t[54], C)
		C, t[54] = madd2(m, mod[55], t[55], C)
		C, t[55] = madd2(m, mod[56], t[56], C)
		C, t[56] = madd2(m, mod[57], t[57], C)
		C, t[57] = madd2(m, mod[58], t[58], C)
		C, t[58] = madd2(m, mod[59], t[59], C)
		C, t[59] = madd2(m, mod[60], t[60], C)
		C, t[60] = madd2(m, mod[61], t[61], C)
		C, t[61] = madd2(m, mod[62], t[62], C)
		C, t[62] = madd2(m, mod[63], t[63], C)
		t[63], C = bits.Add64(t[64], C, 0)
		t[64], _ = bits.Add64(0, D, C)
	}

	var tmp_val uint64
	tmp_val, D = bits.Sub64(t[0], mod[0], 0)
	binary.BigEndian.PutUint64(z_bytes[0:8], tmp_val)
	tmp_val, D = bits.Sub64(t[1], mod[1], D)
	binary.BigEndian.PutUint64(z_bytes[8:16], tmp_val)
	tmp_val, D = bits.Sub64(t[2], mod[2], D)
	binary.BigEndian.PutUint64(z_bytes[16:24], tmp_val)
	tmp_val, D = bits.Sub64(t[3], mod[3], D)
	binary.BigEndian.PutUint64(z_bytes[24:32], tmp_val)
	tmp_val, D = bits.Sub64(t[4], mod[4], D)
	binary.BigEndian.PutUint64(z_bytes[32:40], tmp_val)
	tmp_val, D = bits.Sub64(t[5], mod[5], D)
	binary.BigEndian.PutUint64(z_bytes[40:48], tmp_val)
	tmp_val, D = bits.Sub64(t[6], mod[6], D)
	binary.BigEndian.PutUint64(z_bytes[48:56], tmp_val)
	tmp_val, D = bits.Sub64(t[7], mod[7], D)
	binary.BigEndian.PutUint64(z_bytes[56:64], tmp_val)
	tmp_val, D = bits.Sub64(t[8], mod[8], D)
	binary.BigEndian.PutUint64(z_bytes[64:72], tmp_val)
	tmp_val, D = bits.Sub64(t[9], mod[9], D)
	binary.BigEndian.PutUint64(z_bytes[72:80], tmp_val)
	tmp_val, D = bits.Sub64(t[10], mod[10], D)
	binary.BigEndian.PutUint64(z_bytes[80:88], tmp_val)
	tmp_val, D = bits.Sub64(t[11], mod[11], D)
	binary.BigEndian.PutUint64(z_bytes[88:96], tmp_val)
	tmp_val, D = bits.Sub64(t[12], mod[12], D)
	binary.BigEndian.PutUint64(z_bytes[96:104], tmp_val)
	tmp_val, D = bits.Sub64(t[13], mod[13], D)
	binary.BigEndian.PutUint64(z_bytes[104:112], tmp_val)
	tmp_val, D = bits.Sub64(t[14], mod[14], D)
	binary.BigEndian.PutUint64(z_bytes[112:120], tmp_val)
	tmp_val, D = bits.Sub64(t[15], mod[15], D)
	binary.BigEndian.PutUint64(z_bytes[120:128], tmp_val)
	tmp_val, D = bits.Sub64(t[16], mod[16], D)
	binary.BigEndian.PutUint64(z_bytes[128:136], tmp_val)
	tmp_val, D = bits.Sub64(t[17], mod[17], D)
	binary.BigEndian.PutUint64(z_bytes[136:144], tmp_val)
	tmp_val, D = bits.Sub64(t[18], mod[18], D)
	binary.BigEndian.PutUint64(z_bytes[144:152], tmp_val)
	tmp_val, D = bits.Sub64(t[19], mod[19], D)
	binary.BigEndian.PutUint64(z_bytes[152:160], tmp_val)
	tmp_val, D = bits.Sub64(t[20], mod[20], D)
	binary.BigEndian.PutUint64(z_bytes[160:168], tmp_val)
	tmp_val, D = bits.Sub64(t[21], mod[21], D)
	binary.BigEndian.PutUint64(z_bytes[168:176], tmp_val)
	tmp_val, D = bits.Sub64(t[22], mod[22], D)
	binary.BigEndian.PutUint64(z_bytes[176:184], tmp_val)
	tmp_val, D = bits.Sub64(t[23], mod[23], D)
	binary.BigEndian.PutUint64(z_bytes[184:192], tmp_val)
	tmp_val, D = bits.Sub64(t[24], mod[24], D)
	binary.BigEndian.PutUint64(z_bytes[192:200], tmp_val)
	tmp_val, D = bits.Sub64(t[25], mod[25], D)
	binary.BigEndian.PutUint64(z_bytes[200:208], tmp_val)
	tmp_val, D = bits.Sub64(t[26], mod[26], D)
	binary.BigEndian.PutUint64(z_bytes[208:216], tmp_val)
	tmp_val, D = bits.Sub64(t[27], mod[27], D)
	binary.BigEndian.PutUint64(z_bytes[216:224], tmp_val)
	tmp_val, D = bits.Sub64(t[28], mod[28], D)
	binary.BigEndian.PutUint64(z_bytes[224:232], tmp_val)
	tmp_val, D = bits.Sub64(t[29], mod[29], D)
	binary.BigEndian.PutUint64(z_bytes[232:240], tmp_val)
	tmp_val, D = bits.Sub64(t[30], mod[30], D)
	binary.BigEndian.PutUint64(z_bytes[240:248], tmp_val)
	tmp_val, D = bits.Sub64(t[31], mod[31], D)
	binary.BigEndian.PutUint64(z_bytes[248:256], tmp_val)
	tmp_val, D = bits.Sub64(t[32], mod[32], D)
	binary.BigEndian.PutUint64(z_bytes[256:264], tmp_val)
	tmp_val, D = bits.Sub64(t[33], mod[33], D)
	binary.BigEndian.PutUint64(z_bytes[264:272], tmp_val)
	tmp_val, D = bits.Sub64(t[34], mod[34], D)
	binary.BigEndian.PutUint64(z_bytes[272:280], tmp_val)
	tmp_val, D = bits.Sub64(t[35], mod[35], D)
	binary.BigEndian.PutUint64(z_bytes[280:288], tmp_val)
	tmp_val, D = bits.Sub64(t[36], mod[36], D)
	binary.BigEndian.PutUint64(z_bytes[288:296], tmp_val)
	tmp_val, D = bits.Sub64(t[37], mod[37], D)
	binary.BigEndian.PutUint64(z_bytes[296:304], tmp_val)
	tmp_val, D = bits.Sub64(t[38], mod[38], D)
	binary.BigEndian.PutUint64(z_bytes[304:312], tmp_val)
	tmp_val, D = bits.Sub64(t[39], mod[39], D)
	binary.BigEndian.PutUint64(z_bytes[312:320], tmp_val)
	tmp_val, D = bits.Sub64(t[40], mod[40], D)
	binary.BigEndian.PutUint64(z_bytes[320:328], tmp_val)
	tmp_val, D = bits.Sub64(t[41], mod[41], D)
	binary.BigEndian.PutUint64(z_bytes[328:336], tmp_val)
	tmp_val, D = bits.Sub64(t[42], mod[42], D)
	binary.BigEndian.PutUint64(z_bytes[336:344], tmp_val)
	tmp_val, D = bits.Sub64(t[43], mod[43], D)
	binary.BigEndian.PutUint64(z_bytes[344:352], tmp_val)
	tmp_val, D = bits.Sub64(t[44], mod[44], D)
	binary.BigEndian.PutUint64(z_bytes[352:360], tmp_val)
	tmp_val, D = bits.Sub64(t[45], mod[45], D)
	binary.BigEndian.PutUint64(z_bytes[360:368], tmp_val)
	tmp_val, D = bits.Sub64(t[46], mod[46], D)
	binary.BigEndian.PutUint64(z_bytes[368:376], tmp_val)
	tmp_val, D = bits.Sub64(t[47], mod[47], D)
	binary.BigEndian.PutUint64(z_bytes[376:384], tmp_val)
	tmp_val, D = bits.Sub64(t[48], mod[48], D)
	binary.BigEndian.PutUint64(z_bytes[384:392], tmp_val)
	tmp_val, D = bits.Sub64(t[49], mod[49], D)
	binary.BigEndian.PutUint64(z_bytes[392:400], tmp_val)
	tmp_val, D = bits.Sub64(t[50], mod[50], D)
	binary.BigEndian.PutUint64(z_bytes[400:408], tmp_val)
	tmp_val, D = bits.Sub64(t[51], mod[51], D)
	binary.BigEndian.PutUint64(z_bytes[408:416], tmp_val)
	tmp_val, D = bits.Sub64(t[52], mod[52], D)
	binary.BigEndian.PutUint64(z_bytes[416:424], tmp_val)
	tmp_val, D = bits.Sub64(t[53], mod[53], D)
	binary.BigEndian.PutUint64(z_bytes[424:432], tmp_val)
	tmp_val, D = bits.Sub64(t[54], mod[54], D)
	binary.BigEndian.PutUint64(z_bytes[432:440], tmp_val)
	tmp_val, D = bits.Sub64(t[55], mod[55], D)
	binary.BigEndian.PutUint64(z_bytes[440:448], tmp_val)
	tmp_val, D = bits.Sub64(t[56], mod[56], D)
	binary.BigEndian.PutUint64(z_bytes[448:456], tmp_val)
	tmp_val, D = bits.Sub64(t[57], mod[57], D)
	binary.BigEndian.PutUint64(z_bytes[456:464], tmp_val)
	tmp_val, D = bits.Sub64(t[58], mod[58], D)
	binary.BigEndian.PutUint64(z_bytes[464:472], tmp_val)
	tmp_val, D = bits.Sub64(t[59], mod[59], D)
	binary.BigEndian.PutUint64(z_bytes[472:480], tmp_val)
	tmp_val, D = bits.Sub64(t[60], mod[60], D)
	binary.BigEndian.PutUint64(z_bytes[480:488], tmp_val)
	tmp_val, D = bits.Sub64(t[61], mod[61], D)
	binary.BigEndian.PutUint64(z_bytes[488:496], tmp_val)
	tmp_val, D = bits.Sub64(t[62], mod[62], D)
	binary.BigEndian.PutUint64(z_bytes[496:504], tmp_val)
	tmp_val, D = bits.Sub64(t[63], mod[63], D)
	binary.BigEndian.PutUint64(z_bytes[504:512], tmp_val)

	if D != 0 && t[64] == 0 {
		// reduction was not necessary

		// conversion to big-endian, padded to make the length a multiple of 64-bits
		binary.BigEndian.PutUint64(z_bytes[0:8], t[64])
		binary.BigEndian.PutUint64(z_bytes[8:16], t[63])
		binary.BigEndian.PutUint64(z_bytes[16:24], t[62])
		binary.BigEndian.PutUint64(z_bytes[24:32], t[61])
		binary.BigEndian.PutUint64(z_bytes[32:40], t[60])
		binary.BigEndian.PutUint64(z_bytes[40:48], t[59])
		binary.BigEndian.PutUint64(z_bytes[48:56], t[58])
		binary.BigEndian.PutUint64(z_bytes[56:64], t[57])
		binary.BigEndian.PutUint64(z_bytes[64:72], t[56])
		binary.BigEndian.PutUint64(z_bytes[72:80], t[55])
		binary.BigEndian.PutUint64(z_bytes[80:88], t[54])
		binary.BigEndian.PutUint64(z_bytes[88:96], t[53])
		binary.BigEndian.PutUint64(z_bytes[96:104], t[52])
		binary.BigEndian.PutUint64(z_bytes[104:112], t[51])
		binary.BigEndian.PutUint64(z_bytes[112:120], t[50])
		binary.BigEndian.PutUint64(z_bytes[120:128], t[49])
		binary.BigEndian.PutUint64(z_bytes[128:136], t[48])
		binary.BigEndian.PutUint64(z_bytes[136:144], t[47])
		binary.BigEndian.PutUint64(z_bytes[144:152], t[46])
		binary.BigEndian.PutUint64(z_bytes[152:160], t[45])
		binary.BigEndian.PutUint64(z_bytes[160:168], t[44])
		binary.BigEndian.PutUint64(z_bytes[168:176], t[43])
		binary.BigEndian.PutUint64(z_bytes[176:184], t[42])
		binary.BigEndian.PutUint64(z_bytes[184:192], t[41])
		binary.BigEndian.PutUint64(z_bytes[192:200], t[40])
		binary.BigEndian.PutUint64(z_bytes[200:208], t[39])
		binary.BigEndian.PutUint64(z_bytes[208:216], t[38])
		binary.BigEndian.PutUint64(z_bytes[216:224], t[37])
		binary.BigEndian.PutUint64(z_bytes[224:232], t[36])
		binary.BigEndian.PutUint64(z_bytes[232:240], t[35])
		binary.BigEndian.PutUint64(z_bytes[240:248], t[34])
		binary.BigEndian.PutUint64(z_bytes[248:256], t[33])
		binary.BigEndian.PutUint64(z_bytes[256:264], t[32])
		binary.BigEndian.PutUint64(z_bytes[264:272], t[31])
		binary.BigEndian.PutUint64(z_bytes[272:280], t[30])
		binary.BigEndian.PutUint64(z_bytes[280:288], t[29])
		binary.BigEndian.PutUint64(z_bytes[288:296], t[28])
		binary.BigEndian.PutUint64(z_bytes[296:304], t[27])
		binary.BigEndian.PutUint64(z_bytes[304:312], t[26])
		binary.BigEndian.PutUint64(z_bytes[312:320], t[25])
		binary.BigEndian.PutUint64(z_bytes[320:328], t[24])
		binary.BigEndian.PutUint64(z_bytes[328:336], t[23])
		binary.BigEndian.PutUint64(z_bytes[336:344], t[22])
		binary.BigEndian.PutUint64(z_bytes[344:352], t[21])
		binary.BigEndian.PutUint64(z_bytes[352:360], t[20])
		binary.BigEndian.PutUint64(z_bytes[360:368], t[19])
		binary.BigEndian.PutUint64(z_bytes[368:376], t[18])
		binary.BigEndian.PutUint64(z_bytes[376:384], t[17])
		binary.BigEndian.PutUint64(z_bytes[384:392], t[16])
		binary.BigEndian.PutUint64(z_bytes[392:400], t[15])
		binary.BigEndian.PutUint64(z_bytes[400:408], t[14])
		binary.BigEndian.PutUint64(z_bytes[408:416], t[13])
		binary.BigEndian.PutUint64(z_bytes[416:424], t[12])
		binary.BigEndian.PutUint64(z_bytes[424:432], t[11])
		binary.BigEndian.PutUint64(z_bytes[432:440], t[10])
		binary.BigEndian.PutUint64(z_bytes[440:448], t[9])
		binary.BigEndian.PutUint64(z_bytes[448:456], t[8])
		binary.BigEndian.PutUint64(z_bytes[456:464], t[7])
		binary.BigEndian.PutUint64(z_bytes[464:472], t[6])
		binary.BigEndian.PutUint64(z_bytes[472:480], t[5])
		binary.BigEndian.PutUint64(z_bytes[480:488], t[4])
		binary.BigEndian.PutUint64(z_bytes[488:496], t[3])
		binary.BigEndian.PutUint64(z_bytes[496:504], t[2])
		binary.BigEndian.PutUint64(z_bytes[504:512], t[1])
	} /* else {
	    panic("not worst case performance")
	}*/

	return nil
}
