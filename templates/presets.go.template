package mont_arith

{{ $limbCount := .LimbCount}}
{{ $limbBits := .LimbBits}}
{{ $limbCountPlusOne := add .LimbCount 1}}

type ArithPreset struct {
	AddModImpls []arithFunc
	SubModImpls []arithFunc
	MulMontImpls []arithFunc
    name string
    mulMontCIOSCutoff uint
}

func (a *ArithPreset) MaxLimbCount() uint {
    return uint(len(a.MulMontImpls))
}

// Preset same as default except it uses blst's go-asm impl of the arithmetic at 384bit widths
func Asm384Preset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
		{{- if eq $i 6 }}
			AddMod384_asm,
		{{- else }}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end }}
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
		{{- if eq $i 6 }}
			SubMod384_asm,
		{{- else }}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end }}
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			{{- if eq $i 6}}
				MulMont384_asm,
			{{- else }}
                MulMontNonUnrolled{{mul $i $limbBits}},
			{{- end}}
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "asm384", {{$limbCountPlusOne}}}
}

func UnrolledPreset() ArithPreset {
    // full unrolled for addmod/submod.  only first limb counts up to 32 for mulmont

	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			AddModUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			SubModUnrolled{{mul $i $limbBits}},
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
            {{- if gte $i 16 }}
                MulMontNonUnrolled{{mul $i $limbBits}},
            {{- else }}
                MulMontUnrolled{{mul $i $limbBits}},
            {{- end }}
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "unrolled", {{$limbCountPlusOne}}}
}

func NonUnrolledPreset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
            MulMontNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "non-unrolled", {{$limbCountPlusOne}}}
}

func GenericMulMontPreset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
            MulMontNonInterleaved,
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "generic", 0}
}

func DefaultPreset() ArithPreset {
    return NonUnrolledPreset()
}
