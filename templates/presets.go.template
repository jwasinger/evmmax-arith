package mont_arith

{{ $limbCount := .LimbCount}}
{{ $limbBits := .LimbBits}}
{{ $limbCountPlusOne := add .LimbCount 1}}

type benchRange struct {
    min uint
    max uint
}

type ArithPreset struct {
	AddModImpls []arithFunc
	SubModImpls []arithFunc
	MulMontImpls []arithFunc
    name string
    mulMontCIOSCutoff uint

    benchRanges map[string]benchRange
}

func makeBenchRanges(addModMin, addModMax, subModMin, subModMax, mulMontMin, mulMontMax, setModMin, setModMax uint) map[string]benchRange {
    return map[string]benchRange{
        "addmod": benchRange{addModMin, addModMax},
        "submod": benchRange{subModMin, subModMax},
        "mulmont": benchRange{mulMontMin, mulMontMax},
        "setmod": benchRange{setModMin, setModMax},
    }
}

func (a *ArithPreset) MaxLimbCount() uint {
    return uint(len(a.MulMontImpls))
}

// Preset same as default except it uses blst's go-asm impl of the arithmetic at 384bit widths
func Asm384Preset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
		{{- if eq $i 6 }}
			AddMod384_asm,
		{{- else }}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end }}
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
		{{- if eq $i 6 }}
			SubMod384_asm,
		{{- else }}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end }}
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			{{- if eq $i 6}}
				MulMont384_asm,
			{{- else }}
                MulMontNonUnrolled{{mul $i $limbBits}},
			{{- end}}
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "asm384", {{$limbCount}},
                       makeBenchRanges(6, 6,
                       6, 6,
                       6, 6,
                       0, 0),
                      }
}

func NonUnrolledPreset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
            MulMontNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "non-unrolled", {{$limbCount}},
                       makeBenchRanges(
                       1, {{$limbCount}},
                       1, {{$limbCount}},
                       1, {{$limbCount}},
                       1, {{$limbCount}}),
        }
}

func GenericMulMontPreset() ArithPreset {
	addModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	subModImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
			SubModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}
	mulMontImpls := []arithFunc {
		{{- range $i := intRange 1 $limbCountPlusOne}}
            MulMontNonInterleaved,
		{{- end}}
	}

	return ArithPreset{addModImpls, subModImpls, mulMontImpls, "generic", 0,
            makeBenchRanges(
            1, 1000, 
            1, 1000,
            64, 1000,
            64, 1000),
        }
}

func DefaultPreset() ArithPreset {
    return NonUnrolledPreset()
}

func AllPresets() []ArithPreset {
    return []ArithPreset{
        GenericMulMontPreset(),
        NonUnrolledPreset(),
        Asm384Preset(),
    }
}
