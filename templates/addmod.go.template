{{ $limbCount := .LimbCount}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbBits := .LimbBits}}

// TODO check unrolled speed
func AddModNonUnrolled{{mul $limbCount $limbBits}}(f *Field, out_bytes, x_bytes, y_bytes []byte) (error) {
	x := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&x_bytes[0]))[:]
	y := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&y_bytes[0]))[:]
	z := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
    mod := f.Modulus

    if GTE(x, mod) || GTE(y, mod) {
        return errors.New(fmt.Sprintf("input greater than or equal to modulus"))
    }

    var c uint64 = 0
    tmp := make([]uint64, {{$limbCount}})

    for i := 0; i < {{$limbCount}}; i++ {
        tmp[i], c = bits.Add64(x[i], y[i], c)
    }

    c = 0
    for i := 0; i < {{$limbCount}}; i++ {
        z[i], c = bits.Sub64(tmp[i], mod[i], c)
    }

    // final sub was unnecessary
    if c != 0 {
        copy(z, tmp[:])
    }
    return nil
}
