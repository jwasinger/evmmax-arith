{{ $limbCount := .LimbCount}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbBits := .LimbBits}}

func SubModNonUnrolled{{mul $limbCount $limbBits}}(f *Field, out_bytes, x_bytes, y_bytes []byte) (error) {
    var x, y, z [{{$limbCount}}]uint64
    {{- range $i := intRange 0 $limbCount}}
        x[{{$i}}] = binary.BigEndian.Uint64(x_bytes[{{mul $i 8}}:{{mulp1 $i 8}}])
        y[{{$i}}] = binary.BigEndian.Uint64(y_bytes[{{mul $i 8}}:{{mulp1 $i 8}}])
    {{- end}}

	mod := f.ModulusLimbs
    _ = mod[{{$lastLimb}}]

    {{ template "GTE" dict "limbCount" $limbCount "x" "x" "y" "y" "z" "mod"}}

    var c uint64 = 0
    var c1 uint64 = 0
	tmp := {{ makeZeroedLimbs $limbCount}}

    for i := 0; i < {{$limbCount}}; i++ {
        tmp[i], c = bits.Sub64(x[i], y[i], c)
    }

    for i := 0; i < {{$limbCount}}; i++ {
        z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
    }

    var src []uint64
    // final sub was unnecessary
    if c == 0 {
        src = tmp[:]
    } else {
        src = z[:]
    }

    // pre-hint to compiler: TODO check asm to make sure this actually does something.
    _ = src[{{sub $limbCount 1}}]

    {{- range $i := intRange 0 $limbCount}}
        binary.BigEndian.PutUint64(out_bytes[{{mul $i 8}}:{{mulp1 $i 8}}], src[{{$i}}])
    {{- end}}
    return nil
}
