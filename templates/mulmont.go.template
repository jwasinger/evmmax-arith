{{ $limbCount := .LimbCount}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbBits := .LimbBits}}

var Zero{{$limbCount}}Limbs []uint = make([]uint, {{$limbCount}}, {{$limbCount}})

/* NOTE: addmod/submod/mulmodmont assume:
	len(z) == len(x) == len(y) == len(mod)
    and
    x < mod, y < mod
*/

// NOTE: assumes x < mod and y < mod
func mulModMont{{mul $limbCount $limbBits}}(z, x, y, mod nat, modinv Word) (error) {
    var t [{{$limbCount}}]Word
	var c [{{max $limbCount 3}}]Word

	{{- range $j := intRange 0 $limbCount}}
		// round {{$j}}
		{{- if eq $j 0}}
			v := x[{{$j}}]
			c1_uint, c0_uint := bits.Mul(uint(v), uint(y[0]))
            c[0] = Word(c0_uint)
            c[1] = Word(c1_uint)
			m := c[0] * modinv
			c[2] = madd0(m, mod[0], c[0])
			{{- range $i := intRange 1 $limbCount }}
				c[1], c[0] = madd1(v, y[{{$i}}], c[1])
				{{- if eq $i $lastLimb }}
					t[{{$lastLimb}}], t[{{sub $i 1}}]  = madd3(m, mod[{{$i}}], c[0], c[2], c[1])
				{{- else}}
					c[2], t[{{sub $i 1}}] = madd2(m, mod[{{$i}}], c[2], c[0])
				{{- end}}
			{{- end}}
		{{- else if eq $j $lastLimb}}
			v = x[{{$j}}]
			c[1], c[0] = madd1(v, y[0], t[0])
			m = c[0] * modinv
			c[2] = madd0(m, mod[0], c[0])
			{{- range $i := intRange 1 $limbCount}}
				c[1], c[0] = madd2(v, y[{{$i}}],  c[1], t[{{$i}}])
				{{- if eq $i $lastLimb}}
					z[{{$lastLimb}}], z[{{sub $i 1}}] = madd3(m, mod[{{$i}}], c[0], c[2], c[1])
				{{- else}}
					c[2], z[{{sub $i 1}}] = madd2(m, mod[{{$i}}],  c[2], c[0])
				{{- end}}
			{{- end}}
		{{- else}}
			v = x[{{$j}}]
			c[1], c[0] = madd1(v, y[0], t[0])
			m = c[0] * modinv
			c[2] = madd0(m, mod[0], c[0])
			{{- range $i := intRange 1 $limbCount}}
				c[1], c[0] = madd2(v, y[{{$i}}], c[1], t[{{$i}}])
				{{- if eq $i $lastLimb}}
					t[{{$lastLimb}}], t[{{sub $i 1}}] = madd3(m, mod[{{$i}}], c[0], c[2], c[1])
				{{- else}}
					c[2], t[{{sub $i 1}}] = madd2(m, mod[{{$i}}], c[2], c[0])
				{{- end}}
			{{- end}}
		{{-  end }}
	{{- end }}

	// final subtraction, overwriting z if z > mod
	c[0] = 0
	for i := 0; i < {{$limbCount}}; i++ {
		tUint, cUint := bits.Sub(uint(z[i]), uint(mod[i]), uint(c[0]))
        t[i] = Word(tUint)
        c[0] = Word(cUint)
	}

	if c[0] == 0 {
		copy(z, t[:])
	}

	return nil
}

