{{ $limbCount := .LimbCount}}
{{ $limbCountSub1 := sub $limbCount 1}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbBits := .LimbBits}}
{{ $limbCountPlus1 := add .LimbCount 1 }}
{{ $bitWidthBytes := 8 }}


func MontMul{{mul $limbCount $limbBits}}(modInv uint64, modBytes, outBytes, xBytes, yBytes []byte) {
	var t [{{- add $limbCount 1}}]uint64
	var D uint64
	var m, C uint64

        var (
            mod [{{$limbCount}}]uint64
            x [{{$limbCount}}]uint64
            y [{{$limbCount}}]uint64
            res [{{$limbCount}}]uint64
        )

    // signal to compiler to avoid subsequent bounds checks
    _ = xBytes[{{sub (mul $bitWidthBytes  $limbCount) 1}}]
    _ = yBytes[{{sub (mul $bitWidthBytes  $limbCount) 1}}]
    _ = outBytes[{{sub (mul $bitWidthBytes  $limbCount) 1}}]
    _ = modBytes[{{sub (mul $bitWidthBytes  $limbCount) 1}}]

    {{- range $i := intRange 0 $limbCountSub1 }}
        x[{{$i}}] = binary.LittleEndian.Uint64(xBytes[{{offsetStart $i}}:{{offsetEnd $i}}])
    {{- end}}
    {{- range $i := intRange 0 $limbCountSub1 }}
        y[{{$i}}] = binary.LittleEndian.Uint64(yBytes[{{offsetStart $i}}:{{offsetEnd $i}}])
    {{- end}}
    {{- range $i := intRange 0 $limbCountSub1 }}
        mod[{{$i}}] = binary.LittleEndian.Uint64(modBytes[{{offsetStart $i}}:{{offsetEnd $i}}])
    {{- end}}


    // 1st outer loop:
    // 1st inner loop: t <- x[0] * y
    C, t[0] = bits.Mul64(x[0], y[0])
    {{- range $i := intRange 1 $limbCount}}
        C, t[{{$i}}] = madd1(x[0], y[{{$i}}], C)
    {{- end}}

    t[{{$limbCount}}], D = bits.Add64(t[{{$limbCount}}], C, 0)
    // m = t[0]n'[0] mod W
    m = t[0] * modInv

    // -----------------------------------
    // Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
    C = madd0(m, mod[0], t[0])
    {{- range $i := intRange 1 $limbCount}}
            C, t[{{sub $i 1}}] = madd2(m, mod[{{$i}}], t[{{$i}}], C)
    {{- end}}
    t[{{sub $limbCount 1}}], C = bits.Add64(t[{{$limbCount}}], C, 0)
    t[{{$limbCount}}], _ = bits.Add64(0, D, C)

    for j := 1; j < {{$limbCount}}; j++ {
        //  first inner loop (second iteration)
        C, t[0] = madd1(x[j], y[0], t[0])
        {{- range $i := intRange 1 $limbCount }}
            C, t[{{$i}}] = madd2(x[j], y[{{$i}}], t[{{$i}}], C)
        {{- end}}
		t[{{$limbCount}}], D = bits.Add64(t[{{$limbCount}}], C, 0)
		// m = t[0]n'[0] mod W
		m = t[0] * modInv

		// -----------------------------------
		// Second inner loop: reduce 1 limb at a time (B**1, B**2, ...)
		C = madd0(m, mod[0], t[0])
		{{- range $i := intRange 1 $limbCount}}
				C, t[{{sub $i 1}}] = madd2(m, mod[{{$i}}], t[{{$i}}], C)
		{{- end}}
		t[{{sub $limbCount 1}}], C = bits.Add64(t[{{$limbCount}}], C, 0)
		t[{{$limbCount}}], _ = bits.Add64(0, D, C)
    }

	{{- range $i := intRange 0 $limbCount}}
		{{-  if eq $i 0 }}
			res[{{$i}}], D = bits.Sub64(t[{{$i}}], mod[{{$i}}], 0)
		{{-  else  }}
			res[{{$i}}], D = bits.Sub64(t[{{$i}}], mod[{{$i}}], D)
		{{- end}}
	{{- end}}

    var src []uint64
    if D != 0 && t[{{$limbCount}}] == 0 {
        src = t[:{{$limbCount}}]
	} else {
        src = res[:]
	}

    {{- range $i := intRange 0 $limbCount }}
        binary.LittleEndian.PutUint64(outBytes[{{mul $i 8}}:{{mulp1 $i 8}}], src[{{sub $limbCountSub1 $i}}])
    {{- end }}
}
