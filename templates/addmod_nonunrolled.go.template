{{ $limbCount := .LimbCount}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbCountPlus1 := add .LimbCount 1 }}
{{ $limbCountSub1 := sub .LimbCount 1 }}
{{ $limbBits := .LimbBits}}

func AddModNonUnrolled{{mul $limbCount $limbBits}}(f *Field, out_bytes, x_bytes, y_bytes []byte) (error) {
    var x, y, z [{{$limbCount}}]uint64
    {{- if eq $limbCount 1 }}
        x[0] = binary.BigEndian.Uint64(x_bytes[0:8])
        y[0] = binary.BigEndian.Uint64(y_bytes[0:8])
    {{- else}}
        {{- range $i := intRange 0 $limbCount}}
            x[{{sub $limbCountSub1 $i}}] = binary.BigEndian.Uint64(x_bytes[{{mul $i 8}}:{{mulp1 $i 8}}])
            y[{{sub $limbCountSub1 $i}}] = binary.BigEndian.Uint64(y_bytes[{{mul $i 8}}:{{mulp1 $i 8}}])
        {{- end}}
    {{- end}}

	mod := f.ModulusLimbs
    fmt.Printf("inside.  len(mod) = %d\n", len(mod))
    _ = mod[{{$lastLimb}}]

    {{ template "GTE" dict "limbCount" $limbCount "x" "x" "y" "y" "z" "mod"}}

    fmt.Printf("inside\n x=%x\ny=%x\n\n", x, y)

    var c uint64 = 0
    var c1 uint64 = 0
	tmp := {{ makeZeroedLimbs $limbCount}}

    for i := 0; i < {{$limbCount}}; i++ {
        tmp[i], c = bits.Add64(x[i], y[i], c)
    }

    for i := 0; i < {{$limbCount}}; i++ {
        z[i], c1 = bits.Sub64(tmp[i], mod[i], c1)
    }

    var src []uint64
    // final sub was unnecessary
    if c == 0 && c1 != 0 {
        src = tmp[:]
    } else {
        src = z[:]
    }

    // TODO check if pre-hint to compiler about src size makes a difference here in the generated assembly
    {{- range $i := intRange 0 $limbCount}}
        binary.BigEndian.PutUint64(out_bytes[{{mul $i 8}}:{{mulp1 $i 8}}], src[{{sub $limbCountSub1 $i}}])
    {{- end}}
    return nil
}
