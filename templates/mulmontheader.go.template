{{ $limbCount := .LimbCount}}
{{ $limbCountPlusOne := add .LimbCount 1}}
{{ $limbBits := .LimbBits}}

package mont_arith

import (
	"math/bits"
)

type mulMontFunc func(out, x, y, mod nat, modinv Word) error
var montgomeryFixedWidth []mulMontFunc = []mulMontFunc {
    mulModMont64,
    {{- range $i := intRange 2 $limbCountPlusOne}}
        mulModMont{{mul $i $limbBits}},
    {{- end}}
}

// madd0 hi = a*b + c (discards lo bits)
func madd0(a, b, c Word) (Word) {
	var carry, lo uint
	hi, lo := bits.Mul(uint(a), uint(b))
	_, carry = bits.Add(lo, uint(c), 0)
	hi, _ = bits.Add(hi, 0, carry)
	return Word(hi)
}

// madd1 hi, lo = a*b + c
func madd1(a, b, c Word) (Word, Word) {
	var carry uint
	hi, lo := bits.Mul(uint(a), uint(b))
	lo, carry = bits.Add(uint(lo), uint(c), 0)
	hi, _ = bits.Add(hi, 0, carry)
	return Word(hi), Word(lo)
}

// madd2 hi, lo = a*b + c + d
func madd2(a, b, c, d Word) (Word, Word) {
	var carry uint
    var c_uint uint
	hi, lo := bits.Mul(uint(a), uint(b))
	c_uint, carry = bits.Add(uint(c), uint(d), 0)
    c = Word(c_uint)
	hi, _ = bits.Add(hi, 0, carry)
	lo, carry = bits.Add(lo, uint(c), 0)
	hi, _ = bits.Add(hi, 0, carry)
	return Word(hi), Word(lo)
}

func madd3(a, b, c, d, e Word) (Word, Word) {
	var carry uint
    var c_uint uint
	hi, lo := bits.Mul(uint(a), uint(b))
	c_uint, carry = bits.Add(uint(c), uint(d), 0)
	hi, _ = bits.Add(hi, 0, carry)
	lo, carry = bits.Add(lo, c_uint, 0)
	hi, _ = bits.Add(hi, uint(e), carry)
	return Word(hi), Word(lo)
}

/*
 * begin mulmont implementations
 */

func mulModMont64(out, x, y, mod nat, modinv Word) error {
	var product [2]uint
	var c Word

	product[1], product[0] = bits.Mul(uint(x[0]), uint(y[0]))
	m := Word(product[0]) * modinv
	c, _ = madd1(m, mod[0], Word(product[0]))
	out[0] = c + Word(product[1])

	if out[0] > mod[0] {
		out[0] = c - mod[0]
	}

	return nil
}
