{{ $limbCount := .LimbCount}}
{{ $limbCountPlusOne := add .LimbCount 1}}
{{ $limbBits := .LimbBits}}

package mont_arith

import (
	"math/bits"
)

type mulMontFunc func(out, x, y, mod nat, modinv Word) error
var montgomeryFixedWidth []mulMontFunc = []mulMontFunc {
    MulModMont64,
    {{- range $i := intRange 2 $limbCountPlusOne}}
        MulModMont{{mul $i $limbBits}},
    {{- end}}
}

func MulModMont64(out, x, y, mod nat, modinv Word) error {
	var product [2]uint
	var c Word

	product[1], product[0] = bits.Mul(uint(x[0]), uint(y[0]))
	m := Word(product[0]) * modinv
	c, _ = madd1(m, mod[0], Word(product[0]))
	out[0] = c + Word(product[1])

	if out[0] > mod[0] {
		out[0] = c - mod[0]
	}

	return nil
}
